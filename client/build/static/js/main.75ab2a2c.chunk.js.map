{"version":3,"sources":["components/Button/index.js","components/ErrorHint/index.js","components/SettingsTable/Input/InputSettings/index.js","components/SettingsTable/Input/index.js","components/SettingsTable/index.js","redux/actions.js","redux/action_types.js","components/Main/Table/TableBody/RowFragment/CellRenderer/StaticCell.js","components/Main/Table/TableBody/RowFragment/CellRenderer/PercentageCell.js","components/Main/Table/TableBody/RowFragment/CellRenderer/SumCell.js","components/Main/Table/TableBody/RowFragment/index.js","components/Main/Table/TableBody/AverageRow/calculateAverageValues.js","components/Main/Table/TableBody/AverageRow/index.js","components/CrossButton/index.js","components/Main/Table/TableBody/RowFragment/CellRenderer/IncrementCell.js","components/Main/Table/TableBody/TableRow/index.js","components/Main/Table/TableBody/index.js","components/Main/Table/TableHead/HeadCell/index.js","components/Main/Table/TableHead/index.js","components/Main/Table/BacklightHint/index.js","components/Main/Table/index.js","components/Main/index.js","App.js","serviceWorker.js","redux/reducers/matrixReducer/buildingMatrix.js","redux/reducers/matrixReducer/defaultState.js","redux/reducers/matrixReducer/findNearestIds.js","redux/reducers/matrixReducer/index.js","redux/rootReducer.js","index.js"],"names":["Button","className","buttonClickHandler","buttonText","onClick","ErrorHint","errorText","InputSettings","id","value","onChangeInput","type","onChange","event","target","min","Input","label","props","htmlFor","SettingsTable","settings","useSelector","state","matrix","dispatch","useDispatch","useState","rowsCount","setRowsCount","columnsCount","setColumnsCount","cellsCount","setCellsCount","isError","setIsError","setErrorText","message","error","checkSettings","setTimeout","setSettings","StaticCell","PercentageCell","sumRow","percent","toFixed","style","backgroundSize","SumCell","sumMouseEnterHandler","sumMouseLeaveHandler","onMouseEnter","onMouseLeave","RowFragment","RendererType","rowData","showPercentageValue","setShowPercentageValue","Renderer","rowCells","map","cellData","index","key","Fragment","calculateAverageValues","matrixData","matrixValuesOnly","item","row","columnsNumber","length","averageValues","columnIndex","columnSum","rowIndex","average","push","avgValue","AverageRow","averageColumnsValues","reduce","sum","Number","CrossButton","IncrementCell","nearestIds","isSameValue","sameValueIds","find","sameValueId","isNearestValue","ids","nearestId","setNearestIds","incrementCell","TableRow","rowNumber","data","TableBody","tableRows","HeadCell","headerCell","TableHead","heads","i","createHeads","BacklightHint","Table","NoDataView","Main","App","Boolean","window","location","hostname","match","addCells","step","Date","now","Math","round","random","addRows","rebuildMatrix","prevSettings","newSettings","columnsCountDiff","forEach","splice","rebuildColumns","rowsCountDiff","rebuildRows","defaultState","sortedData","checkTargetValueIsLowest","targetId","checkTargetValueIsBiggest","getNearestIdsOfLowestValue","slice","getNearestIdsOfBiggestValue","getNearestId","indexOfTargetId","indexOf","prevItem","nextItem","currentItem","abs","getIds","targetValue","filter","includes","findNearestIds","flat","initialState","sortData","sort","a","b","checkMatrixData","createMatrix","matrixReducer","action","rootReducer","combineReducers","ReactDOM","render","store","createStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.75ab2a2c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.scss\";\n\nconst Button = ({ className, buttonClickHandler, buttonText }) => {\n   return (\n      <button className={className} onClick={buttonClickHandler}>\n         {buttonText}\n      </button>\n   );\n};\n\nexport default Button;\n","import React from \"react\";\nimport './ErrorHint.scss'\n\nconst ErrorHint = ({ errorText }) => {\n   return <div className='error-hint'>{errorText}</div>;\n};\n\nexport default ErrorHint;\n","import React from \"react\";\nimport \"./InputCounts.scss\";\nimport Button from \"../../../Button\";\n\nconst InputSettings = ({ id, value, onChangeInput }) => {\n   return (\n      <div className=\"input-settings\">\n         <Button\n            className=\"input-control__button\"\n            buttonText=\"-\"\n            buttonClickHandler={()=>onChangeInput(--value)}\n         />\n         <input\n            className=\"input-settings__input\"\n            type=\"number\"\n            id={id}\n            onChange={(event) => onChangeInput(+event.target.value)}\n            min=\"0\"\n            value={value}\n         />\n         <Button\n            className=\"input-control__button\"\n            buttonText=\"+\"\n            buttonClickHandler={()=>onChangeInput(++value)}\n         />\n      </div>\n   );\n};\n\nexport default InputSettings;\n","import React from \"react\";\nimport InputSettings from \"./InputSettings\";\n\nconst Input = ({ id, label, ...props }) => {\n   return (\n      <div className=\"input-wrapper\">\n         <label htmlFor={id}>{label}</label>\n         <InputSettings id={id} {...props} />\n      </div>\n   );\n};\n\nexport default Input;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\n\nconst inputClassName = \"input-settings\";\nconst ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows count\";\nconst COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns count\";\nconst ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows and columns count\";\nconst checkSettings = (rowsCount, columnsCount) => {\n   if (\n      (rowsCount === 0 || rowsCount < 0) &&\n      (columnsCount === 0 || columnsCount < 0)\n   ) {\n      return ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE;\n   } else if (rowsCount === 0 || rowsCount < 0) {\n      return ROWS_COUNT_ERROR_MESSAGE;\n   } else if (columnsCount === 0 || columnsCount < 0) {\n      return COLUMNS_COUNT_ERROR_MESSAGE;\n   }\n};\n\nconst SettingsTable = () => {\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [isError, setIsError] = useState(false);\n   const [errorText, setErrorText] = useState(\"\");\n\n   const showErrorMessage = (message) => {\n      setIsError(true);\n      setErrorText(message);\n      setTimeout(() => {\n         setIsError(false);\n      }, 2000);\n   };\n\n   const applySettingsHandler = () => {\n      const error = checkSettings(rowsCount, columnsCount);\n      if (error) {\n         showErrorMessage(error);\n      } else {\n         dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n      }\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <Input\n            id=\"rows-input\"\n            className={inputClassName}\n            label=\"Set the rows count\"\n            value={rowsCount}\n            onChangeInput={setRowsCount}\n         />\n         <Input\n            id=\"columns-input\"\n            className={inputClassName}\n            label=\"Set the columns count\"\n            value={columnsCount}\n            onChangeInput={setColumnsCount}\n         />\n         <Input\n            id=\"cells-input\"\n            className={inputClassName}\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            onChangeInput={setCellsCount}\n         />\n         <Button\n            className=\"red-button\"\n            buttonText=\"Apply settings\"\n            buttonClickHandler={applySettingsHandler}\n         />\n         {isError && <ErrorHint errorText={errorText} />}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n","import {\n   INCREMENT_CELL,\n   CREATE_MATRIX,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n   REBUILD_MATRIX,\n   RESET_SETTINGS,\n} from \"./action_types\";\n\nexport const setSettings = (settings) => {\n   return {\n      type: SET_SETTINGS,\n      settings,\n   };\n};\n\nexport const resetSettings = () => {\n   return { type: RESET_SETTINGS };\n};\n\nexport const createMatrix = () => {\n   return {\n      type: CREATE_MATRIX,\n   };\n};\n\nexport const rebuildMatrix = () => {\n   return { type: REBUILD_MATRIX };\n};\n\nexport const incrementCell = (id, value) => {\n   return {\n      type: INCREMENT_CELL,\n      id,\n      value,\n   };\n};\n\nexport const removeRow = (rowCount) => {\n   return {\n      type: REMOVE_ROW,\n      rowIndex: rowCount - 1,\n   };\n};\n\nexport const addRow = () => {\n   return {\n      type: ADD_ROW,\n   };\n};\n\nexport const setNearestIds = (id) => {\n   return {\n      type: SET_NEAREST_IDS,\n      id,\n   };\n};\n\nexport const resetNearestIds = () => {\n   return {\n      type: RESET_NEAREST_IDS,\n   };\n};\n","export const SET_SETTINGS = \"SET_SETTINGS\";\nexport const RESET_SETTINGS = \"RESET_SETTINGS\";\nexport const CREATE_MATRIX = \"CREATE_MATRIX\";\nexport const REBUILD_MATRIX = \"REBUILD_MATRIX\";\nexport const INCREMENT_CELL = \"INCREMENT_CELL\";\nexport const REMOVE_ROW = \"REMOVE_ROW\";\nexport const ADD_ROW = \"ADD_ROW\";\nexport const SET_NEAREST_IDS = \"SET_NEAREST_IDS\";\nexport const RESET_NEAREST_IDS = \"RESET_NEAREST_IDS\";\n","import React from \"react\";\n\nconst StaticCell = ({ value }) => {\n   return (\n      <td className=\"static-cell\">\n         <div>{value}</div>\n      </td>\n   );\n};\n\nexport default StaticCell;\n","import React from \"react\";\n\nconst PercentageCell = ({ sumRow, value }) => {\n   const percent = ((value * 100) / sumRow).toFixed(2);\n   const style = {\n      backgroundSize: `100% ${percent}% `,\n   };\n   return (\n      <td>\n         <div style={style} className=\"percentage-cell\">\n            {percent}%\n         </div>\n      </td>\n   );\n};\n\nexport default PercentageCell;\n","import React from \"react\";\n\nconst SumCell = ({ value, sumMouseEnterHandler, sumMouseLeaveHandler }) => {\n   return (\n      <td\n         className=\"sum-cell\"\n         onMouseEnter={sumMouseEnterHandler}\n         onMouseLeave={sumMouseLeaveHandler}\n      >\n         <div>{value}</div>\n      </td>\n   );\n};\n\nexport default SumCell;\n","import React, { useState } from \"react\";\nimport PercentageCell from \"./CellRenderer/PercentageCell\";\nimport StaticCell from \"./CellRenderer/StaticCell\";\nimport SumCell from \"./CellRenderer/SumCell\";\n\nconst RowFragment = ({ label, RendererType, rowData, sumRow }) => {\n   const [showPercentageValue, setShowPercentageValue] = useState(false);\n   const Renderer = showPercentageValue ? PercentageCell : RendererType;\n   const rowCells = rowData.map((cellData, index) => {\n      const value = cellData.value || cellData;\n      return (\n         <Renderer\n            key={cellData.id || index}\n            id={cellData.id}\n            value={value}\n            sumRow={sumRow}\n         />\n      );\n   });\n\n   return (\n      <React.Fragment>\n         <StaticCell key={label} value={label} />\n         {rowCells}\n         <SumCell\n            key={sumRow}\n            value={sumRow}\n            sumMouseEnterHandler={() => setShowPercentageValue(true)}\n            sumMouseLeaveHandler={() => setShowPercentageValue(false)}\n         />\n      </React.Fragment>\n   );\n};\n\nexport default RowFragment;\n","const calculateAverageValues = (matrixData) => {\n   const matrixValuesOnly = matrixData.map((item) =>\n      item.map((row) => row.value)\n   );\n   const columnsNumber = matrixValuesOnly[0].length;\n   let averageValues = [];\n   for (let columnIndex = 0; columnIndex < columnsNumber; columnIndex++) {\n      let columnSum = 0;\n      for (let rowIndex = 0; rowIndex < matrixValuesOnly.length; rowIndex++) {\n         columnSum += matrixValuesOnly[rowIndex][columnIndex];\n      }\n      const average = columnSum / matrixValuesOnly.length;\n      averageValues.push(average);\n   }\n   return averageValues.map(avgValue=>avgValue.toFixed(2));\n};\nexport default calculateAverageValues;\n","import React from \"react\";\nimport StaticCell from \"../RowFragment/CellRenderer/StaticCell\";\nimport RowFragment from \"../RowFragment\";\nimport calculateAverageValues from \"./calculateAverageValues\";\n\nconst className = \"average-cell\";\n\nconst AverageRow = ({ matrixData }) => {\n   const averageColumnsValues = calculateAverageValues(matrixData);\n   const sumRow = averageColumnsValues\n      .reduce((sum, value) => sum + Number(value), 0)\n      .toFixed(2);\n   return (\n      <tr>\n         <RowFragment\n            className={className}\n            label=\"Avg\"\n            rowData={averageColumnsValues}\n            sumRow={sumRow}\n            RendererType={StaticCell}\n         />\n      </tr>\n   );\n};\n\nexport default AverageRow;\n","import React from \"react\";\nimport './CrossButton.scss'\n\nconst CrossButton = ({ buttonClickHandler }) => {\n   return (\n      <div className=\"button-remove\" onClick={buttonClickHandler}>\n         <span className=\"button-remove__element\"></span>\n         <span className=\"button-remove__element\"></span>\n      </div>\n   );\n};\n\nexport default CrossButton;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n   incrementCell,\n   resetNearestIds,\n   setNearestIds,\n} from \"../../../../../../redux/actions\";\n\nconst IncrementCell = ({ id, value }) => {\n   const nearestIds = useSelector((state) => state.matrix.nearestIds);\n   const dispatch = useDispatch();\n   const isSameValue = !!nearestIds.sameValueIds.find(\n      (sameValueId) => sameValueId === id\n   );\n   const isNearestValue = !!nearestIds.ids.find(\n      (nearestId) => nearestId === id\n   );\n   const className = isSameValue\n      ? \"same-value\"\n      : isNearestValue\n      ? \"nearest-value\"\n      : null;\n   return (\n      <td className={className}>\n         <div\n            onMouseEnter={() => dispatch(setNearestIds(id))}\n            onMouseLeave={() => dispatch(resetNearestIds())}\n            onClick={() => dispatch(incrementCell(id, value))}\n         >\n            {value}\n         </div>\n      </td>\n   );\n};\n\nexport default IncrementCell;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport IncrementCell from \"../RowFragment/CellRenderer/IncrementCell\";\nimport RowFragment from \"../RowFragment\";\n\nconst TableRow = ({ rowNumber, rowData }) => {\n   const dispatch = useDispatch();\n   const sumRow = rowData\n      .map((data) => data.value)\n      .reduce((sum, value) => sum + value, 0);\n\n   return (\n      <tr>\n         <RowFragment\n            label={rowNumber}\n            rowData={rowData}\n            RendererType={IncrementCell}\n            sumRow={sumRow}\n         />\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowNumber))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport AverageRow from \"./AverageRow\";\nimport TableRow from \"./TableRow\";\n\nconst TableBody = () => {\n   const data = useSelector((state) => state.matrix.data);\n   const tableRows = data.map((row, index) => (\n      <TableRow rowData={row} rowNumber={index + 1} key={index} />\n   ));\n\n   return (\n      <tbody>\n         {tableRows}\n         <AverageRow matrixData={data} />\n      </tbody>\n   );\n};\n\nexport default TableBody;\n","import React from \"react\";\n\nconst HeadCell = ({ value }) => {\n   return <th>{value}</th>;\n};\n\nexport default HeadCell;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport HeadCell from \"./HeadCell/index\";\n\nconst headerCell = (key, value) => <HeadCell key={key} value={value} />;\nconst createHeads = (columnsCount) => {\n   let heads = [headerCell(\"№\", \"№\")];\n   for (let i = 0; i < columnsCount; i++) {\n      heads.push(headerCell(i + 1, i + 1));\n   }\n   heads.push(headerCell(\"Sum\", \"Sum\"));\n   return heads;\n};\n\nconst TableHead = () => {\n   const columnsCount = useSelector(\n      (state) => state.matrix.settings.columnsCount\n   );\n   const heads = createHeads(columnsCount);\n   return (\n      <thead>\n         <tr>{heads}</tr>\n      </thead>\n   );\n};\n\nexport default TableHead;\n","import React from \"react\";\n\nconst BacklightHint = () => {\n   return (\n      <div className=\"table-blacklight-hint\">\n         <div>\n            <div className=\"same-value\"></div> the same values\n         </div>\n         <div>\n            <div className=\"nearest-value\"></div> the nearest values\n         </div>\n      </div>\n   );\n};\n\nexport default BacklightHint;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addRow } from \"../../../redux/actions\";\nimport \"./Table.scss\";\nimport Button from \"../../Button\";\nimport TableBody from \"./TableBody\";\nimport TableHead from \"./TableHead\";\nimport BacklightHint from \"./BacklightHint\";\n\nconst Table = () => {\n   const dispatch = useDispatch();\n   const cellsCount = useSelector((state) => !!state.matrix.settings.cellsCount);\n\n\n   return (\n      <div className=\"table-wrapper\">\n         <Button\n            className=\"red-button\"\n            buttonText=\"Add new row\"\n            buttonClickHandler={() => dispatch(addRow())}\n         />\n         {cellsCount && <BacklightHint />}\n         <table className=\"table-matrix\">\n            <TableHead />\n            <TableBody />\n         </table>\n      </div>\n   );\n};\n\nexport default Table;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./Main.scss\";\nimport Table from \"./Table\";\n\nconst NoDataView = (\n   <p className=\"empty-table\">Please, set the starting settings of the table</p>\n);\n\nconst Main = () => {\n   const matrixData = useSelector((state) => !!state.matrix.data.length);\n   return <main className=\"main\">{matrixData ? <Table /> : NoDataView}</main>;\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.scss\";\nimport SettingsTable from \"./components/SettingsTable\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n   return (\n      <div className=\"App\">\n         <h1>Welcome to Matrix Builder</h1>\n         <SettingsTable />\n         <div className=\"separate\"></div>\n         <Main />\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const addCells = (columnsCount, row = [], step = 0) => {\n   while (step < columnsCount) {\n      row.push({\n         id: `${Date.now()}${Math.round(1 + Math.random() * 9999)}${step}`,\n         value: Math.round(100 + Math.random() * 899),\n      });\n      step++;\n   }\n   return row;\n};\nexport const addRows = (data, rowsCount, columnsCount, step = 0) => {\n   while (step < rowsCount) {\n      const rowCells = addCells(columnsCount);\n      data.push(rowCells);\n      step++;\n   }\n   return data;\n};\nexport const createMatrix = (rowsCount, columnsCount, data = []) => {\n   return addRows(data, rowsCount, columnsCount);\n};\nconst rebuildColumns = (data, prevSettings, newSettings) => {\n   let columnsCountDiff = 0;\n   if (prevSettings.columnsCount < newSettings.columnsCount) {\n      columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n      data.forEach((row, index) => addCells(columnsCountDiff, row));\n   } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n      columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n      data.forEach((row) => row.splice(-columnsCountDiff));\n   }\n   return data;\n};\nconst rebuildRows = (data, prevSettings, newSettings) => {\n   let rowsCountDiff = 0;\n   if (prevSettings.rowsCount < newSettings.rowsCount) {\n      rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n      addRows(data, rowsCountDiff, newSettings.columnsCount);\n   } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n      rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n      data.splice(-rowsCountDiff);\n   }\n   return data;\n};\nexport const rebuildMatrix = (data, prevSettings, newSettings) => {\n   rebuildColumns(data, prevSettings, newSettings);\n   rebuildRows(data, prevSettings, newSettings);\n   return data;\n};\n","const defaultState = {\n   settings: { rowsCount: 0, columnsCount: 0, cellsCount: 0 },\n   data: [],\n   sortedData: [],\n   nearestIds: { sameValueIds: [], ids: [] },\n};\nexport default defaultState\n","const checkTargetValueIsLowest = (sortedData, targetId) =>\n   sortedData[0].id === targetId;\nconst checkTargetValueIsBiggest = (sortedData, targetId) =>\n   sortedData[sortedData.length - 1].id === targetId;\nconst getNearestIdsOfLowestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(1, cellsCount + 1).map((item) => item.id);\n};\nconst getNearestIdsOfBiggestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(-cellsCount - 1, -1).map((item) => item.id);\n};\nconst getNearestId = (sortedData, targetId) => {\n   const indexOfTargetId = sortedData.indexOf(\n      sortedData.find((item) => item.id === targetId)\n   );\n   const prevItem = sortedData[indexOfTargetId - 1];\n   const nextItem = sortedData[indexOfTargetId + 1];\n   const currentItem = sortedData[indexOfTargetId];\n   const prevDiff = Math.abs(currentItem.value - prevItem.value);\n   const nextDiff = Math.abs(nextItem.value - currentItem.value);\n   const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n   return nearestItem.id;\n};\nconst findNearestIds = (\n   sortedData,\n   targetId,\n   cellsCount,\n   ids = [],\n   step = 0\n) => {\n   if (step < cellsCount) {\n      if (checkTargetValueIsLowest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfLowestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else if (checkTargetValueIsBiggest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfBiggestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else {\n         const id = getNearestId(sortedData, targetId);\n         ids.push(id);\n         sortedData = sortedData.filter((item) => item.id !== id);\n         step++;\n         return findNearestIds(sortedData, targetId, cellsCount, ids, step);\n      }\n   }\n   return ids;\n};\nconst getIds = (sortedData, cellsCount, targetId) => {\n   const targetValue = sortedData.find((item) => item.id === targetId).value;\n   const sameValueIds = sortedData\n      .filter((item) => item.value === targetValue && item.id !== targetId)\n      .map((item) => item.id);\n   if (sameValueIds.length > 0) {\n      sortedData = sortedData.filter((item) => !sameValueIds.includes(item.id));\n   }\n   const nearestIds = findNearestIds(sortedData, targetId, cellsCount);\n   return { sameValueIds, ids: nearestIds };\n};\n\nexport default getIds;\n","import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n   RESET_SETTINGS,\n} from \"../../action_types\";\nimport {\n   createMatrix,\n   rebuildMatrix,\n   addRows,\n} from \"./buildingMatrix\";\nimport defaultState from \"./defaultState\";\nimport getIds from \"./findNearestIds\";\n\nconst initialState = defaultState;\nconst sortData = (data) => data.flat().sort((a, b) => a.value - b.value);\n\nconst checkMatrixData = (data, settings, newSettings) => {\n   if (data.length === 0) {\n      return createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n   } else if (\n      settings.rowsCount !== newSettings.rowsCount ||\n      settings.columnsCount !== newSettings.columnsCount\n   ) {\n      return rebuildMatrix(data, settings, newSettings);\n   } else {\n      return data;\n   }\n};\n\nconst matrixReducer = (state = initialState, action) => {\n   let data, sortedData, settings;\n   switch (action.type) {\n      case SET_SETTINGS:\n         data = checkMatrixData(\n            [...state.data],\n            state.settings,\n            action.settings\n         );\n         return {\n            ...state,\n            data,\n            sortedData: sortData(data),\n            settings: action.settings,\n         };\n      case RESET_SETTINGS:\n         return {\n            defaultState,\n         };\n      case ADD_ROW:\n         data = addRows([...state.data], 1, state.settings.columnsCount);\n         settings = { ...state.settings, rowsCount: data.length };\n         return {\n            ...state,\n            settings,\n            data,\n            sortedData: sortData(data),\n         };\n      case REMOVE_ROW:\n         data = state.data.filter((row, index) => index !== action.rowIndex);\n         settings = { ...state.settings, rowsCount: state.data.length };\n         return {\n            ...state,\n            settings,\n            data,\n            sortedData: sortData(data),\n         };\n      case INCREMENT_CELL:\n         data = [...state.data];\n         data.find((row) =>\n            row.find((item) => (item.id === action.id ? item.value++ : null))\n         );\n         sortedData = sortData(data);\n         return {\n            ...state,\n            data,\n            sortedData,\n            nearestIds: getIds(\n               sortedData,\n               state.settings.cellsCount,\n               action.id\n            ),\n         };\n      case SET_NEAREST_IDS:\n         if (state.settings.cellsCount) {\n            return {\n               ...state,\n               nearestIds: getIds(\n                  state.sortedData,\n                  state.settings.cellsCount,\n                  action.id\n               ),\n            };\n         } else {\n            return { ...state };\n         }\n\n      case RESET_NEAREST_IDS:\n         if (!!state.nearestIds.ids.length) {\n            return { ...state, nearestIds: { sameValueIds: [], ids: [] } };\n         } else {\n            return { ...state };\n         }\n      default:\n         return defaultState;\n   }\n};\n\nexport default matrixReducer;\n","import { combineReducers } from \"redux\";\nimport matrixReducer from \"./reducers/matrixReducer/\";\n\n//uses combine 'cause if in the future will be more reducers will need to combine their\nexport const rootReducer = combineReducers({ matrix: matrixReducer });\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { rootReducer } from \"./redux/rootReducer\";\nimport { createStore } from \"redux\";\n\nReactDOM.render(\n   <Provider store={createStore(rootReducer)}>\n      <App />\n   </Provider>,\n   document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}