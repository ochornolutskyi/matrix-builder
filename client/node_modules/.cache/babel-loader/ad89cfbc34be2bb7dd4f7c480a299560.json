{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/index.js\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport StaticCell from \"../TableRow/CellRenderer/StaticCell\";\n\nconst AverageRow = () => {\n  const data = useSelector(state => state.matrix.data);\n  const className = \"avarage-cell\";\n  const rowsValues = data.map(item => item.filter(data => data.value).map(row => row.value)); //current row values and next row values return the sum of values by equal index\n\n  const averageValues = rowsValues.reduce((currentRow, nextRow) => currentRow.map((value, index) => value + nextRow[index])).map(value => value / data.length);\n  const avgRowLabel = /*#__PURE__*/React.createElement(StaticCell, {\n    className: className,\n    key: \"avg\",\n    value: \"Avg\",\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  });\n  const avgRowCells = averageValues.map((value, index) => /*#__PURE__*/React.createElement(StaticCell, {\n    className: className,\n    key: index,\n    value: value.toFixed(2),\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }));\n  const cells = [avgRowLabel, ...avgRowCells];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, cells);\n};\n\nexport default AverageRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/index.js"],"names":["React","useSelector","cellRenderers","StaticCell","AverageRow","data","state","matrix","className","rowsValues","map","item","filter","value","row","averageValues","reduce","currentRow","nextRow","index","length","avgRowLabel","static","avgRowCells","toFixed","cells"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,UAAP,MAAuB,qCAAvB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACtB,QAAMC,IAAI,GAAGJ,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaF,IAAzB,CAAxB;AACA,QAAMG,SAAS,GAAG,cAAlB;AACA,QAAMC,UAAU,GAAGJ,IAAI,CAACK,GAAL,CAAUC,IAAD,IACzBA,IAAI,CAACC,MAAL,CAAaP,IAAD,IAAUA,IAAI,CAACQ,KAA3B,EAAkCH,GAAlC,CAAuCI,GAAD,IAASA,GAAG,CAACD,KAAnD,CADgB,CAAnB,CAHsB,CAMtB;;AACA,QAAME,aAAa,GAAGN,UAAU,CAC5BO,MADkB,CACX,CAACC,UAAD,EAAaC,OAAb,KACLD,UAAU,CAACP,GAAX,CAAe,CAACG,KAAD,EAAQM,KAAR,KAAkBN,KAAK,GAAGK,OAAO,CAACC,KAAD,CAAhD,CAFgB,EAIlBT,GAJkB,CAIbG,KAAD,IAAWA,KAAK,GAAGR,IAAI,CAACe,MAJV,CAAtB;AAMA,QAAMC,WAAW,gBACd,oBAAC,UAAD;AACG,IAAA,SAAS,EAAEb,SADd;AAEG,IAAA,GAAG,EAAC,KAFP;AAGG,IAAA,KAAK,EAAC,KAHT;AAIG,IAAA,QAAQ,EAAEN,aAAa,CAACoB,MAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AAQA,QAAMC,WAAW,GAAGR,aAAa,CAACL,GAAd,CAAkB,CAACG,KAAD,EAAQM,KAAR,kBACnC,oBAAC,UAAD;AACG,IAAA,SAAS,EAAEX,SADd;AAEG,IAAA,GAAG,EAAEW,KAFR;AAGG,IAAA,KAAK,EAAEN,KAAK,CAACW,OAAN,CAAc,CAAd,CAHV;AAIG,IAAA,QAAQ,EAAEtB,aAAa,CAACoB,MAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiB,CAApB;AAQA,QAAMG,KAAK,GAAG,CAACJ,WAAD,EAAc,GAAGE,WAAjB,CAAd;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,KAAL,CAAP;AACF,CAhCD;;AAkCA,eAAerB,UAAf","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport StaticCell from \"../TableRow/CellRenderer/StaticCell\";\n\nconst AverageRow = () => {\n   const data = useSelector((state) => state.matrix.data);\n   const className = \"avarage-cell\";\n   const rowsValues = data.map((item) =>\n      item.filter((data) => data.value).map((row) => row.value)\n   );\n   //current row values and next row values return the sum of values by equal index\n   const averageValues = rowsValues\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length);\n\n   const avgRowLabel = (\n      <StaticCell\n         className={className}\n         key=\"avg\"\n         value=\"Avg\"\n         Renderer={cellRenderers.static}\n      />\n   );\n   const avgRowCells = averageValues.map((value, index) => (\n      <StaticCell\n         className={className}\n         key={index}\n         value={value.toFixed(2)}\n         Renderer={cellRenderers.static}\n      />\n   ));\n   const cells = [avgRowLabel, ...avgRowCells];\n\n   return <tr>{cells}</tr>;\n};\n\nexport default AverageRow;\n"]},"metadata":{},"sourceType":"module"}