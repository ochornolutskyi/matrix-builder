{"ast":null,"code":"var checkTargetValueIsLowest=function checkTargetValueIsLowest(sortedData,targetId){return sortedData[0].id===targetId;};var checkTargetValueIsBiggest=function checkTargetValueIsBiggest(sortedData,targetId){return sortedData[sortedData.length-1].id===targetId;};var getNearestIdsOfLowestValue=function getNearestIdsOfLowestValue(sortedData,cellsCount){return sortedData.slice(1,cellsCount+1).map(function(item){return item.id;});};var getNearestIdsOfBiggestValue=function getNearestIdsOfBiggestValue(sortedData,cellsCount){return sortedData.slice(-cellsCount-1,-1).map(function(item){return item.id;});};var getNearestId=function getNearestId(sortedData,targetId){var indexOfTargetId=sortedData.indexOf(sortedData.find(function(item){return item.id===targetId;}));var prevItem=sortedData[indexOfTargetId-1];var nextItem=sortedData[indexOfTargetId+1];var currentItem=sortedData[indexOfTargetId];var prevDiff=Math.abs(currentItem.value-prevItem.value);var nextDiff=Math.abs(nextItem.value-currentItem.value);var nearestItem=prevDiff<nextDiff?prevItem:nextItem;return nearestItem.id;};var findNearestIds=function findNearestIds(sortedData,targetId,cellsCount){var ids=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var step=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;if(step<cellsCount){if(checkTargetValueIsLowest(sortedData,targetId)){ids.push(getNearestIdsOfLowestValue(sortedData,cellsCount-step));return ids.flat();}else if(checkTargetValueIsBiggest(sortedData,targetId)){ids.push(getNearestIdsOfBiggestValue(sortedData,cellsCount-step));return ids.flat();}else{var id=getNearestId(sortedData,targetId);ids.push(id);sortedData=sortedData.filter(function(item){return item.id!==id;});step++;return findNearestIds(sortedData,targetId,cellsCount,ids,step);}}return ids;};var getIds=function getIds(sortedData,cellsCount,targetId){var targetValue=sortedData.find(function(item){return item.id===targetId;}).value;var sameValueIds=sortedData.filter(function(item){return item.value===targetValue&&item.id!==targetId;}).map(function(item){return item.id;});if(sameValueIds.length>0){sortedData=sortedData.filter(function(item){return!sameValueIds.includes(item.id);});}var nearestIds=findNearestIds(sortedData,targetId,cellsCount);return{sameValueIds:sameValueIds,ids:nearestIds};};export default getIds;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer/findNearestIds.js"],"names":["checkTargetValueIsLowest","sortedData","targetId","id","checkTargetValueIsBiggest","length","getNearestIdsOfLowestValue","cellsCount","slice","map","item","getNearestIdsOfBiggestValue","getNearestId","indexOfTargetId","indexOf","find","prevItem","nextItem","currentItem","prevDiff","Math","abs","value","nextDiff","nearestItem","findNearestIds","ids","step","push","flat","filter","getIds","targetValue","sameValueIds","includes","nearestIds"],"mappings":"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","sourcesContent":["const checkTargetValueIsLowest = (sortedData, targetId) =>\n   sortedData[0].id === targetId;\nconst checkTargetValueIsBiggest = (sortedData, targetId) =>\n   sortedData[sortedData.length - 1].id === targetId;\nconst getNearestIdsOfLowestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(1, cellsCount + 1).map((item) => item.id);\n};\nconst getNearestIdsOfBiggestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(-cellsCount - 1, -1).map((item) => item.id);\n};\nconst getNearestId = (sortedData, targetId) => {\n   const indexOfTargetId = sortedData.indexOf(\n      sortedData.find((item) => item.id === targetId)\n   );\n   const prevItem = sortedData[indexOfTargetId - 1];\n   const nextItem = sortedData[indexOfTargetId + 1];\n   const currentItem = sortedData[indexOfTargetId];\n   const prevDiff = Math.abs(currentItem.value - prevItem.value);\n   const nextDiff = Math.abs(nextItem.value - currentItem.value);\n   const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n   return nearestItem.id;\n};\nconst findNearestIds = (\n   sortedData,\n   targetId,\n   cellsCount,\n   ids = [],\n   step = 0\n) => {\n   if (step < cellsCount) {\n      if (checkTargetValueIsLowest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfLowestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else if (checkTargetValueIsBiggest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfBiggestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else {\n         const id = getNearestId(sortedData, targetId);\n         ids.push(id);\n         sortedData = sortedData.filter((item) => item.id !== id);\n         step++;\n         return findNearestIds(sortedData, targetId, cellsCount, ids, step);\n      }\n   }\n   return ids;\n};\nconst getIds = (sortedData, cellsCount, targetId) => {\n   const targetValue = sortedData.find((item) => item.id === targetId).value;\n   const sameValueIds = sortedData\n      .filter((item) => item.value === targetValue && item.id !== targetId)\n      .map((item) => item.id);\n   if (sameValueIds.length > 0) {\n      sortedData = sortedData.filter((item) => !sameValueIds.includes(item.id));\n   }\n   const nearestIds = findNearestIds(sortedData, targetId, cellsCount);\n   return { sameValueIds, ids: nearestIds };\n};\n\nexport default getIds;\n"]},"metadata":{},"sourceType":"module"}