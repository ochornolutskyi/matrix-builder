{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\nconst inputClassName = \"input-settings\";\nconst ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows count\";\nconst COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns count\";\nconst ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows and columns count\";\n\nconst checkSettings = (rowsCount, columnsCount) => {\n  if ((rowsCount === 0 || rowsCount < 0) && (columnsCount === 0 || columnsCount < 0)) {\n    return ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE;\n  } else if (rowsCount === 0 || rowsCount < 0) {\n    return ROWS_COUNT_ERROR_MESSAGE;\n  } else if (columnsCount === 0 || columnsCount < 0) {\n    return COLUMNS_COUNT_ERROR_MESSAGE;\n  }\n};\n\nconst SettingsTable = () => {\n  const settings = useSelector(state => state.matrix.settings);\n  const dispatch = useDispatch();\n  const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n  const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n  const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n  const [isError, setIsError] = useState(false);\n\n  const showErrorMessage = message => {\n    setIsError(true);\n    setTimeout(() => {\n      setIsError(false);\n    }, 2000);\n    return message;\n  };\n\n  const applySettingsHandler = () => {\n    const error = checkSettings(rowsCount, columnsCount);\n\n    if (error) {\n      showErrorMessage(error);\n    } else {\n      dispatch(setSettings({\n        rowsCount,\n        columnsCount,\n        cellsCount\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the rows count\",\n    value: rowsCount,\n    onChangeInput: setRowsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the columns count\",\n    value: columnsCount,\n    onChangeInput: setColumnsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the count of cells to show the nearest value\",\n    value: cellsCount,\n    onChangeInput: setCellsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"red-button\",\n    buttonText: \"Apply settings\",\n    buttonClickHandler: applySettingsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 10\n    }\n  }), isError ? /*#__PURE__*/React.createElement(ErrorHint, {\n    errorText: errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }) : null);\n};\n\nexport default SettingsTable;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js"],"names":["React","useState","useDispatch","useSelector","setSettings","Button","ErrorHint","Input","inputClassName","ROWS_COUNT_ERROR_MESSAGE","COLUMNS_COUNT_ERROR_MESSAGE","ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE","checkSettings","rowsCount","columnsCount","SettingsTable","settings","state","matrix","dispatch","setRowsCount","setColumnsCount","cellsCount","setCellsCount","isError","setIsError","showErrorMessage","message","setTimeout","applySettingsHandler","error","errorText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\n\nconst inputClassName = \"input-settings\";\nconst ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows count\";\nconst COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns count\";\nconst ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows and columns count\";\nconst checkSettings = (rowsCount, columnsCount) => {\n   if (\n      (rowsCount === 0 || rowsCount < 0) &&\n      (columnsCount === 0 || columnsCount < 0)\n   ) {\n      return ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE;\n   } else if (rowsCount === 0 || rowsCount < 0) {\n      return ROWS_COUNT_ERROR_MESSAGE;\n   } else if (columnsCount === 0 || columnsCount < 0) {\n      return COLUMNS_COUNT_ERROR_MESSAGE;\n   }\n};\n\nconst SettingsTable = () => {\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [isError, setIsError] = useState(false);\n\n   const showErrorMessage = (message) => {\n      setIsError(true);\n      setTimeout(() => {\n         setIsError(false);\n      }, 2000);\n      return message;\n   };\n\n   const applySettingsHandler = () => {\n      const error = checkSettings(rowsCount, columnsCount);\n      if (error) {\n         showErrorMessage(error);\n      } else {\n         dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n      }\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <Input\n            className={inputClassName}\n            label=\"Set the rows count\"\n            value={rowsCount}\n            onChangeInput={setRowsCount}\n         />\n         <Input\n            className={inputClassName}\n            label=\"Set the columns count\"\n            value={columnsCount}\n            onChangeInput={setColumnsCount}\n         />\n         <Input\n            className={inputClassName}\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            onChangeInput={setCellsCount}\n         />\n         <Button\n            className=\"red-button\"\n            buttonText=\"Apply settings\"\n            buttonClickHandler={applySettingsHandler}\n         />\n\n         {isError ? <ErrorHint errorText={errorText} /> : null}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n"]},"metadata":{},"sourceType":"module"}