{"ast":null,"code":"const addCells = (columnsCount, row = [], step = 0) => {\n  while (step < columnsCount) {\n    row.push({\n      id: `${Date.now()}${Math.round(1 + Math.random() * 9999)}${step}`,\n      value: Math.round(100 + Math.random() * 899)\n    });\n    step++;\n  }\n\n  return row;\n};\n\nconst addRows = (data, rowsCount, columnsCount, step = 0) => {\n  while (step < rowsCount) {\n    const rowCells = addCells(columnsCount);\n    data.push(rowCells);\n    step++;\n  }\n\n  return data;\n};\n\nexport const createMatrix = (rowsCount, columnsCount, data = []) => {\n  return addRows(data, rowsCount, columnsCount);\n};\nexport const rebuildMatrix = (data, prevSettings, newSettings) => {\n  const rebuildColumns = () => {\n    let columnsCountDiff = 0;\n\n    if (prevSettings.columnsCount < newSettings.columnsCount) {\n      columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n      data.forEach((row, index) => addCells(columnsCountDiff, row));\n    } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n      columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n      data.forEach(row => row.splice(-columnsCountDiff));\n    }\n\n    return data;\n  };\n\n  const rebuildRows = () => {\n    let rowsCountDiff = 0;\n\n    if (prevSettings.rowsCount < newSettings.rowsCount) {\n      rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n      addRows(data, rowsCountDiff, newSettings.columnsCount);\n    } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n      rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n      data.splice(-rowsCountDiff);\n    }\n\n    return data;\n  };\n\n  rebuildColumns(data, prevSettings, newSettings);\n  rebuildRows(data, prevSettings, newSettings);\n  return data;\n};","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/building.js"],"names":["addCells","columnsCount","row","step","push","id","Date","now","Math","round","random","value","addRows","data","rowsCount","rowCells","createMatrix","rebuildMatrix","prevSettings","newSettings","rebuildColumns","columnsCountDiff","forEach","index","splice","rebuildRows","rowsCountDiff"],"mappings":"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","sourcesContent":["const addCells = (columnsCount, row = [], step = 0) => {\n   while (step < columnsCount) {\n      row.push({\n         id: `${Date.now()}${Math.round(1 + Math.random() * 9999)}${step}`,\n         value: Math.round(100 + Math.random() * 899),\n      });\n      step++;\n   }\n   return row;\n};\nconst addRows = (data, rowsCount, columnsCount, step = 0) => {\n   while (step < rowsCount) {\n      const rowCells = addCells(columnsCount);\n      data.push(rowCells);\n      step++;\n   }\n   return data;\n};\nexport const createMatrix = (rowsCount, columnsCount, data = []) => {\n   return addRows(data, rowsCount, columnsCount);\n};\nexport const rebuildMatrix = (data, prevSettings, newSettings) => {\n   const rebuildColumns = () => {\n      let columnsCountDiff = 0;\n      if (prevSettings.columnsCount < newSettings.columnsCount) {\n         columnsCountDiff =\n            newSettings.columnsCount - prevSettings.columnsCount;\n         data.forEach((row, index) => addCells(columnsCountDiff, row));\n      } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n         columnsCountDiff =\n            prevSettings.columnsCount - newSettings.columnsCount;\n         data.forEach((row) => row.splice(-columnsCountDiff));\n      }\n      return data;\n   };\n   const rebuildRows = () => {\n      let rowsCountDiff = 0;\n      if (prevSettings.rowsCount < newSettings.rowsCount) {\n         rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n         addRows(data, rowsCountDiff, newSettings.columnsCount);\n      } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n         rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n         data.splice(-rowsCountDiff);\n      }\n      return data;\n   };\n   rebuildColumns(data, prevSettings, newSettings);\n   rebuildRows(data, prevSettings, newSettings);\n   return data;\n};\n"]},"metadata":{},"sourceType":"module"}