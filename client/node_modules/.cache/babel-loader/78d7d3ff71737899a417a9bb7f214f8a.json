{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport IncrementCell from \"./CellRenderer/IncrementCell\";\nimport PercentageCell from \"./CellRenderer/PercentageCell\";\nimport StaticCell from \"./CellRenderer/StaticCell\";\nimport SumCell from \"./CellRenderer/SumCell\";\n\nconst TableRow = ({\n  rowNumber,\n  data\n}) => {\n  const dispatch = useDispatch();\n  const [sumIsHover, setSumIsHover] = useState(false);\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const rowLabel = /*#__PURE__*/React.createElement(StaticCell, {\n    key: rowNumber,\n    value: rowNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }\n  });\n\n  const rowRenderer = cellData => {\n    return sumIsHover ? /*#__PURE__*/React.createElement(PercentageCell, {\n      key: cellData.id,\n      value: cellData.value,\n      sumRow: sumRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 10\n      }\n    }) : /*#__PURE__*/React.createElement(IncrementCell, {\n      key: cellData.id,\n      id: cellData.id,\n      value: cellData.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 10\n      }\n    });\n  };\n\n  const rowCells = () => {\n    return data.map(cellData => rowRenderer(cellData));\n  };\n\n  const sumRowCell = /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SumCell, {\n    key: sumRow,\n    value: sumRow,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(CrossButton, {\n    key: `${sumRow}crossButton`,\n    buttonClickHandler: () => dispatch(removeRow(rowNumber)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }));\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, cells);\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","removeRow","CrossButton","IncrementCell","PercentageCell","StaticCell","SumCell","TableRow","rowNumber","data","dispatch","sumIsHover","setSumIsHover","sumRow","map","value","reduce","sum","rowLabel","rowRenderer","cellData","id","rowCells","sumRowCell","cells"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AACvC,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMc,MAAM,GAAGJ,IAAI,CACfK,GADW,CACNL,IAAD,IAAUA,IAAI,CAACM,KADR,EAEXC,MAFW,CAEJ,CAACC,GAAG,GAAG,CAAP,EAAUF,KAAV,KAAoBE,GAAG,GAAGF,KAFtB,CAAf;AAIA,QAAMG,QAAQ,gBAAG,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEV,SAAjB;AAA4B,IAAA,KAAK,EAAEA,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjB;;AACA,QAAMW,WAAW,GAAIC,QAAD,IAAc;AAC/B,WAAOT,UAAU,gBACd,oBAAC,cAAD;AACG,MAAA,GAAG,EAAES,QAAQ,CAACC,EADjB;AAEG,MAAA,KAAK,EAAED,QAAQ,CAACL,KAFnB;AAGG,MAAA,MAAM,EAAEF,MAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADc,gBAOd,oBAAC,aAAD;AACG,MAAA,GAAG,EAAEO,QAAQ,CAACC,EADjB;AAEG,MAAA,EAAE,EAAED,QAAQ,CAACC,EAFhB;AAGG,MAAA,KAAK,EAAED,QAAQ,CAACL,KAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPH;AAaF,GAdD;;AAeA,QAAMO,QAAQ,GAAG,MAAM;AACpB,WAAOb,IAAI,CAACK,GAAL,CAAUM,QAAD,IAAcD,WAAW,CAACC,QAAD,CAAlC,CAAP;AACF,GAFD;;AAIA,QAAMG,UAAU,gBACb,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,OAAD;AACG,IAAA,GAAG,EAAEV,MADR;AAEG,IAAA,KAAK,EAAEA,MAFV;AAGG,IAAA,oBAAoB,EAAE,MAAMD,aAAa,CAAC,IAAD,CAH5C;AAIG,IAAA,oBAAoB,EAAE,MAAMA,aAAa,CAAC,KAAD,CAJ5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAQI,oBAAC,WAAD;AACC,IAAA,GAAG,EAAG,GAAEC,MAAO,aADhB;AAEK,IAAA,kBAAkB,EAAE,MAAMH,QAAQ,CAACT,SAAS,CAACO,SAAD,CAAV,CAFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADH;AAeA,QAAMgB,KAAK,GAAG,CAACN,QAAD,EAAW,GAAGI,QAAQ,EAAtB,EAA0BC,UAA1B,CAAd;AAEA,sBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,KADJ,CADH;AAQF,CApDD;;AAsDA,eAAejB,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport IncrementCell from \"./CellRenderer/IncrementCell\";\nimport PercentageCell from \"./CellRenderer/PercentageCell\";\nimport StaticCell from \"./CellRenderer/StaticCell\";\nimport SumCell from \"./CellRenderer/SumCell\";\n\nconst TableRow = ({ rowNumber, data }) => {\n   const dispatch = useDispatch();\n   const [sumIsHover, setSumIsHover] = useState(false);\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n\n   const rowLabel = <StaticCell key={rowNumber} value={rowNumber} />;\n   const rowRenderer = (cellData) => {\n      return sumIsHover ? (\n         <PercentageCell\n            key={cellData.id}\n            value={cellData.value}\n            sumRow={sumRow}\n         />\n      ) : (\n         <IncrementCell\n            key={cellData.id}\n            id={cellData.id}\n            value={cellData.value}\n         />\n      );\n   };\n   const rowCells = () => {\n      return data.map((cellData) => rowRenderer(cellData));\n   };\n\n   const sumRowCell = (\n      <React.Fragment>\n         <SumCell\n            key={sumRow}\n            value={sumRow}\n            sumMouseEnterHandler={() => setSumIsHover(true)}\n            sumMouseLeaveHandler={() => setSumIsHover(false)}\n            \n         />\n          <CrossButton\n           key={`${sumRow}crossButton`}\n               buttonClickHandler={() => dispatch(removeRow(rowNumber))}\n            />\n      </React.Fragment>\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n\n   return (\n      <tr>\n         {cells}\n         {/* <td>\n           \n          </td>*/}\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}