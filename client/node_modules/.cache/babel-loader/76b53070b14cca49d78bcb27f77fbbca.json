{"ast":null,"code":"import { INCREMENT_CELL, CREATE_MATRIX, REMOVE_ROW, ADD_ROW } from \"../types\";\nconst initialState = {\n  data: []\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  let settings, data;\n\n  switch (action.type) {\n    case CREATE_MATRIX:\n      data = [...state.data];\n      settings = { ...state.settings\n      };\n\n      for (let i = 0; i < settings.rows; i++) {\n        data.push([]);\n      }\n\n      data.forEach((item, index) => {\n        for (let i = 0; i < settings.columns; i++) {\n          const cellObject = {\n            id: String(index + 1).concat(i + 1),\n            value: Math.round(100 + Math.random() * 899)\n          };\n          item.push(cellObject);\n        }\n      });\n      return { ...state,\n        data\n      };\n\n    case INCREMENT_CELL:\n      data = [...state.data];\n      data.find(row => row.find(item => item.id === action.id)).filter(item => item.id === action.id)[0].value++;\n      return { ...state,\n        data\n      };\n\n    case REMOVE_ROW:\n      data = [...state.data];\n      data.splice(action.index, 1);\n      return { ...state,\n        data\n      };\n\n    case ADD_ROW:\n      data = [...state.data];\n      settings = { ...state.settings\n      };\n      let newRow = [];\n\n      for (let i = 0; i < settings.columns; i++) {\n        const cellObject = {\n          id: String(data.length + 1).concat(i + 1),\n          value: Math.round(100 + Math.random() * 899)\n        };\n        newRow.push(cellObject);\n      }\n\n      data.push(newRow);\n      return { ...state,\n        data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","CREATE_MATRIX","REMOVE_ROW","ADD_ROW","initialState","data","matrixReducer","state","action","settings","type","i","rows","push","forEach","item","index","columns","cellObject","id","String","concat","value","Math","round","random","find","row","filter","splice","newRow","length"],"mappings":"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","sourcesContent":["import { INCREMENT_CELL, CREATE_MATRIX, REMOVE_ROW, ADD_ROW } from \"../types\";\n\nconst initialState = { data: [] };\n\nconst matrixReducer = (state = initialState, action) => {\n   let settings, data;\n   switch (action.type) {\n      case CREATE_MATRIX:\n         data = [...state.data];\n         settings = { ...state.settings };\n         for (let i = 0; i < settings.rows; i++) {\n            data.push([]);\n         }\n         data.forEach((item, index) => {\n            for (let i = 0; i < settings.columns; i++) {\n               const cellObject = {\n                  id: String(index + 1).concat(i + 1),\n                  value: Math.round(100 + Math.random() * 899),\n               };\n               item.push(cellObject);\n            }\n         });\n         return { ...state, data };\n      case INCREMENT_CELL:\n         data = [...state.data];\n         data\n            .find((row) => row.find((item) => item.id === action.id))\n            .filter((item) => item.id === action.id)[0].value++;\n         return { ...state, data };\n      case REMOVE_ROW:\n         data = [...state.data];\n         data.splice(action.index, 1);\n         return { ...state, data };\n      case ADD_ROW:\n         data = [...state.data];\n         settings = { ...state.settings };\n         let newRow = [];\n         for (let i = 0; i < settings.columns; i++) {\n            const cellObject = {\n               id: String(data.length + 1).concat(i + 1),\n               value: Math.round(100 + Math.random() * 899),\n            };\n            newRow.push(cellObject);\n         }\n         data.push(newRow);\n         return { ...state, data };\n      default:\n         return state;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}