{"ast":null,"code":"const calculateAverageValues = matrixData => {\n  const matrixValuesOnly = matrixData.map(item => item.map(row => row.value));\n  let averageValues = [];\n\n  for (let i = 0; i < matrixValuesOnly.length - 1; i++) {\n    let columnSum = 0;\n\n    for (let j = 0; j < matrixValuesOnly[i].length; j++) {\n      columnSum += matrixValuesOnly[i][j] + matrixValuesOnly[i + 1][j];\n      console.log(i, j);\n      console.log(matrixValuesOnly[i + 1][j], columnSum);\n    }\n\n    const average = columnSum / matrixData.length;\n    averageValues.push(average);\n  }\n\n  console.log(averageValues);\n  return averageValues;\n};\n\nexport default calculateAverageValues;\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/calculateAverageValues.js"],"names":["calculateAverageValues","matrixData","matrixValuesOnly","map","item","row","value","averageValues","i","length","columnSum","j","console","log","average","push"],"mappings":"AAAA,MAAMA,sBAAsB,GAAIC,UAAD,IAAgB;AAC5C,QAAMC,gBAAgB,GAAGD,UAAU,CAACE,GAAX,CAAgBC,IAAD,IACrCA,IAAI,CAACD,GAAL,CAAUE,GAAD,IAASA,GAAG,CAACC,KAAtB,CADsB,CAAzB;AAGA,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,gBAAgB,CAACO,MAAjB,GAAwB,CAA5C,EAA+CD,CAAC,EAAhD,EAAoD;AACjD,QAAIE,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,gBAAgB,CAACM,CAAD,CAAhB,CAAoBC,MAAxC,EAAgDE,CAAC,EAAjD,EAAqD;AAClDD,MAAAA,SAAS,IAAGR,gBAAgB,CAACM,CAAD,CAAhB,CAAoBG,CAApB,IAAuBT,gBAAgB,CAACM,CAAC,GAAC,CAAH,CAAhB,CAAsBG,CAAtB,CAAnC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,CAAZ,EAAcG,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYX,gBAAgB,CAACM,CAAC,GAAC,CAAH,CAAhB,CAAsBG,CAAtB,CAAZ,EAAuCD,SAAvC;AACF;;AACD,UAAMI,OAAO,GAAGJ,SAAS,GAAGT,UAAU,CAACQ,MAAvC;AACAF,IAAAA,aAAa,CAACQ,IAAd,CAAmBD,OAAnB;AACF;;AACDF,EAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;AACA,SAAOA,aAAP;AACF,CAjBD;;AAkBA,eAAeP,sBAAf;AAEA","sourcesContent":["const calculateAverageValues = (matrixData) => {\n   const matrixValuesOnly = matrixData.map((item) =>\n      item.map((row) => row.value)\n   );\n   let averageValues = [];\n   for (let i = 0; i < matrixValuesOnly.length-1; i++) {\n      let columnSum = 0;\n      for (let j = 0; j < matrixValuesOnly[i].length; j++) {\n         columnSum +=matrixValuesOnly[i][j]+matrixValuesOnly[i+1][j]\n         console.log(i,j)\n         console.log(matrixValuesOnly[i+1][j] , columnSum)\n      }\n      const average = columnSum / matrixData.length;\n      averageValues.push(average);\n   }\n   console.log(averageValues)\n   return averageValues;\n};\nexport default calculateAverageValues;\n\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */\n"]},"metadata":{},"sourceType":"module"}