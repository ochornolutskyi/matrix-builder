{"ast":null,"code":"import { CREATE_MATRIX, SET_MATRIX_COLUMNS, SET_MATRIX_ROWS } from \"../types\";\nconst initialState = {\n  settings: {\n    rows: 0,\n    columns: 0,\n    cells: 0\n  },\n  data: []\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  let settings;\n\n  switch (action.type) {\n    case SET_MATRIX_ROWS:\n      settings = { ...state.settings\n      };\n      settings.rows = action.payload;\n      return { ...state,\n        settings\n      };\n\n    case SET_MATRIX_COLUMNS:\n      settings = { ...state.settings\n      };\n      settings.columns = action.payload;\n      return { ...state,\n        settings\n      };\n\n    case CREATE_MATRIX:\n      let data = [...state.data];\n      settings = { ...state.settings\n      };\n\n      for (let i = 0; i < settings.rows; i++) {\n        data.push([{\n          rowNumber: i + 1\n        }]);\n      }\n\n      data.forEach((item, index) => {\n        for (let i = 0; i < settings.columns; i++) {\n          const cellObject = {\n            id: String(index + 1).concat(i + 1),\n            value: Math.round(100 + Math.random() * 899)\n          };\n          item.push(cellObject);\n        }\n      });\n      console.log(data);\n      return { ...state,\n        data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["CREATE_MATRIX","SET_MATRIX_COLUMNS","SET_MATRIX_ROWS","initialState","settings","rows","columns","cells","data","matrixReducer","state","action","type","payload","i","push","rowNumber","forEach","item","index","cellObject","id","String","concat","value","Math","round","random","console","log"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,kBAAxB,EAA4CC,eAA5C,QAAmE,UAAnE;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,OAAO,EAAE,CAApB;AAAuBC,IAAAA,KAAK,EAAE;AAA9B,GAAZ;AAA+CC,EAAAA,IAAI,EAAE;AAArD,CAArB;;AAEA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACrD,MAAIP,QAAJ;;AACA,UAAQO,MAAM,CAACC,IAAf;AACG,SAAKV,eAAL;AACGE,MAAAA,QAAQ,GAAG,EAAE,GAAGM,KAAK,CAACN;AAAX,OAAX;AACAA,MAAAA,QAAQ,CAACC,IAAT,GAAgBM,MAAM,CAACE,OAAvB;AACA,aAAO,EAAE,GAAGH,KAAL;AAAYN,QAAAA;AAAZ,OAAP;;AACH,SAAKH,kBAAL;AACGG,MAAAA,QAAQ,GAAG,EAAE,GAAGM,KAAK,CAACN;AAAX,OAAX;AACAA,MAAAA,QAAQ,CAACE,OAAT,GAAmBK,MAAM,CAACE,OAA1B;AACA,aAAO,EAAE,GAAGH,KAAL;AAAYN,QAAAA;AAAZ,OAAP;;AAEH,SAAKJ,aAAL;AACG,UAAIQ,IAAI,GAAG,CAAC,GAAGE,KAAK,CAACF,IAAV,CAAX;AACAJ,MAAAA,QAAQ,GAAG,EAAE,GAAGM,KAAK,CAACN;AAAX,OAAX;;AACA,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAAQ,CAACC,IAA7B,EAAmCS,CAAC,EAApC,EAAwC;AACrCN,QAAAA,IAAI,CAACO,IAAL,CAAU,CAAC;AAACC,UAAAA,SAAS,EAAEF,CAAC,GAAC;AAAd,SAAD,CAAV;AACF;;AACDN,MAAAA,IAAI,CAACS,OAAL,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3B,aAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAAQ,CAACE,OAA7B,EAAsCQ,CAAC,EAAvC,EAA2C;AACxC,gBAAMM,UAAU,GAAG;AAChBC,YAAAA,EAAE,EAAEC,MAAM,CAACH,KAAK,GAAG,CAAT,CAAN,CAAkBI,MAAlB,CAAyBT,CAAC,GAAG,CAA7B,CADY;AAEhBU,YAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAW,MAAMD,IAAI,CAACE,MAAL,KAAgB,GAAjC;AAFS,WAAnB;AAIAT,UAAAA,IAAI,CAACH,IAAL,CAAUK,UAAV;AACF;AACH,OARD;AASAQ,MAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ;AACA,aAAO,EAAE,GAAGE,KAAL;AAAYF,QAAAA;AAAZ,OAAP;;AAEH;AACG,aAAOE,KAAP;AA7BN;AA+BF,CAjCD;;AAmCA,eAAeD,aAAf","sourcesContent":["import { CREATE_MATRIX, SET_MATRIX_COLUMNS, SET_MATRIX_ROWS } from \"../types\";\n\nconst initialState = { settings: { rows: 0, columns: 0, cells: 0 }, data: [] };\n\nconst matrixReducer = (state = initialState, action) => {\n   let settings;\n   switch (action.type) {\n      case SET_MATRIX_ROWS:\n         settings = { ...state.settings };\n         settings.rows = action.payload;\n         return { ...state, settings };\n      case SET_MATRIX_COLUMNS:\n         settings = { ...state.settings };\n         settings.columns = action.payload;\n         return { ...state, settings };\n\n      case CREATE_MATRIX:\n         let data = [...state.data];\n         settings = { ...state.settings };\n         for (let i = 0; i < settings.rows; i++) {\n            data.push([{rowNumber: i+1}]);\n         }\n         data.forEach((item, index) => {\n            for (let i = 0; i < settings.columns; i++) {\n               const cellObject = {\n                  id: String(index + 1).concat(i + 1),\n                  value: Math.round(100 + Math.random() * 899),\n               };\n               item.push(cellObject);\n            }\n         });\n         console.log(data)\n         return { ...state, data };\n\n      default:\n         return state;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}