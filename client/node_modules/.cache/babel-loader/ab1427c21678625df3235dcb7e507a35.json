{"ast":null,"code":"import { INCREMENT_CELL, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS, SET_SETTINGS, RESET_SETTINGS } from \"../../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./buildingMatrix\";\nimport defaultState from \"./defaultState\";\nimport getIds from \"./findNearestIds\";\nconst initialState = defaultState;\n\nconst sortData = data => data.flat().sort((a, b) => a.value - b.value);\n\nconst checkMatrixData = (data, settings, newSettings) => {\n  if (data.length === 0) {\n    return createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n  } else if (settings.rowsCount !== newSettings.rowsCount || settings.columnsCount !== newSettings.columnsCount) {\n    return rebuildMatrix(data, settings, newSettings);\n  } else {\n    return data;\n  }\n};\n\nconst checkToFindNearest = (data, cellsCount, id) => !!cellsCount && getIds(data, cellsCount, id);\n\nconst matrixReducer = (state = initialState, action) => {\n  let data, sortedData, settings;\n\n  switch (action.type) {\n    case SET_SETTINGS:\n      data = checkMatrixData([...state.data], state.settings, action.settings);\n      return { ...state,\n        data,\n        sortedData: sortData(data),\n        settings: action.settings\n      };\n\n    case RESET_SETTINGS:\n      return {\n        defaultState\n      };\n\n    case ADD_ROW:\n      data = addRows([...state.data], 1, state.settings.columnsCount);\n      settings = { ...state.settings,\n        rowsCount: data.length\n      };\n      return { ...state,\n        settings,\n        data,\n        sortedData: sortData(data)\n      };\n\n    case REMOVE_ROW:\n      data = state.data.filter((row, index) => index !== action.rowIndex);\n      settings = { ...state.settings,\n        rowsCount: state.data.length\n      };\n      return { ...state,\n        settings,\n        data,\n        sortedData: sortData(data)\n      };\n\n    case INCREMENT_CELL:\n      data = [...state.data];\n      const incrementValue = data.flat().find(item => item.id === action.id).value;\n      incrementValue < 999 && data.find(row => row.find(item => item.id === action.id ? item.value++ : null));\n      sortedData = sortData(data);\n      const nearest = !!state.settings.cellsCount ? getIds(sortedData, state.settings.cellsCount, action.id) : defaultState.nearestIds;\n      return { ...state,\n        data,\n        sortedData,\n        nearestIds: nearest\n      };\n\n    case SET_NEAREST_IDS:\n      if (state.settings.cellsCount > 0) {\n        return { ...state,\n          nearestIds: getIds(state.sortedData, state.settings.cellsCount, action.id)\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case RESET_NEAREST_IDS:\n      if (!!state.nearestIds.ids.length) {\n        return { ...state,\n          nearestIds: defaultState.nearestIds\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    default:\n      return defaultState;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer/index.js"],"names":["INCREMENT_CELL","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","SET_SETTINGS","RESET_SETTINGS","createMatrix","rebuildMatrix","addRows","defaultState","getIds","initialState","sortData","data","flat","sort","a","b","value","checkMatrixData","settings","newSettings","length","rowsCount","columnsCount","checkToFindNearest","cellsCount","id","matrixReducer","state","action","sortedData","type","filter","row","index","rowIndex","incrementValue","find","item","nearest","nearestIds","ids"],"mappings":"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","sourcesContent":["import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n   RESET_SETTINGS,\n} from \"../../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./buildingMatrix\";\nimport defaultState from \"./defaultState\";\nimport getIds from \"./findNearestIds\";\n\nconst initialState = defaultState;\nconst sortData = (data) => data.flat().sort((a, b) => a.value - b.value);\n\nconst checkMatrixData = (data, settings, newSettings) => {\n   if (data.length === 0) {\n      return createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n   } else if (\n      settings.rowsCount !== newSettings.rowsCount ||\n      settings.columnsCount !== newSettings.columnsCount\n   ) {\n      return rebuildMatrix(data, settings, newSettings);\n   } else {\n      return data;\n   }\n};\nconst checkToFindNearest = (data, cellsCount, id) =>\n   !!cellsCount && getIds(data, cellsCount, id);\n\nconst matrixReducer = (state = initialState, action) => {\n   let data, sortedData, settings;\n   switch (action.type) {\n      case SET_SETTINGS:\n         data = checkMatrixData(\n            [...state.data],\n            state.settings,\n            action.settings\n         );\n         return {\n            ...state,\n            data,\n            sortedData: sortData(data),\n            settings: action.settings,\n         };\n      case RESET_SETTINGS:\n         return {\n            defaultState,\n         };\n      case ADD_ROW:\n         data = addRows([...state.data], 1, state.settings.columnsCount);\n         settings = { ...state.settings, rowsCount: data.length };\n         return {\n            ...state,\n            settings,\n            data,\n            sortedData: sortData(data),\n         };\n      case REMOVE_ROW:\n         data = state.data.filter((row, index) => index !== action.rowIndex);\n         settings = { ...state.settings, rowsCount: state.data.length };\n         return {\n            ...state,\n            settings,\n            data,\n            sortedData: sortData(data),\n         };\n      case INCREMENT_CELL:\n         data = [...state.data];\n         const incrementValue = data\n            .flat()\n            .find((item) => item.id === action.id).value;\n         incrementValue < 999 &&\n            data.find((row) =>\n               row.find((item) => (item.id === action.id ? item.value++ : null))\n            );\n         sortedData = sortData(data);\n         const nearest = !!state.settings.cellsCount\n            ? getIds(sortedData, state.settings.cellsCount, action.id)\n            : defaultState.nearestIds;\n         return {\n            ...state,\n            data,\n            sortedData,\n            nearestIds: nearest,\n         };\n      case SET_NEAREST_IDS:\n         if (state.settings.cellsCount > 0) {\n            return {\n               ...state,\n               nearestIds: getIds(\n                  state.sortedData,\n                  state.settings.cellsCount,\n                  action.id\n               ),\n            };\n         } else {\n            return { ...state };\n         }\n      case RESET_NEAREST_IDS:\n         if (!!state.nearestIds.ids.length) {\n            return { ...state, nearestIds: defaultState.nearestIds };\n         } else {\n            return { ...state };\n         }\n      default:\n         return defaultState;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}