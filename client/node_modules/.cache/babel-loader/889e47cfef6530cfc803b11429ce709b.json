{"ast":null,"code":"import { INCREMENT_CELL, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS, SET_SETTINGS, RESET_SETTINGS } from \"../../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./building\";\nimport defaultState from \"./defaultState\";\nconst initialState = defaultState;\nconsole.log(defaultState.settings.rowsCount);\n\nconst sortData = data => {\n  if (data.length > 0) {\n    return data.flat().sort((a, b) => a.value - b.value);\n  }\n}; //find nearest values functions\n\n\nconst checkTargetValueIsLowest = (sortedData, targetId) => {\n  if (sortedData.indexOf(sortedData.find(item => item.id === targetId)) === 0) {\n    return true;\n  }\n};\n\nconst checkTargetValueIsBiggest = (sortedData, targetId) => {\n  if (sortedData.indexOf(sortedData.find(item => item.id === targetId)) === sortedData.length - 1) {\n    return true;\n  }\n};\n\nconst getNearestIdsOfLowestValue = (sortedData, cellsCount) => {\n  return sortedData.slice(1, cellsCount + 1).map(item => item.id);\n};\n\nconst getNearestIdsOfBiggestValue = (sortedData, cellsCount) => {\n  return sortedData.slice(-cellsCount - 1, -1).map(item => item.id);\n};\n\nconst getNearestId = (sortedData, targetId) => {\n  const indexOfTargetId = sortedData.indexOf(sortedData.find(item => item.id === targetId));\n  const prevItem = sortedData[indexOfTargetId - 1];\n  const nextItem = sortedData[indexOfTargetId + 1];\n  const currentItem = sortedData[indexOfTargetId];\n  const prevDiff = Math.abs(currentItem.value - prevItem.value);\n  const nextDiff = Math.abs(nextItem.value - currentItem.value);\n  const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n  return nearestItem.id;\n};\n\nconst findNearestIds = (sortedData, targetId, cellsCount, ids = [], step = 0) => {\n  if (step < cellsCount) {\n    if (checkTargetValueIsLowest(sortedData, targetId)) {\n      ids.push(getNearestIdsOfLowestValue(sortedData, cellsCount - step));\n      return ids.flat();\n    } else if (checkTargetValueIsBiggest(sortedData, targetId)) {\n      ids.push(getNearestIdsOfBiggestValue(sortedData, cellsCount - step));\n      return ids.flat();\n    } else {\n      const id = getNearestId(sortedData, targetId);\n      ids.push(id);\n      sortedData = sortedData.filter(item => item.id !== id);\n      step++;\n      return findNearestIds(sortedData, targetId, cellsCount, ids, step);\n    }\n  }\n\n  return ids;\n};\n\nconst getIds = (sortedData, cellsCount, targetId) => {\n  const targetValue = sortedData.find(item => item.id === targetId).value;\n  const sameValueIds = sortedData.filter(item => item.value === targetValue && item.id !== targetId).map(item => item.id);\n\n  if (sameValueIds.length > 0) {\n    sortedData = sortedData.filter(item => !sameValueIds.includes(item.id));\n  }\n\n  const nearestIds = findNearestIds(sortedData, targetId, cellsCount);\n  return {\n    sameValueIds,\n    ids: nearestIds\n  };\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  console.log(state);\n\n  switch (action.type) {\n    case SET_SETTINGS:\n      let data;\n      const newSettings = { ...action.settings\n      };\n\n      if (state.data.length === 0) {\n        data = createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n      } else if (state.settings.rowsCount !== newSettings.rowsCount || state.settings.columnsCount !== newSettings.columnsCount) {\n        data = rebuildMatrix(state.data, state.settings, newSettings);\n      }\n\n      return { ...state,\n        data,\n        sortedData: sortData(state.data),\n        settings: newSettings\n      };\n\n    case RESET_SETTINGS:\n      return {\n        defaultState\n      };\n\n    case ADD_ROW:\n      addRows(data, 1, state.settings.columnsCount);\n      return { ...state,\n        settings: { ...state.setings,\n          rowsCount: state.data.length\n        },\n        sortedData: sortData(state.data),\n        data\n      };\n\n    case REMOVE_ROW:\n      return { ...state,\n        settings: { ...state.setings,\n          rowsCount: state.data.length\n        },\n        data: state.data.splice(action.rowIndex, 1),\n        sortedData: sortData(state.data)\n      };\n\n    case INCREMENT_CELL:\n      return { ...state,\n        data: data.find(row => row.find(item => item.id === action.id ? item.value++ : null)),\n        sortedData: sortData(state.data),\n        nearestIds: getIds(state.sortedData, state.settings.cellsCount, action.id)\n      };\n\n    case SET_NEAREST_IDS:\n      return { ...state,\n        sortedData: sortData(state.data),\n        nearestIds: getIds(state.sortedData, state.settings.cellsCount, action.id)\n      };\n\n    case RESET_NEAREST_IDS:\n      return { ...state,\n        nearestIds: {\n          sameValueIds: [],\n          ids: []\n        }\n      };\n\n    default:\n      return defaultState;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer/matrixReducer.js"],"names":["INCREMENT_CELL","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","SET_SETTINGS","RESET_SETTINGS","createMatrix","rebuildMatrix","addRows","defaultState","initialState","console","log","settings","rowsCount","sortData","data","length","flat","sort","a","b","value","checkTargetValueIsLowest","sortedData","targetId","indexOf","find","item","id","checkTargetValueIsBiggest","getNearestIdsOfLowestValue","cellsCount","slice","map","getNearestIdsOfBiggestValue","getNearestId","indexOfTargetId","prevItem","nextItem","currentItem","prevDiff","Math","abs","nextDiff","nearestItem","findNearestIds","ids","step","push","filter","getIds","targetValue","sameValueIds","includes","nearestIds","matrixReducer","state","action","type","newSettings","columnsCount","setings","splice","rowIndex","row"],"mappings":"AAAA,SACGA,cADH,EAEGC,UAFH,EAGGC,OAHH,EAIGC,eAJH,EAKGC,iBALH,EAMGC,YANH,EAOGC,cAPH,QAQO,oBARP;AASA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,OAAtC,QAAqD,YAArD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,YAAY,GAAGD,YAArB;AACAE,OAAO,CAACC,GAAR,CAAYH,YAAY,CAACI,QAAb,CAAsBC,SAAlC;;AACA,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AACxB,MAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AAClB,WAAOD,IAAI,CAACE,IAAL,GAAYC,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAvC,CAAP;AACF;AACH,CAJD,C,CAMA;;;AACA,MAAMC,wBAAwB,GAAG,CAACC,UAAD,EAAaC,QAAb,KAA0B;AACxD,MACGD,UAAU,CAACE,OAAX,CAAmBF,UAAU,CAACG,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,QAAtC,CAAnB,MAAwE,CAD3E,EAEE;AACC,WAAO,IAAP;AACF;AACH,CAND;;AAOA,MAAMK,yBAAyB,GAAG,CAACN,UAAD,EAAaC,QAAb,KAA0B;AACzD,MACGD,UAAU,CAACE,OAAX,CAAmBF,UAAU,CAACG,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,QAAtC,CAAnB,MACAD,UAAU,CAACP,MAAX,GAAoB,CAFvB,EAGE;AACC,WAAO,IAAP;AACF;AACH,CAPD;;AAQA,MAAMc,0BAA0B,GAAG,CAACP,UAAD,EAAaQ,UAAb,KAA4B;AAC5D,SAAOR,UAAU,CAACS,KAAX,CAAiB,CAAjB,EAAoBD,UAAU,GAAG,CAAjC,EAAoCE,GAApC,CAAyCN,IAAD,IAAUA,IAAI,CAACC,EAAvD,CAAP;AACF,CAFD;;AAGA,MAAMM,2BAA2B,GAAG,CAACX,UAAD,EAAaQ,UAAb,KAA4B;AAC7D,SAAOR,UAAU,CAACS,KAAX,CAAiB,CAACD,UAAD,GAAc,CAA/B,EAAkC,CAAC,CAAnC,EAAsCE,GAAtC,CAA2CN,IAAD,IAAUA,IAAI,CAACC,EAAzD,CAAP;AACF,CAFD;;AAGA,MAAMO,YAAY,GAAG,CAACZ,UAAD,EAAaC,QAAb,KAA0B;AAC5C,QAAMY,eAAe,GAAGb,UAAU,CAACE,OAAX,CACrBF,UAAU,CAACG,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,QAAtC,CADqB,CAAxB;AAGA,QAAMa,QAAQ,GAAGd,UAAU,CAACa,eAAe,GAAG,CAAnB,CAA3B;AACA,QAAME,QAAQ,GAAGf,UAAU,CAACa,eAAe,GAAG,CAAnB,CAA3B;AACA,QAAMG,WAAW,GAAGhB,UAAU,CAACa,eAAD,CAA9B;AACA,QAAMI,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASH,WAAW,CAAClB,KAAZ,GAAoBgB,QAAQ,CAAChB,KAAtC,CAAjB;AACA,QAAMsB,QAAQ,GAAGF,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACjB,KAAT,GAAiBkB,WAAW,CAAClB,KAAtC,CAAjB;AACA,QAAMuB,WAAW,GAAGJ,QAAQ,GAAGG,QAAX,GAAsBN,QAAtB,GAAiCC,QAArD;AACA,SAAOM,WAAW,CAAChB,EAAnB;AACF,CAXD;;AAYA,MAAMiB,cAAc,GAAG,CACpBtB,UADoB,EAEpBC,QAFoB,EAGpBO,UAHoB,EAIpBe,GAAG,GAAG,EAJc,EAKpBC,IAAI,GAAG,CALa,KAMlB;AACF,MAAIA,IAAI,GAAGhB,UAAX,EAAuB;AACpB,QAAIT,wBAAwB,CAACC,UAAD,EAAaC,QAAb,CAA5B,EAAoD;AACjDsB,MAAAA,GAAG,CAACE,IAAJ,CAASlB,0BAA0B,CAACP,UAAD,EAAaQ,UAAU,GAAGgB,IAA1B,CAAnC;AACA,aAAOD,GAAG,CAAC7B,IAAJ,EAAP;AACF,KAHD,MAGO,IAAIY,yBAAyB,CAACN,UAAD,EAAaC,QAAb,CAA7B,EAAqD;AACzDsB,MAAAA,GAAG,CAACE,IAAJ,CAASd,2BAA2B,CAACX,UAAD,EAAaQ,UAAU,GAAGgB,IAA1B,CAApC;AACA,aAAOD,GAAG,CAAC7B,IAAJ,EAAP;AACF,KAHM,MAGA;AACJ,YAAMW,EAAE,GAAGO,YAAY,CAACZ,UAAD,EAAaC,QAAb,CAAvB;AACAsB,MAAAA,GAAG,CAACE,IAAJ,CAASpB,EAAT;AACAL,MAAAA,UAAU,GAAGA,UAAU,CAAC0B,MAAX,CAAmBtB,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAxC,CAAb;AACAmB,MAAAA,IAAI;AACJ,aAAOF,cAAc,CAACtB,UAAD,EAAaC,QAAb,EAAuBO,UAAvB,EAAmCe,GAAnC,EAAwCC,IAAxC,CAArB;AACF;AACH;;AACD,SAAOD,GAAP;AACF,CAvBD;;AAwBA,MAAMI,MAAM,GAAG,CAAC3B,UAAD,EAAaQ,UAAb,EAAyBP,QAAzB,KAAsC;AAClD,QAAM2B,WAAW,GAAG5B,UAAU,CAACG,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,QAAtC,EAAgDH,KAApE;AACA,QAAM+B,YAAY,GAAG7B,UAAU,CAC3B0B,MADiB,CACTtB,IAAD,IAAUA,IAAI,CAACN,KAAL,KAAe8B,WAAf,IAA8BxB,IAAI,CAACC,EAAL,KAAYJ,QAD1C,EAEjBS,GAFiB,CAEZN,IAAD,IAAUA,IAAI,CAACC,EAFF,CAArB;;AAGA,MAAIwB,YAAY,CAACpC,MAAb,GAAsB,CAA1B,EAA6B;AAC1BO,IAAAA,UAAU,GAAGA,UAAU,CAAC0B,MAAX,CAAmBtB,IAAD,IAAU,CAACyB,YAAY,CAACC,QAAb,CAAsB1B,IAAI,CAACC,EAA3B,CAA7B,CAAb;AACF;;AACD,QAAM0B,UAAU,GAAGT,cAAc,CAACtB,UAAD,EAAaC,QAAb,EAAuBO,UAAvB,CAAjC;AACA,SAAO;AAAEqB,IAAAA,YAAF;AAAgBN,IAAAA,GAAG,EAAEQ;AAArB,GAAP;AACF,CAVD;;AAYA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAG/C,YAAT,EAAuBgD,MAAvB,KAAkC;AACrD/C,EAAAA,OAAO,CAACC,GAAR,CAAY6C,KAAZ;;AACA,UAAQC,MAAM,CAACC,IAAf;AACG,SAAKvD,YAAL;AACG,UAAIY,IAAJ;AACA,YAAM4C,WAAW,GAAG,EAAE,GAAGF,MAAM,CAAC7C;AAAZ,OAApB;;AACA,UAAI4C,KAAK,CAACzC,IAAN,CAAWC,MAAX,KAAsB,CAA1B,EAA6B;AAC1BD,QAAAA,IAAI,GAAGV,YAAY,CAChBsD,WAAW,CAAC9C,SADI,EAEhB8C,WAAW,CAACC,YAFI,CAAnB;AAIF,OALD,MAKO,IACJJ,KAAK,CAAC5C,QAAN,CAAeC,SAAf,KAA6B8C,WAAW,CAAC9C,SAAzC,IACA2C,KAAK,CAAC5C,QAAN,CAAegD,YAAf,KAAgCD,WAAW,CAACC,YAFxC,EAGL;AACC7C,QAAAA,IAAI,GAAGT,aAAa,CAACkD,KAAK,CAACzC,IAAP,EAAayC,KAAK,CAAC5C,QAAnB,EAA6B+C,WAA7B,CAApB;AACF;;AACD,aAAO,EACJ,GAAGH,KADC;AAEJzC,QAAAA,IAFI;AAGJQ,QAAAA,UAAU,EAAET,QAAQ,CAAC0C,KAAK,CAACzC,IAAP,CAHhB;AAIJH,QAAAA,QAAQ,EAAE+C;AAJN,OAAP;;AAMH,SAAKvD,cAAL;AACG,aAAO;AACJI,QAAAA;AADI,OAAP;;AAGH,SAAKR,OAAL;AACGO,MAAAA,OAAO,CAACQ,IAAD,EAAO,CAAP,EAAUyC,KAAK,CAAC5C,QAAN,CAAegD,YAAzB,CAAP;AACA,aAAO,EACJ,GAAGJ,KADC;AAEJ5C,QAAAA,QAAQ,EAAE,EAAE,GAAG4C,KAAK,CAACK,OAAX;AAAoBhD,UAAAA,SAAS,EAAE2C,KAAK,CAACzC,IAAN,CAAWC;AAA1C,SAFN;AAGJO,QAAAA,UAAU,EAAET,QAAQ,CAAC0C,KAAK,CAACzC,IAAP,CAHhB;AAIJA,QAAAA;AAJI,OAAP;;AAMH,SAAKhB,UAAL;AACG,aAAO,EACJ,GAAGyD,KADC;AAEJ5C,QAAAA,QAAQ,EAAE,EAAE,GAAG4C,KAAK,CAACK,OAAX;AAAoBhD,UAAAA,SAAS,EAAE2C,KAAK,CAACzC,IAAN,CAAWC;AAA1C,SAFN;AAGJD,QAAAA,IAAI,EAAEyC,KAAK,CAACzC,IAAN,CAAW+C,MAAX,CAAkBL,MAAM,CAACM,QAAzB,EAAmC,CAAnC,CAHF;AAIJxC,QAAAA,UAAU,EAAET,QAAQ,CAAC0C,KAAK,CAACzC,IAAP;AAJhB,OAAP;;AAMH,SAAKjB,cAAL;AACG,aAAO,EACJ,GAAG0D,KADC;AAEJzC,QAAAA,IAAI,EAAEA,IAAI,CAACW,IAAL,CAAWsC,GAAD,IACbA,GAAG,CAACtC,IAAJ,CAAUC,IAAD,IAAWA,IAAI,CAACC,EAAL,KAAY6B,MAAM,CAAC7B,EAAnB,GAAwBD,IAAI,CAACN,KAAL,EAAxB,GAAuC,IAA3D,CADG,CAFF;AAKJE,QAAAA,UAAU,EAAET,QAAQ,CAAC0C,KAAK,CAACzC,IAAP,CALhB;AAMJuC,QAAAA,UAAU,EAAEJ,MAAM,CACfM,KAAK,CAACjC,UADS,EAEfiC,KAAK,CAAC5C,QAAN,CAAemB,UAFA,EAGf0B,MAAM,CAAC7B,EAHQ;AANd,OAAP;;AAYH,SAAK3B,eAAL;AACG,aAAO,EACJ,GAAGuD,KADC;AAEJjC,QAAAA,UAAU,EAAET,QAAQ,CAAC0C,KAAK,CAACzC,IAAP,CAFhB;AAGJuC,QAAAA,UAAU,EAAEJ,MAAM,CACfM,KAAK,CAACjC,UADS,EAEfiC,KAAK,CAAC5C,QAAN,CAAemB,UAFA,EAGf0B,MAAM,CAAC7B,EAHQ;AAHd,OAAP;;AASH,SAAK1B,iBAAL;AACG,aAAO,EAAE,GAAGsD,KAAL;AAAYF,QAAAA,UAAU,EAAE;AAAEF,UAAAA,YAAY,EAAE,EAAhB;AAAoBN,UAAAA,GAAG,EAAE;AAAzB;AAAxB,OAAP;;AACH;AACG,aAAOtC,YAAP;AAlEN;AAoEF,CAtED;;AAwEA,eAAe+C,aAAf","sourcesContent":["import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n   RESET_SETTINGS,\n} from \"../../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./building\";\nimport defaultState from \"./defaultState\";\n\nconst initialState = defaultState;\nconsole.log(defaultState.settings.rowsCount)\nconst sortData = (data) => {\n   if (data.length > 0) {\n      return data.flat().sort((a, b) => a.value - b.value);\n   }\n};\n\n//find nearest values functions\nconst checkTargetValueIsLowest = (sortedData, targetId) => {\n   if (\n      sortedData.indexOf(sortedData.find((item) => item.id === targetId)) === 0\n   ) {\n      return true;\n   }\n};\nconst checkTargetValueIsBiggest = (sortedData, targetId) => {\n   if (\n      sortedData.indexOf(sortedData.find((item) => item.id === targetId)) ===\n      sortedData.length - 1\n   ) {\n      return true;\n   }\n};\nconst getNearestIdsOfLowestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(1, cellsCount + 1).map((item) => item.id);\n};\nconst getNearestIdsOfBiggestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(-cellsCount - 1, -1).map((item) => item.id);\n};\nconst getNearestId = (sortedData, targetId) => {\n   const indexOfTargetId = sortedData.indexOf(\n      sortedData.find((item) => item.id === targetId)\n   );\n   const prevItem = sortedData[indexOfTargetId - 1];\n   const nextItem = sortedData[indexOfTargetId + 1];\n   const currentItem = sortedData[indexOfTargetId];\n   const prevDiff = Math.abs(currentItem.value - prevItem.value);\n   const nextDiff = Math.abs(nextItem.value - currentItem.value);\n   const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n   return nearestItem.id;\n};\nconst findNearestIds = (\n   sortedData,\n   targetId,\n   cellsCount,\n   ids = [],\n   step = 0\n) => {\n   if (step < cellsCount) {\n      if (checkTargetValueIsLowest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfLowestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else if (checkTargetValueIsBiggest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfBiggestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else {\n         const id = getNearestId(sortedData, targetId);\n         ids.push(id);\n         sortedData = sortedData.filter((item) => item.id !== id);\n         step++;\n         return findNearestIds(sortedData, targetId, cellsCount, ids, step);\n      }\n   }\n   return ids;\n};\nconst getIds = (sortedData, cellsCount, targetId) => {\n   const targetValue = sortedData.find((item) => item.id === targetId).value;\n   const sameValueIds = sortedData\n      .filter((item) => item.value === targetValue && item.id !== targetId)\n      .map((item) => item.id);\n   if (sameValueIds.length > 0) {\n      sortedData = sortedData.filter((item) => !sameValueIds.includes(item.id));\n   }\n   const nearestIds = findNearestIds(sortedData, targetId, cellsCount);\n   return { sameValueIds, ids: nearestIds };\n};\n\nconst matrixReducer = (state = initialState, action) => {\n   console.log(state)\n   switch (action.type) {\n      case SET_SETTINGS:\n         let data;\n         const newSettings = { ...action.settings };\n         if (state.data.length === 0) {\n            data = createMatrix(\n               newSettings.rowsCount,\n               newSettings.columnsCount\n            );\n         } else if (\n            state.settings.rowsCount !== newSettings.rowsCount ||\n            state.settings.columnsCount !== newSettings.columnsCount\n         ) {\n            data = rebuildMatrix(state.data, state.settings, newSettings);\n         }\n         return {\n            ...state,\n            data,\n            sortedData: sortData(state.data),\n            settings: newSettings,\n         };\n      case RESET_SETTINGS:\n         return {\n            defaultState,\n         };\n      case ADD_ROW:\n         addRows(data, 1, state.settings.columnsCount);\n         return {\n            ...state,\n            settings: { ...state.setings, rowsCount: state.data.length },\n            sortedData: sortData(state.data),\n            data,\n         };\n      case REMOVE_ROW:\n         return {\n            ...state,\n            settings: { ...state.setings, rowsCount: state.data.length },\n            data: state.data.splice(action.rowIndex, 1),\n            sortedData: sortData(state.data),\n         };\n      case INCREMENT_CELL:\n         return {\n            ...state,\n            data: data.find((row) =>\n               row.find((item) => (item.id === action.id ? item.value++ : null))\n            ),\n            sortedData: sortData(state.data),\n            nearestIds: getIds(\n               state.sortedData,\n               state.settings.cellsCount,\n               action.id\n            ),\n         };\n      case SET_NEAREST_IDS:\n         return {\n            ...state,\n            sortedData: sortData(state.data),\n            nearestIds: getIds(\n               state.sortedData,\n               state.settings.cellsCount,\n               action.id\n            ),\n         };\n      case RESET_NEAREST_IDS:\n         return { ...state, nearestIds: { sameValueIds: [], ids: [] } };\n      default:\n         return defaultState;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}