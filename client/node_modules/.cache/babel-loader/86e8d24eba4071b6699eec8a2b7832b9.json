{"ast":null,"code":"import { INCREMENT_CELL, CREATE_MATRIX, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS } from \"../types\";\nconst initialState = {\n  nearestIds: [],\n  data: []\n}; //TODO: row 1 column 3 cells 2\n\nconst findNearestIds = (matrixData, cellsCount, id) => {\n  if (+cellsCount === 0) {\n    return [];\n  } else {\n    let nearestIds = [];\n    let sortedMatrix = matrixData.reduce((currentRow, nextRow) => currentRow.concat(nextRow)).sort((a, b) => a.value - b.value);\n    const iterationCount = cellsCount < sortedMatrix.length ? cellsCount : sortedMatrix.length - 1;\n    let indexCurrentId = sortedMatrix.indexOf(sortedMatrix.find(item => item.id === id));\n    console.log(sortedMatrix.length, \" matrix\", iterationCount, \"counts\"); //exclusion when set count of cells more than the available count of cells\n\n    const exclusionIds = indexCurrentId => sortedMatrix.filter((item, index) => index !== indexCurrentId).forEach(item => nearestIds.push(item.id)); //get ids when the hovered item is the lowest\n\n\n    if (indexCurrentId === 0) {\n      sortedMatrix.length - 1 === iterationCount ? exclusionIds(indexCurrentId) : sortedMatrix.splice(1, iterationCount).forEach(item => nearestIds.push(item.id));\n    } //get ids when the hovered item is the biggest\n    else if (indexCurrentId === sortedMatrix.length - 1) {\n        sortedMatrix.length - 1 === iterationCount ? exclusionIds(indexCurrentId) : sortedMatrix.splice(-iterationCount - 1, iterationCount).forEach(item => nearestIds.push(item.id));\n      } //other options\n      else {\n          console.log(iterationCount);\n\n          if (sortedMatrix.length - 1 === iterationCount) {\n            exclusionIds(indexCurrentId);\n          } else {\n            for (let i = 0; i < iterationCount; i++) {\n              indexCurrentId = sortedMatrix.indexOf(sortedMatrix.find(item => item.id === id));\n\n              if (indexCurrentId === 0) {\n                sortedMatrix.splice(1, iterationCount - i).forEach(item => nearestIds.push(item.id));\n                break;\n              } else if (indexCurrentId === sortedMatrix.length - 1) {\n                const from = -indexCurrentId - iterationCount - i - 1;\n                sortedMatrix.splice(from, iterationCount - i).forEach(item => nearestIds.push(item.id));\n                break;\n              } else {\n                const prevItem = sortedMatrix[indexCurrentId - 1];\n                const nextItem = sortedMatrix[indexCurrentId + 1];\n                const currentItem = sortedMatrix[indexCurrentId];\n                const prevDiff = Math.abs(currentItem.value - prevItem.value);\n                const nextDiff = Math.abs(nextItem.value - currentItem.value);\n                const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n                nearestIds.push(nearestItem.id);\n                sortedMatrix.splice(sortedMatrix.indexOf(sortedMatrix.find(item => item === nearestItem)), 1);\n              }\n            }\n          }\n        }\n\n    return nearestIds;\n  }\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  let settings, data, ids;\n\n  switch (action.type) {\n    case CREATE_MATRIX:\n      data = [...state.data];\n      settings = action.settings;\n\n      for (let i = 0; i < settings.rows; i++) {\n        data.push([]);\n      }\n\n      data.forEach((item, index) => {\n        for (let i = 0; i < settings.columns; i++) {\n          const cellObject = {\n            id: String(index + 1).concat(i + 1),\n            value: Math.round(100 + Math.random() * 899)\n          };\n          item.push(cellObject);\n        }\n      });\n      return { ...state,\n        data\n      };\n\n    case INCREMENT_CELL:\n      data = [...state.data];\n      data.find(row => row.find(item => item.id === action.id)).filter(item => item.id === action.id)[0].value++;\n      return { ...state,\n        data\n      };\n\n    case REMOVE_ROW:\n      data = [...state.data];\n      data.splice(action.index, 1);\n      return { ...state,\n        data\n      };\n\n    case ADD_ROW:\n      data = [...state.data];\n      let newRow = [];\n\n      for (let i = 0; i < action.columnsCount; i++) {\n        const cellObject = {\n          id: String(data.length + 1).concat(i + 1),\n          value: Math.round(100 + Math.random() * 899)\n        };\n        newRow.push(cellObject);\n      }\n\n      data.push(newRow);\n      return { ...state,\n        data\n      };\n\n    case SET_NEAREST_IDS:\n      data = [...state.data];\n      const cellsCount = action.cellsCount;\n      const id = action.id; // ids = findNearestIds(data, cellsCount, id);\n\n      return { ...state,\n        nearestIds: ids\n      };\n\n    case RESET_NEAREST_IDS:\n      console.log('leave');\n      ids = [...state.nearestIds];\n      ids = [];\n      return { ...state,\n        nearestIds: ids\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","CREATE_MATRIX","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","initialState","nearestIds","data","findNearestIds","matrixData","cellsCount","id","sortedMatrix","reduce","currentRow","nextRow","concat","sort","a","b","value","iterationCount","length","indexCurrentId","indexOf","find","item","console","log","exclusionIds","filter","index","forEach","push","splice","i","from","prevItem","nextItem","currentItem","prevDiff","Math","abs","nextDiff","nearestItem","matrixReducer","state","action","settings","ids","type","rows","columns","cellObject","String","round","random","row","newRow","columnsCount"],"mappings":"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","sourcesContent":["import {\n   INCREMENT_CELL,\n   CREATE_MATRIX,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n} from \"../types\";\n\nconst initialState = { nearestIds: [], data: [] };\n//TODO: row 1 column 3 cells 2\nconst findNearestIds = (matrixData, cellsCount, id) => {\n   if (+cellsCount === 0) {\n      return [];\n   } else {\n      let nearestIds = [];\n      let sortedMatrix = matrixData\n         .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n         .sort((a, b) => a.value - b.value);\n      const iterationCount =\n         cellsCount < sortedMatrix.length\n            ? cellsCount\n            : sortedMatrix.length - 1;\n      let indexCurrentId = sortedMatrix.indexOf(\n         sortedMatrix.find((item) => item.id === id)\n      );\n      console.log(sortedMatrix.length, \" matrix\", iterationCount, \"counts\");\n      //exclusion when set count of cells more than the available count of cells\n      const exclusionIds = (indexCurrentId) =>\n         sortedMatrix\n            .filter((item, index) => index !== indexCurrentId)\n            .forEach((item) => nearestIds.push(item.id));\n      //get ids when the hovered item is the lowest\n      if (indexCurrentId === 0) {\n         sortedMatrix.length - 1 === iterationCount\n            ? exclusionIds(indexCurrentId)\n            : sortedMatrix\n                 .splice(1, iterationCount)\n                 .forEach((item) => nearestIds.push(item.id));\n      }\n      //get ids when the hovered item is the biggest\n      else if (indexCurrentId === sortedMatrix.length - 1) {\n         sortedMatrix.length - 1 === iterationCount\n            ? exclusionIds(indexCurrentId)\n            : sortedMatrix\n                 .splice(-iterationCount - 1, iterationCount)\n                 .forEach((item) => nearestIds.push(item.id));\n      }\n      //other options\n      else {\n         console.log(iterationCount)\n         if (sortedMatrix.length - 1 === iterationCount) {\n            exclusionIds(indexCurrentId);\n         } else {\n            for (let i = 0; i < iterationCount; i++) {\n               indexCurrentId = sortedMatrix.indexOf(\n                  sortedMatrix.find((item) => item.id === id)\n               );\n               if (indexCurrentId === 0) {\n                  sortedMatrix\n                     .splice(1, iterationCount - i)\n                     .forEach((item) => nearestIds.push(item.id));\n                  break;\n               } else if (indexCurrentId === sortedMatrix.length - 1) {\n                  const from = -indexCurrentId - iterationCount - i - 1;\n                  sortedMatrix\n                     .splice(from, iterationCount - i)\n                     .forEach((item) => nearestIds.push(item.id));\n                  break;\n               } else {\n                  const prevItem = sortedMatrix[indexCurrentId - 1];\n                  const nextItem = sortedMatrix[indexCurrentId + 1];\n                  const currentItem = sortedMatrix[indexCurrentId];\n                  const prevDiff = Math.abs(currentItem.value - prevItem.value);\n                  const nextDiff = Math.abs(nextItem.value - currentItem.value);\n                  const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n                  nearestIds.push(nearestItem.id);\n                  sortedMatrix.splice(\n                     sortedMatrix.indexOf(\n                        sortedMatrix.find((item) => item === nearestItem)\n                     ),\n                     1\n                  );\n               }\n            }\n         }\n      }\n      return nearestIds;\n   }\n};\n\nconst matrixReducer = (state = initialState, action) => {\n   let settings, data, ids;\n   switch (action.type) {\n      case CREATE_MATRIX:\n         data = [...state.data];\n         settings = action.settings;\n         for (let i = 0; i < settings.rows; i++) {\n            data.push([]);\n         }\n         data.forEach((item, index) => {\n            for (let i = 0; i < settings.columns; i++) {\n               const cellObject = {\n                  id: String(index + 1).concat(i + 1),\n                  value: Math.round(100 + Math.random() * 899),\n               };\n               item.push(cellObject);\n            }\n         });\n         return { ...state, data };\n      case INCREMENT_CELL:\n         data = [...state.data];\n         data\n            .find((row) => row.find((item) => item.id === action.id))\n            .filter((item) => item.id === action.id)[0].value++;\n         return { ...state, data };\n      case REMOVE_ROW:\n         data = [...state.data];\n         data.splice(action.index, 1);\n         return { ...state, data };\n      case ADD_ROW:\n         data = [...state.data];\n         let newRow = [];\n         for (let i = 0; i < action.columnsCount; i++) {\n            const cellObject = {\n               id: String(data.length + 1).concat(i + 1),\n               value: Math.round(100 + Math.random() * 899),\n            };\n            newRow.push(cellObject);\n         }\n         data.push(newRow);\n         return { ...state, data };\n      case SET_NEAREST_IDS:\n         data = [...state.data];\n         const cellsCount = action.cellsCount;\n         const id = action.id;\n         // ids = findNearestIds(data, cellsCount, id);\n         return { ...state, nearestIds: ids };\n      case RESET_NEAREST_IDS:\n         console.log('leave')\n         ids = [...state.nearestIds];\n         ids = [];\n         return { ...state, nearestIds: ids };\n      default:\n         return state;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}