{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({\n  rowCount,\n  data,\n  cellsSetting\n}) => {\n  const matrixData = useSelector(state => state.matrix.data);\n  const nearestValues = useSelector(state => state.matrix.nearestValues);\n  const dispatch = useDispatch();\n  const [sumIsHover, setSumIsHover] = useState(false); //TODO: move to the redux in the store\n\n  const findNearestValues = (cellsCount, currentValue) => {\n    if (+cellsCount === 0) {\n      return;\n    } else {\n      const sortedMatrix = matrixData.reduce((currentRow, nextRow) => currentRow.concat(nextRow)).sort((a, b) => a.value - b.value);\n      let sortedValues = sortedMatrix.map(data => data.value).sort((a, b) => a - b);\n      let nearestIds = [];\n      const iterationCount = cellsCount < sortedValues.length ? cellsCount : sortedValues.length - 1;\n\n      for (let i = 0; i < iterationCount; i++) {\n        const indexCurrentValue = sortedValues.indexOf(currentValue);\n\n        if (indexCurrentValue === 0) {\n          nearestIds.push(sortedMatrix[indexCurrentValue + 1].id);\n          sortedValues.splice(indexCurrentValue + 1, 1);\n        } // else if (indexCurrentValue === sortedValues.length - 1) {\n        //    nearestValues.push(sortedValues[indexCurrentValue - 1]);\n        //    sortedValues.splice(indexCurrentValue - 1, 1);\n        // } else {\n        //    const prevValue = sortedValues[indexCurrentValue - 1];\n        //    const prevDiff = Math.abs(currentValue - prevValue);\n        //    const nextValue = sortedValues[indexCurrentValue + 1];\n        //    const nextDiff = Math.abs(nextValue - currentValue);\n        //    const nearest = prevDiff < nextDiff ? prevValue : nextValue;\n        //    const nearestId = matrixData\n        //       .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n        //       .find((item) => item.value === nearest).id;\n        //    nearestIds.push(nearestId);\n        //    sortedValues.splice(sortedValues.indexOf(nearest), 1);\n        // }\n\n      }\n\n      return dispatch(setNearestValues(nearestIds));\n    }\n  };\n\n  const rowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  });\n\n  const rowCells = () => {\n    const renderer = sumIsHover ? cellRenderers.percentage : cellRenderers.increment;\n    return data.map((cellData, index) => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow); // const isNearest\n\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum,\n        cellHoverHandler: () => findNearestValues(cellsSetting, cellData.value),\n        Renderer: renderer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","useSelector","cellRenderers","removeRow","setNearestValues","CrossButton","TableCell","TableRow","rowCount","data","cellsSetting","matrixData","state","matrix","nearestValues","dispatch","sumIsHover","setSumIsHover","findNearestValues","cellsCount","currentValue","sortedMatrix","reduce","currentRow","nextRow","concat","sort","a","b","value","sortedValues","map","nearestIds","iterationCount","length","i","indexCurrentValue","indexOf","push","id","splice","rowLabel","static","rowCells","renderer","percentage","increment","cellData","index","percentOfSum","Math","round","sumRow","sum","sumRowCell","cells"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ rowCount, data, cellsSetting }) => {\n   const matrixData = useSelector((state) => state.matrix.data);\n   const nearestValues = useSelector((state) => state.matrix.nearestValues);\n   const dispatch = useDispatch();\n   const [sumIsHover, setSumIsHover] = useState(false);\n\n   //TODO: move to the redux in the store\n   const findNearestValues = (cellsCount, currentValue) => {\n      if (+cellsCount === 0) {\n         return;\n      } else {\n         const sortedMatrix = matrixData\n            .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n            .sort((a, b) => a.value - b.value);\n         let sortedValues = sortedMatrix\n            .map((data) => data.value)\n            .sort((a, b) => a - b);\n         let nearestIds = [];\n         const iterationCount =\n            cellsCount < sortedValues.length\n               ? cellsCount\n               : sortedValues.length - 1;\n         for (let i = 0; i < iterationCount; i++) {\n            const indexCurrentValue = sortedValues.indexOf(currentValue);\n            if (indexCurrentValue === 0) {\n               nearestIds.push(sortedMatrix[indexCurrentValue + 1].id);\n               sortedValues.splice(indexCurrentValue + 1, 1);\n            }\n            // else if (indexCurrentValue === sortedValues.length - 1) {\n            //    nearestValues.push(sortedValues[indexCurrentValue - 1]);\n            //    sortedValues.splice(indexCurrentValue - 1, 1);\n            // } else {\n            //    const prevValue = sortedValues[indexCurrentValue - 1];\n            //    const prevDiff = Math.abs(currentValue - prevValue);\n            //    const nextValue = sortedValues[indexCurrentValue + 1];\n            //    const nextDiff = Math.abs(nextValue - currentValue);\n            //    const nearest = prevDiff < nextDiff ? prevValue : nextValue;\n            //    const nearestId = matrixData\n            //       .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n            //       .find((item) => item.value === nearest).id;\n            //    nearestIds.push(nearestId);\n            //    sortedValues.splice(sortedValues.indexOf(nearest), 1);\n            // }\n         }\n\n         return dispatch(setNearestValues(nearestIds));\n      }\n   };\n   const rowLabel = (\n      <TableCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const rowCells = () => {\n      const renderer = sumIsHover\n         ? cellRenderers.percentage\n         : cellRenderers.increment;\n\n      return data.map((cellData, index) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         // const isNearest\n         return (\n            <TableCell\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               cellHoverHandler={() =>\n                  findNearestValues(cellsSetting, cellData.value)\n               }\n               Renderer={renderer}\n            />\n         );\n      });\n   };\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumMouseEnterHandler={() => setSumIsHover(true)}\n         sumMouseLeaveHandler={() => setSumIsHover(false)}\n      />\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}