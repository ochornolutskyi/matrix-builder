{"ast":null,"code":"import _slicedToArray from\"/home/superproger/workspace/matrix-builder/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{setSettings}from\"../../redux/actions\";import\"./SettingsTable.scss\";import Button from\"../Button\";import ErrorHint from\"../ErrorHint\";import Input from\"./Input\";var inputClassName=\"input-settings\";var ROWS_COUNT_ERROR_MESSAGE=\"Please, set the correct rows value\";var COLUMNS_COUNT_ERROR_MESSAGE=\"Please, set the correct columns value\";var CELLS_COUNT_ERROR_MESSAGE=\"Please, set the correct cells value\";var ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE=\"Please, set the correct rows, columns and cells value\";var ROWS_COLUMNS_COUNT_ERROR_MESSAGE=\"Please, set the correct rows and columns value\";var ROWS_CELLS_COUNT_ERROR_MESSAGE=\"Please, set the correct rows and cells value\";var COLUMNS_CELLS_COUNT_ERROR_MESSAGE=\"Please, set the correct columns and cells value\";var checkTargetCount=function checkTargetCount(targetCount){return targetCount===0||targetCount<0;};var checkCellsCount=function checkCellsCount(cellsCount){return cellsCount<0;};var checkSettings=function checkSettings(rowsCount,columnsCount,cellsCount){if(checkTargetCount(rowsCount)&&checkTargetCount(columnsCount)&&checkCellsCount(cellsCount)){return ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE;}else if(checkTargetCount(rowsCount)&&checkTargetCount(columnsCount)){return ROWS_COLUMNS_COUNT_ERROR_MESSAGE;}else if(checkTargetCount(rowsCount)&&checkCellsCount(cellsCount)){return ROWS_CELLS_COUNT_ERROR_MESSAGE;}else if(checkTargetCount(columnsCount)&&checkCellsCount(cellsCount)){return COLUMNS_CELLS_COUNT_ERROR_MESSAGE;}else if(checkTargetCount(rowsCount)){return ROWS_COUNT_ERROR_MESSAGE;}else if(checkTargetCount(columnsCount)){return COLUMNS_COUNT_ERROR_MESSAGE;}else if(checkCellsCount(cellsCount)){return CELLS_COUNT_ERROR_MESSAGE;}};var SettingsTable=function SettingsTable(){var settings=useSelector(function(state){return state.matrix.settings;});var dispatch=useDispatch();var _useState=useState(settings.rowsCount),_useState2=_slicedToArray(_useState,2),rowsCount=_useState2[0],setRowsCount=_useState2[1];var _useState3=useState(settings.columnsCount),_useState4=_slicedToArray(_useState3,2),columnsCount=_useState4[0],setColumnsCount=_useState4[1];var _useState5=useState(settings.cellsCount),_useState6=_slicedToArray(_useState5,2),cellsCount=_useState6[0],setCellsCount=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),error=_useState8[0],setError=_useState8[1];var showErrorMessage=function showErrorMessage(message){setError(message);setTimeout(function(){setError(null);},2500);};var applySettingsHandler=function applySettingsHandler(){var error=checkSettings(rowsCount,columnsCount,cellsCount);if(error){showErrorMessage(error);}else{dispatch(setSettings({rowsCount:rowsCount,columnsCount:columnsCount,cellsCount:cellsCount}));}};return/*#__PURE__*/React.createElement(\"div\",{className:\"settings-wrapper\"},/*#__PURE__*/React.createElement(Input,{id:\"rows-input\",className:inputClassName,label:\"Set the rows count\",value:rowsCount,onChangeInput:setRowsCount}),/*#__PURE__*/React.createElement(Input,{id:\"columns-input\",className:inputClassName,label:\"Set the columns count\",value:columnsCount,onChangeInput:setColumnsCount}),/*#__PURE__*/React.createElement(Input,{id:\"cells-input\",className:inputClassName,label:\"Set the count of cells to show the nearest value\",value:cellsCount,onChangeInput:setCellsCount}),/*#__PURE__*/React.createElement(Button,{className:\"red-button\",buttonText:\"Apply settings\",buttonClickHandler:applySettingsHandler}),error&&/*#__PURE__*/React.createElement(ErrorHint,{errorText:error}));};export default SettingsTable;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js"],"names":["React","useState","useDispatch","useSelector","setSettings","Button","ErrorHint","Input","inputClassName","ROWS_COUNT_ERROR_MESSAGE","COLUMNS_COUNT_ERROR_MESSAGE","CELLS_COUNT_ERROR_MESSAGE","ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE","ROWS_COLUMNS_COUNT_ERROR_MESSAGE","ROWS_CELLS_COUNT_ERROR_MESSAGE","COLUMNS_CELLS_COUNT_ERROR_MESSAGE","checkTargetCount","targetCount","checkCellsCount","cellsCount","checkSettings","rowsCount","columnsCount","SettingsTable","settings","state","matrix","dispatch","setRowsCount","setColumnsCount","setCellsCount","error","setError","showErrorMessage","message","setTimeout","applySettingsHandler"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\n\nconst inputClassName = \"input-settings\";\nconst ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows value\";\nconst COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns value\";\nconst CELLS_COUNT_ERROR_MESSAGE = \"Please, set the correct cells value\";\nconst ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows, columns and cells value\";\nconst ROWS_COLUMNS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows and columns value\";\nconst ROWS_CELLS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows and cells value\";\nconst COLUMNS_CELLS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct columns and cells value\";\nconst checkTargetCount = (targetCount) => targetCount === 0 || targetCount < 0;\nconst checkCellsCount = (cellsCount) => cellsCount < 0;\nconst checkSettings = (rowsCount, columnsCount, cellsCount) => {\n   if (\n      checkTargetCount(rowsCount) &&\n      checkTargetCount(columnsCount) &&\n      checkCellsCount(cellsCount)\n   ) {\n      return ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE;\n   } else if (checkTargetCount(rowsCount) && checkTargetCount(columnsCount)) {\n      return ROWS_COLUMNS_COUNT_ERROR_MESSAGE;\n   } else if (checkTargetCount(rowsCount) && checkCellsCount(cellsCount)) {\n      return ROWS_CELLS_COUNT_ERROR_MESSAGE;\n   } else if (checkTargetCount(columnsCount) && checkCellsCount(cellsCount)) {\n      return COLUMNS_CELLS_COUNT_ERROR_MESSAGE;\n   } else if (checkTargetCount(rowsCount)) {\n      return ROWS_COUNT_ERROR_MESSAGE;\n   } else if (checkTargetCount(columnsCount)) {\n      return COLUMNS_COUNT_ERROR_MESSAGE;\n   } else if (checkCellsCount(cellsCount)) {\n      return CELLS_COUNT_ERROR_MESSAGE;\n   }\n};\n\nconst SettingsTable = () => {\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [error, setError] = useState(null);\n\n   const showErrorMessage = (message) => {\n      setError(message);\n      setTimeout(() => {\n         setError(null);\n      }, 2500);\n   };\n\n   const applySettingsHandler = () => {\n      const error = checkSettings(rowsCount, columnsCount, cellsCount);\n      if (error) {\n         showErrorMessage(error);\n      } else {\n         dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n      }\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <Input\n            id=\"rows-input\"\n            className={inputClassName}\n            label=\"Set the rows count\"\n            value={rowsCount}\n            onChangeInput={setRowsCount}\n         />\n         <Input\n            id=\"columns-input\"\n            className={inputClassName}\n            label=\"Set the columns count\"\n            value={columnsCount}\n            onChangeInput={setColumnsCount}\n         />\n         <Input\n            id=\"cells-input\"\n            className={inputClassName}\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            onChangeInput={setCellsCount}\n         />\n         <Button\n            className=\"red-button\"\n            buttonText=\"Apply settings\"\n            buttonClickHandler={applySettingsHandler}\n         />\n         {error && <ErrorHint errorText={error} />}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n"]},"metadata":{},"sourceType":"module"}