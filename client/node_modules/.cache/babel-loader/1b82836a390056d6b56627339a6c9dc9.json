{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({\n  rowCount,\n  data,\n  cellsSetting\n}) => {\n  const matrix = useSelector(state => state.matrix);\n  const [sumIsHover, setSumIsHover] = useState(false);\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const rowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  });\n\n  const findNearestValues = (cellsCount, currentValue) => {\n    const sortedValues = matrix.reduce((currentRow, nextRow) => currentRow.concat(nextRow)).map(data => data.value).sort((a, b) => a - b);\n    const nearestValues = [];\n    const indexCurrentValue = sortedValues.indexOf(currentValue); // for (let i = 0; i < cellsCount; i++) {\n\n    const prevDiff = Math.abs(currentValue - sortedValues[indexCurrentValue - 1]);\n    const nextDiff = Math.abs(currentValue - sortedValues[indexCurrentValue + 1]); // }\n\n    console.log(currentValue, sortedValues[indexCurrentValue - 1], prevDiff);\n  };\n\n  const rowCells = () => {\n    const renderer = sumIsHover ? cellRenderers.percentage : cellRenderers.increment;\n    return data.map((cellData, index) => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow);\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum,\n        cellHoverHandler: () => findNearestValues(cellsSetting.cells, cellData.value),\n        Renderer: renderer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","useSelector","cellRenderers","removeRow","CrossButton","TableCell","TableRow","rowCount","data","cellsSetting","matrix","state","sumIsHover","setSumIsHover","sumRow","map","value","reduce","sum","rowLabel","static","findNearestValues","cellsCount","currentValue","sortedValues","currentRow","nextRow","concat","sort","a","b","nearestValues","indexCurrentValue","indexOf","prevDiff","Math","abs","nextDiff","console","log","rowCells","renderer","percentage","increment","cellData","index","percentOfSum","round","id","cells","sumRowCell","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ rowCount, data, cellsSetting }) => {\n   const matrix = useSelector((state) => state.matrix);\n   const [sumIsHover, setSumIsHover] = useState(false);\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const rowLabel = (\n      <TableCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const findNearestValues = (cellsCount, currentValue) => {\n      const sortedValues = matrix\n         .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n         .map((data) => data.value)\n         .sort((a, b) => a - b);\n      const nearestValues = [];\n      const indexCurrentValue = sortedValues.indexOf(currentValue);\n      // for (let i = 0; i < cellsCount; i++) {\n      const prevDiff = Math.abs(\n         currentValue - sortedValues[indexCurrentValue - 1]\n      );\n      const nextDiff = Math.abs(\n         currentValue - sortedValues[indexCurrentValue + 1]\n      );\n      // }\n      console.log(currentValue, sortedValues[indexCurrentValue - 1], prevDiff);\n   };\n   const rowCells = () => {\n      const renderer = sumIsHover\n         ? cellRenderers.percentage\n         : cellRenderers.increment;\n\n      return data.map((cellData, index) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         return (\n            <TableCell\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               cellHoverHandler={() =>\n                  findNearestValues(cellsSetting.cells, cellData.value)\n               }\n               Renderer={renderer}\n            />\n         );\n      });\n   };\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumMouseEnterHandler={() => setSumIsHover(true)}\n         sumMouseLeaveHandler={() => setSumIsHover(false)}\n      />\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n   const dispatch = useDispatch();\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}