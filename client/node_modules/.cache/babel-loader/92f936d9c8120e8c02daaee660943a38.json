{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({\n  rowCount,\n  data,\n  cellsSetting\n}) => {\n  const matrixData = useSelector(state => state.matrix.data);\n  const nearestValues = useSelector(state => state.matrix.nearestValues);\n  const dispatch = useDispatch();\n  const [sumIsHover, setSumIsHover] = useState(false); //TODO: move to the redux in the store\n\n  const findNearestValues = (cellsCount, currentValue) => {\n    if (+cellsCount === 0) {\n      return;\n    } else {\n      let sortedMatrix = matrixData.reduce((currentRow, nextRow) => currentRow.concat(nextRow)).sort((a, b) => a.value - b.value);\n      let nearestIds = [];\n      const iterationCount = cellsCount < sortedMatrix.length ? cellsCount : sortedMatrix.length - 1;\n      let indexCurrentValue = sortedMatrix.indexOf(sortedMatrix.find(item => item.value === currentValue));\n\n      const exclusionIds = indexCurrentValue => sortedMatrix.filter((item, index) => index !== indexCurrentValue).forEach(item => nearestIds.push(item.id));\n\n      const checkIndexValueExclusion = (index, count) => {\n        if (index === 0) {\n          sortedMatrix.splice(1, count).forEach(item => nearestIds.push(item.id));\n        } else if (index === sortedMatrix.length - 1) {\n          sortedMatrix.splice(-count - 1, count).forEach(item => nearestIds.push(item.id));\n        }\n      };\n\n      if (indexCurrentValue === 0) {\n        sortedMatrix.length - 1 === iterationCount ? exclusionIds(indexCurrentValue) : sortedMatrix.splice(1, iterationCount).forEach(item => nearestIds.push(item.id));\n      } else if (indexCurrentValue === sortedMatrix.length - 1) {\n        sortedMatrix.length - 1 === iterationCount ? exclusionIds(indexCurrentValue) : sortedMatrix.splice(-iterationCount - 1, iterationCount).forEach(item => nearestIds.push(item.id));\n      } else {\n        if (sortedMatrix.length - 1 === iterationCount) {\n          exclusionIds(indexCurrentValue);\n        } else {\n          for (let i = 0; i < iterationCount; i++) {\n            const sortedValues = sortedMatrix.map(data => data.value).sort((a, b) => a - b);\n            indexCurrentValue = sortedValues.indexOf(currentValue);\n\n            if (indexCurrentValue === 0 || indexCurrentValue === sortedMatrix.length - 1) {\n              checkIndexValueExclusion(indexCurrentValue, i);\n            }\n\n            const prevValue = sortedValues[indexCurrentValue - 1];\n            const nextValue = sortedValues[indexCurrentValue + 1];\n            const prevDiff = Math.abs(currentValue - prevValue);\n            const nextDiff = Math.abs(nextValue - currentValue);\n            const nearestValue = prevDiff < nextDiff ? prevValue : nextValue;\n            const nearestId = sortedMatrix.find(item => item.value === nearestValue).id;\n            console.log(i, nearestValue, nearestId, sortedValues);\n            nearestIds.push(nearestId);\n            console.log(sortedMatrix.find(item => item.id === nearestId));\n            sortedMatrix.splice(sortedMatrix.indexOf(sortedMatrix.find(item => item.id === nearestId)), 1);\n          }\n        }\n      }\n\n      return dispatch(setNearestValues(nearestIds));\n    }\n  };\n\n  const rowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  });\n\n  const rowCells = () => {\n    const renderer = sumIsHover ? cellRenderers.percentage : cellRenderers.increment;\n    return data.map((cellData, index) => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow); // const isNearest\n\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum,\n        cellHoverHandler: () => findNearestValues(cellsSetting, cellData.value),\n        Renderer: renderer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","useSelector","cellRenderers","removeRow","setNearestValues","CrossButton","TableCell","TableRow","rowCount","data","cellsSetting","matrixData","state","matrix","nearestValues","dispatch","sumIsHover","setSumIsHover","findNearestValues","cellsCount","currentValue","sortedMatrix","reduce","currentRow","nextRow","concat","sort","a","b","value","nearestIds","iterationCount","length","indexCurrentValue","indexOf","find","item","exclusionIds","filter","index","forEach","push","id","checkIndexValueExclusion","count","splice","i","sortedValues","map","prevValue","nextValue","prevDiff","Math","abs","nextDiff","nearestValue","nearestId","console","log","rowLabel","static","rowCells","renderer","percentage","increment","cellData","percentOfSum","round","sumRow","sum","sumRowCell","cells"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ rowCount, data, cellsSetting }) => {\n   const matrixData = useSelector((state) => state.matrix.data);\n   const nearestValues = useSelector((state) => state.matrix.nearestValues);\n   const dispatch = useDispatch();\n   const [sumIsHover, setSumIsHover] = useState(false);\n\n   //TODO: move to the redux in the store\n   const findNearestValues = (cellsCount, currentValue) => {\n      if (+cellsCount === 0) {\n         return;\n      } else {\n         let sortedMatrix = matrixData\n            .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n            .sort((a, b) => a.value - b.value);\n         let nearestIds = [];\n         const iterationCount =\n            cellsCount < sortedMatrix.length\n               ? cellsCount\n               : sortedMatrix.length - 1;\n         let indexCurrentValue = sortedMatrix.indexOf(\n            sortedMatrix.find((item) => item.value === currentValue)\n         );\n         const exclusionIds = (indexCurrentValue) =>\n            sortedMatrix\n               .filter((item, index) => index !== indexCurrentValue)\n               .forEach((item) => nearestIds.push(item.id));\n         const checkIndexValueExclusion = (index, count) => {\n            if (index === 0) {\n               sortedMatrix\n                  .splice(1, count)\n                  .forEach((item) => nearestIds.push(item.id));\n            } else if (index === sortedMatrix.length - 1) {\n               sortedMatrix\n                  .splice(-count - 1, count)\n                  .forEach((item) => nearestIds.push(item.id));\n            }\n         };\n         if (indexCurrentValue === 0) {\n            sortedMatrix.length - 1 === iterationCount\n               ? exclusionIds(indexCurrentValue)\n               : sortedMatrix\n                    .splice(1, iterationCount)\n                    .forEach((item) => nearestIds.push(item.id));\n         } else if (indexCurrentValue === sortedMatrix.length - 1) {\n            sortedMatrix.length - 1 === iterationCount\n               ? exclusionIds(indexCurrentValue)\n               : sortedMatrix\n                    .splice(-iterationCount - 1, iterationCount)\n                    .forEach((item) => nearestIds.push(item.id));\n         } else {\n            if (sortedMatrix.length - 1 === iterationCount) {\n               exclusionIds(indexCurrentValue);\n            } else {\n               for (let i = 0; i < iterationCount; i++) {\n                  const sortedValues = sortedMatrix\n                     .map((data) => data.value)\n                     .sort((a, b) => a - b);\n                  indexCurrentValue = sortedValues.indexOf(currentValue);\n                  if (\n                     indexCurrentValue === 0 ||\n                     indexCurrentValue === sortedMatrix.length - 1\n                  ) {\n                     checkIndexValueExclusion(indexCurrentValue, i);\n                  }\n                  const prevValue = sortedValues[indexCurrentValue - 1];\n                  const nextValue = sortedValues[indexCurrentValue + 1];\n                  const prevDiff = Math.abs(currentValue - prevValue);\n                  const nextDiff = Math.abs(nextValue - currentValue);\n                  const nearestValue =\n                     prevDiff < nextDiff ? prevValue : nextValue;\n                  const nearestId = sortedMatrix.find(\n                     (item) => item.value === nearestValue\n                  ).id;\n                  console.log(i, nearestValue, nearestId, sortedValues);\n                  nearestIds.push(nearestId);\n                  console.log(\n                     sortedMatrix.find((item) => item.id === nearestId)\n                  );\n                  sortedMatrix.splice(\n                     sortedMatrix.indexOf(\n                        sortedMatrix.find((item) => item.id === nearestId)\n                     ),\n                     1\n                  );\n               }\n            }\n         }\n         return dispatch(setNearestValues(nearestIds));\n      }\n   };\n   const rowLabel = (\n      <TableCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const rowCells = () => {\n      const renderer = sumIsHover\n         ? cellRenderers.percentage\n         : cellRenderers.increment;\n\n      return data.map((cellData, index) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         // const isNearest\n         return (\n            <TableCell\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               cellHoverHandler={() =>\n                  findNearestValues(cellsSetting, cellData.value)\n               }\n               Renderer={renderer}\n            />\n         );\n      });\n   };\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumMouseEnterHandler={() => setSumIsHover(true)}\n         sumMouseLeaveHandler={() => setSumIsHover(false)}\n      />\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}