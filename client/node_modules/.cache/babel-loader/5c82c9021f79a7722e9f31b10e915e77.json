{"ast":null,"code":"import { INCREMENT_CELL, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS, SET_SETTINGS, RESET_SETTINGS } from \"../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./matrixReducer/buildingMatrix\";\nimport defaultState from \"./matrixReducer/defaultState\";\nimport getIds from \"./matrixReducer/findNearestIds\";\nconst initialState = defaultState;\n\nconst sortData = data => {\n  if (data.length > 0) {\n    return data.flat().sort((a, b) => a.value - b.value);\n  }\n};\n\nconst incrementDataCell = (data, id) => {\n  let newData = [...data];\n  newData.find(row => row.find(item => item.id === id ? item.value++ : null));\n  return newData;\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_SETTINGS:\n      let data = [...state.data];\n      const newSettings = { ...action.settings\n      };\n\n      if (state.data.length === 0) {\n        data = createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n      } else if (state.settings.rowsCount !== newSettings.rowsCount || state.settings.columnsCount !== newSettings.columnsCount) {\n        data = rebuildMatrix([...state.data], state.settings, newSettings);\n      }\n\n      return { ...state,\n        data,\n        sortedData: sortData(data),\n        settings: newSettings\n      };\n\n    case RESET_SETTINGS:\n      return {\n        defaultState\n      };\n\n    case ADD_ROW:\n      return { ...state,\n        settings: { ...state.settings,\n          rowsCount: state.data.length\n        },\n        data: addRows([...state.data], 1, state.settings.columnsCount),\n        sortedData: sortData(state.data)\n      };\n\n    case REMOVE_ROW:\n      return { ...state,\n        settings: { ...state.settings,\n          rowsCount: state.data.length\n        },\n        data: state.data.filter((row, index) => index !== action.rowIndex),\n        sortedData: sortData(state.data)\n      };\n\n    case INCREMENT_CELL:\n      return { ...state,\n        data: incrementDataCell(state.data, action.id),\n        sortedData: sortData(state.data),\n        nearestIds: getIds(state.sortedData, state.settings.cellsCount, action.id)\n      };\n\n    case SET_NEAREST_IDS:\n      if (state.settings.cellsCount) {\n        return { ...state,\n          sortedData: sortData(state.data),\n          nearestIds: getIds(state.sortedData, state.settings.cellsCount, action.id)\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case RESET_NEAREST_IDS:\n      if (!!state.nearestIds.ids.length) {\n        return { ...state,\n          nearestIds: {\n            sameValueIds: [],\n            ids: []\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    default:\n      return defaultState;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","SET_SETTINGS","RESET_SETTINGS","createMatrix","rebuildMatrix","addRows","defaultState","getIds","initialState","sortData","data","length","flat","sort","a","b","value","incrementDataCell","id","newData","find","row","item","matrixReducer","state","action","type","newSettings","settings","rowsCount","columnsCount","sortedData","filter","index","rowIndex","nearestIds","cellsCount","ids","sameValueIds"],"mappings":"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","sourcesContent":["import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n   RESET_SETTINGS,\n} from \"../action_types\";\nimport {\n   createMatrix,\n   rebuildMatrix,\n   addRows,\n} from \"./matrixReducer/buildingMatrix\";\nimport defaultState from \"./matrixReducer/defaultState\";\nimport getIds from \"./matrixReducer/findNearestIds\";\n\nconst initialState = defaultState;\nconst sortData = (data) => {\n   if (data.length > 0) {\n      return data.flat().sort((a, b) => a.value - b.value);\n   }\n};\n\nconst incrementDataCell = (data, id) => {\n   let newData = [...data];\n   newData.find((row) =>\n      row.find((item) => (item.id === id ? item.value++ : null))\n   );\n   return newData;\n};\nconst matrixReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case SET_SETTINGS:\n         let data = [...state.data];\n         const newSettings = { ...action.settings };\n         if (state.data.length === 0) {\n            data = createMatrix(\n               newSettings.rowsCount,\n               newSettings.columnsCount\n            );\n         } else if (\n            state.settings.rowsCount !== newSettings.rowsCount ||\n            state.settings.columnsCount !== newSettings.columnsCount\n         ) {\n            data = rebuildMatrix([...state.data], state.settings, newSettings);\n         }\n         return {\n            ...state,\n            data,\n            sortedData: sortData(data),\n            settings: newSettings,\n         };\n      case RESET_SETTINGS:\n         return {\n            defaultState,\n         };\n      case ADD_ROW:\n         return {\n            ...state,\n            settings: { ...state.settings, rowsCount: state.data.length },\n            data: addRows([...state.data], 1, state.settings.columnsCount),\n            sortedData: sortData(state.data),\n         };\n      case REMOVE_ROW:\n         return {\n            ...state,\n            settings: { ...state.settings, rowsCount: state.data.length },\n            data: state.data.filter((row, index) => index !== action.rowIndex),\n            sortedData: sortData(state.data),\n         };\n      case INCREMENT_CELL:\n         return {\n            ...state,\n            data: incrementDataCell(state.data, action.id),\n            sortedData: sortData(state.data),\n            nearestIds: getIds(\n               state.sortedData,\n               state.settings.cellsCount,\n               action.id\n            ),\n         };\n      case SET_NEAREST_IDS:\n         if (state.settings.cellsCount) {\n            return {\n               ...state,\n               sortedData: sortData(state.data),\n               nearestIds: getIds(\n                  state.sortedData,\n                  state.settings.cellsCount,\n                  action.id\n               ),\n            };\n         } else {\n            return { ...state };\n         }\n\n      case RESET_NEAREST_IDS:\n         if (!!state.nearestIds.ids.length) {\n            return { ...state, nearestIds: { sameValueIds: [], ids: [] } };\n         } else {\n            return { ...state };\n         }\n      default:\n         return defaultState;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}