{"ast":null,"code":"const calculateAverageValues = matrixData => {\n  const matrixValuesOnly = matrixData.map(item => item.map(row => row.value));\n  let averageValues = [];\n\n  for (let columnIndex = 0; columnIndex < matrixValuesOnly[columnIndex].length; columnIndex++) {\n    let columnSum = 0;\n\n    for (let rowIndex = 0; rowIndex < matrixValuesOnly.length; rowIndex++) {\n      columnSum += matrixValuesOnly[rowIndex][columnIndex];\n    }\n\n    const average = columnSum / matrixValuesOnly.length;\n    averageValues.push(average);\n  }\n\n  console.log(averageValues);\n  return averageValues;\n};\n\nexport default calculateAverageValues;\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/calculateAverageValues.js"],"names":["calculateAverageValues","matrixData","matrixValuesOnly","map","item","row","value","averageValues","columnIndex","length","columnSum","rowIndex","average","push","console","log"],"mappings":"AAAA,MAAMA,sBAAsB,GAAIC,UAAD,IAAgB;AAC5C,QAAMC,gBAAgB,GAAGD,UAAU,CAACE,GAAX,CAAgBC,IAAD,IACrCA,IAAI,CAACD,GAAL,CAAUE,GAAD,IAASA,GAAG,CAACC,KAAtB,CADsB,CAAzB;AAGA,MAAIC,aAAa,GAAG,EAApB;;AACA,OACG,IAAIC,WAAW,GAAG,CADrB,EAEGA,WAAW,GAAGN,gBAAgB,CAACM,WAAD,CAAhB,CAA8BC,MAF/C,EAGGD,WAAW,EAHd,EAIE;AACC,QAAIE,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGT,gBAAgB,CAACO,MAAnD,EAA2DE,QAAQ,EAAnE,EAAuE;AACpED,MAAAA,SAAS,IAAIR,gBAAgB,CAACS,QAAD,CAAhB,CAA2BH,WAA3B,CAAb;AACF;;AACD,UAAMI,OAAO,GAAGF,SAAS,GAAGR,gBAAgB,CAACO,MAA7C;AACAF,IAAAA,aAAa,CAACM,IAAd,CAAmBD,OAAnB;AACF;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ;AACA,SAAOA,aAAP;AACF,CAnBD;;AAoBA,eAAeP,sBAAf;AAEA","sourcesContent":["const calculateAverageValues = (matrixData) => {\n   const matrixValuesOnly = matrixData.map((item) =>\n      item.map((row) => row.value)\n   );\n   let averageValues = [];\n   for (\n      let columnIndex = 0;\n      columnIndex < matrixValuesOnly[columnIndex].length;\n      columnIndex++\n   ) {\n      let columnSum = 0;\n      for (let rowIndex = 0; rowIndex < matrixValuesOnly.length; rowIndex++) {\n         columnSum += matrixValuesOnly[rowIndex][columnIndex];\n      }\n      const average = columnSum / matrixValuesOnly.length;\n      averageValues.push(average);\n   }\n   console.log(averageValues)\n   return averageValues;\n};\nexport default calculateAverageValues;\n\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */\n"]},"metadata":{},"sourceType":"module"}