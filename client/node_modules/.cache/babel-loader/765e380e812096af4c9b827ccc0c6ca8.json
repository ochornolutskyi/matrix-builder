{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({\n  rowCount,\n  data,\n  cellsSetting\n}) => {\n  const matrixData = useSelector(state => state.matrix.data);\n  const nearestValues = useSelector(state => state.matrix.nearestValues);\n  const dispatch = useDispatch();\n  const [sumIsHover, setSumIsHover] = useState(false);\n  /* //TODO: move to the redux in the store\n  const findNearestValues = (cellsCount, currentValue) => {\n     if (+cellsCount === 0) {\n        return;\n     } else {\n        let sortedMatrix = matrixData\n           .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n           .sort((a, b) => a.value - b.value);\n        let nearestIds = [];\n        const iterationCount =\n           cellsCount < sortedMatrix.length\n              ? cellsCount\n              : sortedMatrix.length - 1;\n        let indexCurrentValue = sortedMatrix.indexOf(\n           sortedMatrix.find((item) => item.value === currentValue)\n        );\n        const exclusionIds = (indexCurrentValue) =>\n           sortedMatrix\n              .filter((item, index) => index !== indexCurrentValue)\n              .forEach((item) => nearestIds.push(item.id));\n        if (indexCurrentValue === 0) {\n           sortedMatrix.length - 1 === iterationCount\n              ? exclusionIds(indexCurrentValue)\n              : sortedMatrix\n                   .splice(1, iterationCount)\n                   .forEach((item) => nearestIds.push(item.id));\n        } else if (indexCurrentValue === sortedMatrix.length - 1) {\n           sortedMatrix.length - 1 === iterationCount\n              ? exclusionIds(indexCurrentValue)\n              : sortedMatrix\n                   .splice(-iterationCount - 1, iterationCount)\n                   .forEach((item) => nearestIds.push(item.id));\n        } else {\n           if (sortedMatrix.length - 1 === iterationCount) {\n              exclusionIds(indexCurrentValue);\n           } else {\n              for (let i = 0; i < iterationCount; i++) {\n                 const sortedValues = sortedMatrix\n                    .map((data) => data.value)\n                    .sort((a, b) => a - b);\n                 indexCurrentValue = sortedValues.indexOf(currentValue);\n                 if (indexCurrentValue === 0) {\n                    sortedMatrix\n                       .splice(1, iterationCount - i)\n                       .forEach((item) => nearestIds.push(item.id));\n                    break;\n                 } else if (indexCurrentValue === sortedMatrix.length - 1) {\n                    sortedMatrix\n                       .splice(-iterationCount - i - 1, iterationCount - i)\n                       .forEach((item) => nearestIds.push(item.id));\n                    break;\n                 } else {\n                    const prevValue = sortedValues[indexCurrentValue - 1];\n                    const nextValue = sortedValues[indexCurrentValue + 1];\n                    const prevDiff = Math.abs(currentValue - prevValue);\n                    const nextDiff = Math.abs(nextValue - currentValue);\n                    const nearestValue =\n                       prevDiff < nextDiff ? prevValue : nextValue;\n                    const nearestId = sortedMatrix.find(\n                       (item) => item.value === nearestValue\n                    ).id;\n                    nearestIds.push(nearestId);\n                    sortedMatrix.splice(\n                       sortedMatrix.indexOf(\n                          sortedMatrix.find((item) => item.id === nearestId)\n                       ),\n                       1\n                    );\n                 }\n              }\n           }\n        }\n        return dispatch(setNearestValues(nearestIds));\n     }\n  };\n  const  */\n\n  const rowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  });\n\n  const rowCells = () => {\n    const renderer = sumIsHover ? cellRenderers.percentage : cellRenderers.increment;\n    return data.map((cellData, index) => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow); // const isNearest\n\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum,\n        cellHoverHandler: () => dispatch(setNearestValues(cellsSetting, cellData.value)),\n        Renderer: renderer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","useSelector","cellRenderers","removeRow","setNearestValues","CrossButton","TableCell","TableRow","rowCount","data","cellsSetting","matrixData","state","matrix","nearestValues","dispatch","sumIsHover","setSumIsHover","rowLabel","static","rowCells","renderer","percentage","increment","map","cellData","index","percentOfSum","Math","round","value","sumRow","id","reduce","sum","sumRowCell","cells"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ rowCount, data, cellsSetting }) => {\n   const matrixData = useSelector((state) => state.matrix.data);\n   const nearestValues = useSelector((state) => state.matrix.nearestValues);\n   const dispatch = useDispatch();\n   const [sumIsHover, setSumIsHover] = useState(false);\n\n   /* //TODO: move to the redux in the store\n   const findNearestValues = (cellsCount, currentValue) => {\n      if (+cellsCount === 0) {\n         return;\n      } else {\n         let sortedMatrix = matrixData\n            .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n            .sort((a, b) => a.value - b.value);\n         let nearestIds = [];\n         const iterationCount =\n            cellsCount < sortedMatrix.length\n               ? cellsCount\n               : sortedMatrix.length - 1;\n         let indexCurrentValue = sortedMatrix.indexOf(\n            sortedMatrix.find((item) => item.value === currentValue)\n         );\n         const exclusionIds = (indexCurrentValue) =>\n            sortedMatrix\n               .filter((item, index) => index !== indexCurrentValue)\n               .forEach((item) => nearestIds.push(item.id));\n         if (indexCurrentValue === 0) {\n            sortedMatrix.length - 1 === iterationCount\n               ? exclusionIds(indexCurrentValue)\n               : sortedMatrix\n                    .splice(1, iterationCount)\n                    .forEach((item) => nearestIds.push(item.id));\n         } else if (indexCurrentValue === sortedMatrix.length - 1) {\n            sortedMatrix.length - 1 === iterationCount\n               ? exclusionIds(indexCurrentValue)\n               : sortedMatrix\n                    .splice(-iterationCount - 1, iterationCount)\n                    .forEach((item) => nearestIds.push(item.id));\n         } else {\n            if (sortedMatrix.length - 1 === iterationCount) {\n               exclusionIds(indexCurrentValue);\n            } else {\n               for (let i = 0; i < iterationCount; i++) {\n                  const sortedValues = sortedMatrix\n                     .map((data) => data.value)\n                     .sort((a, b) => a - b);\n                  indexCurrentValue = sortedValues.indexOf(currentValue);\n                  if (indexCurrentValue === 0) {\n                     sortedMatrix\n                        .splice(1, iterationCount - i)\n                        .forEach((item) => nearestIds.push(item.id));\n                     break;\n                  } else if (indexCurrentValue === sortedMatrix.length - 1) {\n                     sortedMatrix\n                        .splice(-iterationCount - i - 1, iterationCount - i)\n                        .forEach((item) => nearestIds.push(item.id));\n                     break;\n                  } else {\n                     const prevValue = sortedValues[indexCurrentValue - 1];\n                     const nextValue = sortedValues[indexCurrentValue + 1];\n                     const prevDiff = Math.abs(currentValue - prevValue);\n                     const nextDiff = Math.abs(nextValue - currentValue);\n                     const nearestValue =\n                        prevDiff < nextDiff ? prevValue : nextValue;\n                     const nearestId = sortedMatrix.find(\n                        (item) => item.value === nearestValue\n                     ).id;\n                     nearestIds.push(nearestId);\n                     sortedMatrix.splice(\n                        sortedMatrix.indexOf(\n                           sortedMatrix.find((item) => item.id === nearestId)\n                        ),\n                        1\n                     );\n                  }\n               }\n            }\n         }\n         return dispatch(setNearestValues(nearestIds));\n      }\n   };\n   const  */\n   const rowLabel = (\n      <TableCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const rowCells = () => {\n      const renderer = sumIsHover\n         ? cellRenderers.percentage\n         : cellRenderers.increment;\n\n      return data.map((cellData, index) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         // const isNearest\n         return (\n            <TableCell\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               cellHoverHandler={() =>\n                  dispatch(setNearestValues(cellsSetting, cellData.value))\n               }\n               Renderer={renderer}\n            />\n         );\n      });\n   };\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumMouseEnterHandler={() => setSumIsHover(true)}\n         sumMouseLeaveHandler={() => setSumIsHover(false)}\n      />\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}