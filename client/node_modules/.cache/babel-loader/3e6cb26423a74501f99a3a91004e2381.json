{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({\n  rowCount,\n  data,\n  cellsSetting\n}) => {\n  const matrixData = useSelector(state => state.matrix.data);\n  const nearestValues = useSelector(state => state.matrix.nearestValues);\n  const dispatch = useDispatch();\n  const [sumIsHover, setSumIsHover] = useState(false); //TODO: move to the redux in the store\n\n  const findNearestValues = (cellsCount, currentValue) => {\n    if (+cellsCount === 0) {\n      return;\n    } else {\n      let sortedValues = matrixData.reduce((currentRow, nextRow) => currentRow.concat(nextRow)).map(data => data.value).sort((a, b) => a - b);\n      let nearestValues = [];\n      const iterationCount = cellsCount < sortedValues.length ? cellsCount : sortedValues.length - 1;\n\n      for (let i = 0; i < iterationCount; i++) {\n        const indexCurrentValue = sortedValues.indexOf(currentValue);\n\n        if (indexCurrentValue === 0) {\n          nearestValues.push(sortedValues[indexCurrentValue + 1]);\n          sortedValues.splice(indexCurrentValue + 1, 1);\n        } else if (indexCurrentValue === sortedValues.length - 1) {\n          nearestValues.push(sortedValues[indexCurrentValue - 1]);\n          sortedValues.splice(indexCurrentValue - 1, 1);\n        } else {\n          const prevValue = sortedValues[indexCurrentValue - 1];\n          const prevDiff = Math.abs(currentValue - prevValue);\n          const nextValue = sortedValues[indexCurrentValue + 1];\n          const nextDiff = Math.abs(nextValue - currentValue);\n          const nearest = prevDiff < nextDiff ? prevValue : nextValue;\n          console.log(matrixData.reduce((currentRow, nextRow) => currentRow.concat(nextRow)) // .find((item) => item.value)\n          );\n          nearestValues.push(nearest);\n          sortedValues.splice(sortedValues.indexOf(nearest), 1);\n        }\n      }\n\n      return dispatch(setNearestValues(nearestValues));\n    }\n  };\n\n  const rowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  });\n\n  const rowCells = () => {\n    const renderer = sumIsHover ? cellRenderers.percentage : cellRenderers.increment;\n    return data.map((cellData, index) => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow); // const isNearest\n\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum,\n        cellHoverHandler: () => findNearestValues(cellsSetting, cellData.value),\n        Renderer: renderer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","useSelector","cellRenderers","removeRow","setNearestValues","CrossButton","TableCell","TableRow","rowCount","data","cellsSetting","matrixData","state","matrix","nearestValues","dispatch","sumIsHover","setSumIsHover","findNearestValues","cellsCount","currentValue","sortedValues","reduce","currentRow","nextRow","concat","map","value","sort","a","b","iterationCount","length","i","indexCurrentValue","indexOf","push","splice","prevValue","prevDiff","Math","abs","nextValue","nextDiff","nearest","console","log","rowLabel","static","rowCells","renderer","percentage","increment","cellData","index","percentOfSum","round","sumRow","id","sum","sumRowCell","cells"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ rowCount, data, cellsSetting }) => {\n   const matrixData = useSelector((state) => state.matrix.data);\n   const nearestValues = useSelector((state) => state.matrix.nearestValues);\n   const dispatch = useDispatch();\n   const [sumIsHover, setSumIsHover] = useState(false);\n\n   //TODO: move to the redux in the store\n   const findNearestValues = (cellsCount, currentValue) => {\n      if (+cellsCount === 0) {\n         return;\n      } else {\n         let sortedValues = matrixData\n            .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n            .map((data) => data.value)\n            .sort((a, b) => a - b);\n         let nearestValues = [];\n         const iterationCount =\n            cellsCount < sortedValues.length\n               ? cellsCount\n               : sortedValues.length - 1;\n         for (let i = 0; i < iterationCount; i++) {\n            const indexCurrentValue = sortedValues.indexOf(currentValue);\n            if (indexCurrentValue === 0) {\n               nearestValues.push(sortedValues[indexCurrentValue + 1]);\n               sortedValues.splice(indexCurrentValue + 1, 1);\n            } else if (indexCurrentValue === sortedValues.length - 1) {\n               nearestValues.push(sortedValues[indexCurrentValue - 1]);\n               sortedValues.splice(indexCurrentValue - 1, 1);\n            } else {\n               const prevValue = sortedValues[indexCurrentValue - 1];\n               const prevDiff = Math.abs(currentValue - prevValue);\n               const nextValue = sortedValues[indexCurrentValue + 1];\n               const nextDiff = Math.abs(nextValue - currentValue);\n               const nearest = prevDiff < nextDiff ? prevValue : nextValue;\n               console.log(\n                  matrixData\n                     .reduce((currentRow, nextRow) =>\n                        currentRow.concat(nextRow)\n                     )\n                     // .find((item) => item.value)\n               );\n               nearestValues.push(nearest);\n               sortedValues.splice(sortedValues.indexOf(nearest), 1);\n            }\n         }\n\n         return dispatch(setNearestValues(nearestValues));\n      }\n   };\n   const rowLabel = (\n      <TableCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const rowCells = () => {\n      const renderer = sumIsHover\n         ? cellRenderers.percentage\n         : cellRenderers.increment;\n\n      return data.map((cellData, index) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         // const isNearest\n         return (\n            <TableCell\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               cellHoverHandler={() =>\n                  findNearestValues(cellsSetting, cellData.value)\n               }\n               Renderer={renderer}\n            />\n         );\n      });\n   };\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumMouseEnterHandler={() => setSumIsHover(true)}\n         sumMouseLeaveHandler={() => setSumIsHover(false)}\n      />\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}