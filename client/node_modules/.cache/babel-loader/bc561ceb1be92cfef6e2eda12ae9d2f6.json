{"ast":null,"code":"const calculateAverageValues = matrixData => {\n  const rowsValues = matrixData.map(item => item.map(row => row.value));\n  let averageValues = [];\n  console.log(rowsValues);\n\n  for (let i = 0; i < rowsValues.length; i++) {\n    let columnSum = 0;\n\n    for (let j = 0; j < rowsValues[i].length; j++) {\n      console.log(rowsValues[i][j], rowsValues[i + 1][j]); // columnSum += rowsValues[i][j] + rowsValues[i + 1][j];\n    } // const average = columnValues / matrixData.length;\n    // averageValues.push(average);\n\n  }\n\n  return averageValues;\n};\n\nexport default calculateAverageValues;\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/calculateAverageValues.js"],"names":["calculateAverageValues","matrixData","rowsValues","map","item","row","value","averageValues","console","log","i","length","columnSum","j"],"mappings":"AAAA,MAAMA,sBAAsB,GAAIC,UAAD,IAAgB;AAC5C,QAAMC,UAAU,GAAGD,UAAU,CAACE,GAAX,CAAgBC,IAAD,IAAUA,IAAI,CAACD,GAAL,CAAUE,GAAD,IAASA,GAAG,CAACC,KAAtB,CAAzB,CAAnB;AACA,MAAIC,aAAa,GAAG,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;;AACA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,UAAU,CAACS,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACzC,QAAIE,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,UAAU,CAACQ,CAAD,CAAV,CAAcC,MAAlC,EAA0CE,CAAC,EAA3C,EAA+C;AAC5CL,MAAAA,OAAO,CAACC,GAAR,CAAYP,UAAU,CAACQ,CAAD,CAAV,CAAcG,CAAd,CAAZ,EAA8BX,UAAU,CAACQ,CAAC,GAAG,CAAL,CAAV,CAAkBG,CAAlB,CAA9B,EAD4C,CAE5C;AACF,KALwC,CAMzC;AACA;;AACF;;AACD,SAAON,aAAP;AACF,CAdD;;AAeA,eAAeP,sBAAf;AAEA","sourcesContent":["const calculateAverageValues = (matrixData) => {\n   const rowsValues = matrixData.map((item) => item.map((row) => row.value));\n   let averageValues = [];\n   console.log(rowsValues);\n   for (let i = 0; i < rowsValues.length; i++) {\n      let columnSum = 0;\n      for (let j = 0; j < rowsValues[i].length; j++) {\n         console.log(rowsValues[i][j] ,rowsValues[i + 1][j])\n         // columnSum += rowsValues[i][j] + rowsValues[i + 1][j];\n      }\n      // const average = columnValues / matrixData.length;\n      // averageValues.push(average);\n   }\n   return averageValues;\n};\nexport default calculateAverageValues;\n\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */\n"]},"metadata":{},"sourceType":"module"}