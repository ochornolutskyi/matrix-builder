{"ast":null,"code":"const addCells = (columnsCount, row = [], step = 0) => {\n  while (step < columnsCount) {\n    row.push({\n      id: `${Date.now()}${Math.round(1 + Math.random() * 9999)}${step}`,\n      value: Math.round(100 + Math.random() * 899)\n    });\n    step++;\n  }\n\n  return row;\n};\n\nexport const addRows = (data, rowsCount, columnsCount, step = 0) => {\n  let matrixData = [...data];\n\n  while (step < rowsCount) {\n    const rowCells = addCells(columnsCount);\n    matrixData.push(rowCells);\n    step++;\n  }\n\n  return matrixData;\n};\nexport const createMatrix = (rowsCount, columnsCount, data = []) => {\n  return addRows(data, rowsCount, columnsCount);\n};\n\nconst rebuildColumns = (data, prevSettings, newSettings) => {\n  let columnsCountDiff = 0;\n\n  if (prevSettings.columnsCount < newSettings.columnsCount) {\n    columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n    data.forEach((row, index) => addCells(columnsCountDiff, row));\n  } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n    columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n    data.forEach(row => row.splice(-columnsCountDiff));\n  }\n\n  return data;\n};\n\nconst rebuildRows = (data, prevSettings, newSettings) => {\n  console.log('buildrows');\n  let rowsCountDiff = 0;\n\n  if (prevSettings.rowsCount < newSettings.rowsCount) {\n    rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n    addRows(data, rowsCountDiff, newSettings.columnsCount);\n  } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n    rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n    data.splice(-rowsCountDiff);\n  }\n\n  return data;\n};\n\nexport const rebuildMatrix = (data, prevSettings, newSettings) => {\n  let matrixData = [...data];\n  rebuildColumns(matrixData, prevSettings, newSettings);\n  rebuildRows(matrixData, prevSettings, newSettings);\n  return data;\n};","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer/building.js"],"names":["addCells","columnsCount","row","step","push","id","Date","now","Math","round","random","value","addRows","data","rowsCount","matrixData","rowCells","createMatrix","rebuildColumns","prevSettings","newSettings","columnsCountDiff","forEach","index","splice","rebuildRows","console","log","rowsCountDiff","rebuildMatrix"],"mappings":"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","sourcesContent":["const addCells = (columnsCount, row = [], step = 0) => {\n   while (step < columnsCount) {\n      row.push({\n         id: `${Date.now()}${Math.round(1 + Math.random() * 9999)}${step}`,\n         value: Math.round(100 + Math.random() * 899),\n      });\n      step++;\n   }\n   return row;\n};\nexport const addRows = (data, rowsCount, columnsCount, step = 0) => {\n   let matrixData = [...data];\n   while (step < rowsCount) {\n      const rowCells = addCells(columnsCount);\n      matrixData.push(rowCells);\n      step++;\n   }\n   return matrixData;\n};\nexport const createMatrix = (rowsCount, columnsCount, data = []) => {\n   return addRows(data, rowsCount, columnsCount);\n};\nconst rebuildColumns = (data, prevSettings, newSettings) => {\n   let columnsCountDiff = 0;\n   if (prevSettings.columnsCount < newSettings.columnsCount) {\n      columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n      data.forEach((row, index) => addCells(columnsCountDiff, row));\n   } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n      columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n      data.forEach((row) => row.splice(-columnsCountDiff));\n   }\n   return data;\n};\nconst rebuildRows = (data, prevSettings, newSettings) => {\n   console.log('buildrows')\n   let rowsCountDiff = 0;\n   if (prevSettings.rowsCount < newSettings.rowsCount) {\n      rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n      addRows(data, rowsCountDiff, newSettings.columnsCount);\n   } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n      rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n      data.splice(-rowsCountDiff);\n   }\n   return data;\n};\nexport const rebuildMatrix = (data, prevSettings, newSettings) => {\n   let matrixData = [...data];\n   rebuildColumns(matrixData, prevSettings, newSettings);\n   rebuildRows(matrixData, prevSettings, newSettings);\n   return data;\n};\n"]},"metadata":{},"sourceType":"module"}