{"ast":null,"code":"import { INCREMENT_CELL, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS, SET_SETTINGS, RESET_SETTINGS } from \"../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./matrixReducer/buildingMatrix\";\nimport defaultState from \"./matrixReducer/defaultState\";\nimport getIds from \"./matrixReducer/findNearestIds\";\nconst initialState = defaultState;\n\nconst sortData = data => {\n  if (data.length > 0) {\n    return data.flat().sort((a, b) => a.value - b.value);\n  }\n};\n\nconst checkMatrixData = (data, settings, newSettings) => {\n  if (data.length === 0) {\n    return createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n  } else if (settings.rowsCount !== newSettings.rowsCount || settings.columnsCount !== newSettings.columnsCount) {\n    return rebuildMatrix(data, settings, newSettings);\n  } else {\n    return data;\n  }\n};\n\nconst incrementDataCell = (data, id) => {\n  console.log(data.filter(item => item.find(row => row.id === id)));\n  return data;\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  let data, sortedData, settings;\n\n  switch (action.type) {\n    case SET_SETTINGS:\n      const newSettings = { ...action.settings\n      };\n      settings = { ...state.settings\n      };\n      data = checkMatrixData([...state.data], settings, newSettings);\n      settings = newSettings;\n      return { ...state,\n        data,\n        sortedData: sortData(data),\n        settings\n      };\n\n    case RESET_SETTINGS:\n      return {\n        defaultState\n      };\n\n    case ADD_ROW:\n      data = addRows([...state.data], 1, state.settings.columnsCount);\n      settings = { ...state.settings,\n        rowsCount: data.length\n      };\n      return { ...state,\n        settings,\n        data,\n        sortedData: sortData(data)\n      };\n\n    case REMOVE_ROW:\n      data = state.data.filter((row, index) => index !== action.rowIndex);\n      settings = { ...state.settings,\n        rowsCount: state.data.length\n      };\n      return { ...state,\n        settings,\n        data,\n        sortedData: sortData(data)\n      };\n\n    case INCREMENT_CELL:\n      data = incrementDataCell([...state.data], action.id);\n      console.log(data);\n      sortedData = sortData(data);\n      return { ...state,\n        data,\n        sortedData,\n        nearestIds: getIds(sortedData, state.settings.cellsCount, action.id)\n      };\n\n    case SET_NEAREST_IDS:\n      if (state.settings.cellsCount) {\n        return { ...state,\n          nearestIds: getIds(state.sortedData, state.settings.cellsCount, action.id)\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case RESET_NEAREST_IDS:\n      if (!!state.nearestIds.ids.length) {\n        return { ...state,\n          nearestIds: {\n            sameValueIds: [],\n            ids: []\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    default:\n      return defaultState;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","SET_SETTINGS","RESET_SETTINGS","createMatrix","rebuildMatrix","addRows","defaultState","getIds","initialState","sortData","data","length","flat","sort","a","b","value","checkMatrixData","settings","newSettings","rowsCount","columnsCount","incrementDataCell","id","console","log","filter","item","find","row","matrixReducer","state","action","sortedData","type","index","rowIndex","nearestIds","cellsCount","ids","sameValueIds"],"mappings":"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","sourcesContent":["import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n   RESET_SETTINGS,\n} from \"../action_types\";\nimport {\n   createMatrix,\n   rebuildMatrix,\n   addRows,\n} from \"./matrixReducer/buildingMatrix\";\nimport defaultState from \"./matrixReducer/defaultState\";\nimport getIds from \"./matrixReducer/findNearestIds\";\n\nconst initialState = defaultState;\nconst sortData = (data) => {\n   if (data.length > 0) {\n      return data.flat().sort((a, b) => a.value - b.value);\n   }\n};\nconst checkMatrixData = (data, settings, newSettings) => {\n   if (data.length === 0) {\n      return createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n   } else if (\n      settings.rowsCount !== newSettings.rowsCount ||\n      settings.columnsCount !== newSettings.columnsCount\n   ) {\n      return rebuildMatrix(data, settings, newSettings);\n   } else {\n      return data;\n   }\n};\nconst incrementDataCell = (data, id) => {\n   console.log(data.filter((item) => item.find((row) => row.id === id)));\n   return data;\n};\nconst matrixReducer = (state = initialState, action) => {\n   let data, sortedData, settings;\n   switch (action.type) {\n      case SET_SETTINGS:\n         const newSettings = { ...action.settings };\n         settings = { ...state.settings };\n         data = checkMatrixData([...state.data], settings, newSettings);\n         settings = newSettings;\n         return {\n            ...state,\n            data,\n            sortedData: sortData(data),\n            settings,\n         };\n      case RESET_SETTINGS:\n         return {\n            defaultState,\n         };\n      case ADD_ROW:\n         data = addRows([...state.data], 1, state.settings.columnsCount);\n         settings = { ...state.settings, rowsCount: data.length };\n         return {\n            ...state,\n            settings,\n            data,\n            sortedData: sortData(data),\n         };\n      case REMOVE_ROW:\n         data = state.data.filter((row, index) => index !== action.rowIndex);\n         settings = { ...state.settings, rowsCount: state.data.length };\n         return {\n            ...state,\n            settings,\n            data,\n            sortedData: sortData(data),\n         };\n      case INCREMENT_CELL:\n         data = incrementDataCell([...state.data], action.id);\n         console.log(data);\n         sortedData = sortData(data);\n         return {\n            ...state,\n            data,\n            sortedData,\n            nearestIds: getIds(\n               sortedData,\n               state.settings.cellsCount,\n               action.id\n            ),\n         };\n      case SET_NEAREST_IDS:\n         if (state.settings.cellsCount) {\n            return {\n               ...state,\n               nearestIds: getIds(\n                  state.sortedData,\n                  state.settings.cellsCount,\n                  action.id\n               ),\n            };\n         } else {\n            return { ...state };\n         }\n\n      case RESET_NEAREST_IDS:\n         if (!!state.nearestIds.ids.length) {\n            return { ...state, nearestIds: { sameValueIds: [], ids: [] } };\n         } else {\n            return { ...state };\n         }\n      default:\n         return defaultState;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}