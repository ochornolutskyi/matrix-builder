{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst findNearestValues = (matrixData, cellsCount, currentValue) => {\n  if (+cellsCount === 0) {\n    return;\n  } else {\n    let sortedValues = matrixData.reduce((currentRow, nextRow) => currentRow.concat(nextRow)).map(data => data.value).sort((a, b) => a - b);\n    let nearestValues = [];\n    const iterationCount = cellsCount < sortedValues.length ? cellsCount : sortedValues.length - 1;\n\n    for (let i = 0; i < iterationCount; i++) {\n      const indexCurrentValue = sortedValues.indexOf(currentValue);\n\n      if (indexCurrentValue === 0) {\n        nearestValues.push(sortedValues[indexCurrentValue + 1]);\n        sortedValues.splice(indexCurrentValue + 1, 1);\n      } else if (indexCurrentValue === sortedValues.length - 1) {\n        nearestValues.push(sortedValues[indexCurrentValue - 1]);\n        sortedValues.splice(indexCurrentValue - 1, 1);\n      } else {\n        const prevValue = sortedValues[indexCurrentValue - 1];\n        const prevDiff = Math.abs(currentValue - prevValue);\n        const nextValue = sortedValues[indexCurrentValue + 1];\n        const nextDiff = Math.abs(nextValue - currentValue);\n        const nearest = prevDiff < nextDiff ? prevValue : nextValue;\n        nearestValues.push(nearest);\n        sortedValues.splice(sortedValues.indexOf(nearest), 1);\n      }\n    }\n\n    return dispatch(setNearestValues(nearestValues));\n  }\n};\n\nconst TableRow = ({\n  rowCount,\n  data,\n  cellsSetting\n}) => {\n  const matrixData = useSelector(state => state.matrix.data);\n  const nearestValues = useSelector(state => state.matrix.nearestValues);\n  const dispatch = useDispatch();\n  const [sumIsHover, setSumIsHover] = useState(false);\n  const rowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  });\n\n  const rowCells = () => {\n    const renderer = sumIsHover ? cellRenderers.percentage : cellRenderers.increment;\n    return data.map((cellData, index) => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow);\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum,\n        cellHoverHandler: () => findNearestValues(cellsSetting, cellData.value),\n        Renderer: renderer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","useSelector","cellRenderers","removeRow","setNearestValues","CrossButton","TableCell","findNearestValues","matrixData","cellsCount","currentValue","sortedValues","reduce","currentRow","nextRow","concat","map","data","value","sort","a","b","nearestValues","iterationCount","length","i","indexCurrentValue","indexOf","push","splice","prevValue","prevDiff","Math","abs","nextValue","nextDiff","nearest","dispatch","TableRow","rowCount","cellsSetting","state","matrix","sumIsHover","setSumIsHover","rowLabel","static","rowCells","renderer","percentage","increment","cellData","index","percentOfSum","round","sumRow","id","sum","sumRowCell","cells"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,8BAA5C;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBC,YAAzB,KAA0C;AACjE,MAAI,CAACD,UAAD,KAAgB,CAApB,EAAuB;AACpB;AACF,GAFD,MAEO;AACJ,QAAIE,YAAY,GAAGH,UAAU,CACzBI,MADe,CACR,CAACC,UAAD,EAAaC,OAAb,KAAyBD,UAAU,CAACE,MAAX,CAAkBD,OAAlB,CADjB,EAEfE,GAFe,CAEVC,IAAD,IAAUA,IAAI,CAACC,KAFJ,EAGfC,IAHe,CAGV,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHJ,CAAnB;AAIA,QAAIC,aAAa,GAAG,EAApB;AACA,UAAMC,cAAc,GACjBd,UAAU,GAAGE,YAAY,CAACa,MAA1B,GACKf,UADL,GAEKE,YAAY,CAACa,MAAb,GAAsB,CAH9B;;AAIA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,EAArC,EAAyC;AACtC,YAAMC,iBAAiB,GAAGf,YAAY,CAACgB,OAAb,CAAqBjB,YAArB,CAA1B;;AACA,UAAIgB,iBAAiB,KAAK,CAA1B,EAA6B;AAC1BJ,QAAAA,aAAa,CAACM,IAAd,CAAmBjB,YAAY,CAACe,iBAAiB,GAAG,CAArB,CAA/B;AACAf,QAAAA,YAAY,CAACkB,MAAb,CAAoBH,iBAAiB,GAAG,CAAxC,EAA2C,CAA3C;AACF,OAHD,MAGO,IAAIA,iBAAiB,KAAKf,YAAY,CAACa,MAAb,GAAsB,CAAhD,EAAmD;AACvDF,QAAAA,aAAa,CAACM,IAAd,CAAmBjB,YAAY,CAACe,iBAAiB,GAAG,CAArB,CAA/B;AACAf,QAAAA,YAAY,CAACkB,MAAb,CAAoBH,iBAAiB,GAAG,CAAxC,EAA2C,CAA3C;AACF,OAHM,MAGA;AACJ,cAAMI,SAAS,GAAGnB,YAAY,CAACe,iBAAiB,GAAG,CAArB,CAA9B;AACA,cAAMK,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASvB,YAAY,GAAGoB,SAAxB,CAAjB;AACA,cAAMI,SAAS,GAAGvB,YAAY,CAACe,iBAAiB,GAAG,CAArB,CAA9B;AACA,cAAMS,QAAQ,GAAGH,IAAI,CAACC,GAAL,CAASC,SAAS,GAAGxB,YAArB,CAAjB;AACA,cAAM0B,OAAO,GAAGL,QAAQ,GAAGI,QAAX,GAAsBL,SAAtB,GAAkCI,SAAlD;AACAZ,QAAAA,aAAa,CAACM,IAAd,CAAmBQ,OAAnB;AACAzB,QAAAA,YAAY,CAACkB,MAAb,CAAoBlB,YAAY,CAACgB,OAAb,CAAqBS,OAArB,CAApB,EAAmD,CAAnD;AACF;AACH;;AACD,WAAOC,QAAQ,CAACjC,gBAAgB,CAACkB,aAAD,CAAjB,CAAf;AACF;AACH,CAjCD;;AAmCA,MAAMgB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYtB,EAAAA,IAAZ;AAAkBuB,EAAAA;AAAlB,CAAD,KAAsC;AACpD,QAAMhC,UAAU,GAAGP,WAAW,CAAEwC,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAazB,IAAzB,CAA9B;AACA,QAAMK,aAAa,GAAGrB,WAAW,CAAEwC,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAapB,aAAzB,CAAjC;AACA,QAAMe,QAAQ,GAAGrC,WAAW,EAA5B;AACA,QAAM,CAAC2C,UAAD,EAAaC,aAAb,IAA8B7C,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAM8C,QAAQ,gBACX,oBAAC,SAAD;AACG,IAAA,GAAG,EAAEN,QADR;AAEG,IAAA,KAAK,EAAEA,QAFV;AAGG,IAAA,QAAQ,EAAErC,aAAa,CAAC4C,MAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;;AAOA,QAAMC,QAAQ,GAAG,MAAM;AACpB,UAAMC,QAAQ,GAAGL,UAAU,GACtBzC,aAAa,CAAC+C,UADQ,GAEtB/C,aAAa,CAACgD,SAFnB;AAIA,WAAOjC,IAAI,CAACD,GAAL,CAAS,CAACmC,QAAD,EAAWC,KAAX,KAAqB;AAClC,YAAMC,YAAY,GAAGrB,IAAI,CAACsB,KAAL,CAAYH,QAAQ,CAACjC,KAAT,GAAiB,GAAlB,GAAyBqC,MAApC,CAArB;AACA,0BACG,oBAAC,SAAD;AACG,QAAA,GAAG,EAAEJ,QAAQ,CAACK,EADjB;AAEG,QAAA,EAAE,EAAEL,QAAQ,CAACK,EAFhB;AAGG,QAAA,KAAK,EAAEL,QAAQ,CAACjC,KAHnB;AAIG,QAAA,OAAO,EAAEmC,YAJZ;AAKG,QAAA,gBAAgB,EAAE,MACf9C,iBAAiB,CAACiC,YAAD,EAAeW,QAAQ,CAACjC,KAAxB,CANvB;AAQG,QAAA,QAAQ,EAAE8B,QARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH;AAYF,KAdM,CAAP;AAeF,GApBD;;AAqBA,QAAMO,MAAM,GAAGtC,IAAI,CACfD,GADW,CACNC,IAAD,IAAUA,IAAI,CAACC,KADR,EAEXN,MAFW,CAEJ,CAAC6C,GAAG,GAAG,CAAP,EAAUvC,KAAV,KAAoBuC,GAAG,GAAGvC,KAFtB,CAAf;AAGA,QAAMwC,UAAU,gBACb,oBAAC,SAAD;AACG,IAAA,GAAG,EAAEH,MADR;AAEG,IAAA,KAAK,EAAEA,MAFV;AAGG,IAAA,QAAQ,EAAErD,aAAa,CAACuD,GAH3B;AAIG,IAAA,oBAAoB,EAAE,MAAMb,aAAa,CAAC,IAAD,CAJ5C;AAKG,IAAA,oBAAoB,EAAE,MAAMA,aAAa,CAAC,KAAD,CAL5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AASA,QAAMe,KAAK,GAAG,CAACd,QAAD,EAAW,GAAGE,QAAQ,EAAtB,EAA0BW,UAA1B,CAAd;AAEA,sBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,KADJ,eAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,WAAD;AACG,IAAA,kBAAkB,EAAE,MAAMtB,QAAQ,CAAClC,SAAS,CAACoC,QAAD,CAAV,CADrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAFH,CADH;AAUF,CA1DD;;AA4DA,eAAeD,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst findNearestValues = (matrixData, cellsCount, currentValue) => {\n   if (+cellsCount === 0) {\n      return;\n   } else {\n      let sortedValues = matrixData\n         .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n         .map((data) => data.value)\n         .sort((a, b) => a - b);\n      let nearestValues = [];\n      const iterationCount =\n         cellsCount < sortedValues.length\n            ? cellsCount\n            : sortedValues.length - 1;\n      for (let i = 0; i < iterationCount; i++) {\n         const indexCurrentValue = sortedValues.indexOf(currentValue);\n         if (indexCurrentValue === 0) {\n            nearestValues.push(sortedValues[indexCurrentValue + 1]);\n            sortedValues.splice(indexCurrentValue + 1, 1);\n         } else if (indexCurrentValue === sortedValues.length - 1) {\n            nearestValues.push(sortedValues[indexCurrentValue - 1]);\n            sortedValues.splice(indexCurrentValue - 1, 1);\n         } else {\n            const prevValue = sortedValues[indexCurrentValue - 1];\n            const prevDiff = Math.abs(currentValue - prevValue);\n            const nextValue = sortedValues[indexCurrentValue + 1];\n            const nextDiff = Math.abs(nextValue - currentValue);\n            const nearest = prevDiff < nextDiff ? prevValue : nextValue;\n            nearestValues.push(nearest);\n            sortedValues.splice(sortedValues.indexOf(nearest), 1);\n         }\n      }\n      return dispatch(setNearestValues(nearestValues));\n   }\n};\n\nconst TableRow = ({ rowCount, data, cellsSetting }) => {\n   const matrixData = useSelector((state) => state.matrix.data);\n   const nearestValues = useSelector((state) => state.matrix.nearestValues);\n   const dispatch = useDispatch();\n   const [sumIsHover, setSumIsHover] = useState(false);\n\n   const rowLabel = (\n      <TableCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const rowCells = () => {\n      const renderer = sumIsHover\n         ? cellRenderers.percentage\n         : cellRenderers.increment;\n\n      return data.map((cellData, index) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         return (\n            <TableCell\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               cellHoverHandler={() =>\n                  findNearestValues(cellsSetting, cellData.value)\n               }\n               Renderer={renderer}\n            />\n         );\n      });\n   };\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumMouseEnterHandler={() => setSumIsHover(true)}\n         sumMouseLeaveHandler={() => setSumIsHover(false)}\n      />\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}