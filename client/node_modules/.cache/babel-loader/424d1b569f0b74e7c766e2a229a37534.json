{"ast":null,"code":"import { INCREMENT_CELL, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS, SET_SETTINGS, RESET_SETTINGS } from \"../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./matrixReducer/buildingMatrix\";\nimport defaultState from \"./matrixReducer/defaultState\";\nimport getIds from \"./matrixReducer/findNearestIds\";\nconst initialState = defaultState;\n\nconst sortData = data => data.flat().sort((a, b) => a.value - b.value);\n\nconst checkMatrixData = (data, settings, newSettings) => {\n  if (data.length === 0) {\n    return createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n  } else if (settings.rowsCount !== newSettings.rowsCount || settings.columnsCount !== newSettings.columnsCount) {\n    return rebuildMatrix(data, settings, newSettings);\n  } else {\n    return data;\n  }\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  let data, sortedData, settings;\n\n  switch (action.type) {\n    case SET_SETTINGS:\n      const newSettings = { ...action.settings\n      };\n      settings = { ...state.settings\n      };\n      data = checkMatrixData([...state.data], settings, newSettings);\n      settings = newSettings;\n      return { ...state,\n        data,\n        sortedData: sortData(data),\n        settings\n      };\n\n    case RESET_SETTINGS:\n      return {\n        defaultState\n      };\n\n    case ADD_ROW:\n      data = addRows([...state.data], 1, state.settings.columnsCount);\n      settings = { ...state.settings,\n        rowsCount: data.length\n      };\n      return { ...state,\n        settings,\n        data,\n        sortedData: sortData(data)\n      };\n\n    case REMOVE_ROW:\n      data = state.data.filter((row, index) => index !== action.rowIndex);\n      settings = { ...state.settings,\n        rowsCount: state.data.length\n      };\n      return { ...state,\n        settings,\n        data,\n        sortedData: sortData(data)\n      };\n\n    case INCREMENT_CELL:\n      data = [...state.data];\n      data.find(row => row.find(item => item.id === action.id ? item.value++ : null));\n      sortedData = sortData(data);\n      return { ...state,\n        data,\n        sortedData,\n        nearestIds: getIds(sortedData, state.settings.cellsCount, action.id)\n      };\n\n    case SET_NEAREST_IDS:\n      if (state.settings.cellsCount) {\n        return { ...state,\n          nearestIds: getIds(state.sortedData, state.settings.cellsCount, action.id)\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case RESET_NEAREST_IDS:\n      if (!!state.nearestIds.ids.length) {\n        return { ...state,\n          nearestIds: {\n            sameValueIds: [],\n            ids: []\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    default:\n      return defaultState;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","SET_SETTINGS","RESET_SETTINGS","createMatrix","rebuildMatrix","addRows","defaultState","getIds","initialState","sortData","data","flat","sort","a","b","value","checkMatrixData","settings","newSettings","length","rowsCount","columnsCount","matrixReducer","state","action","sortedData","type","filter","row","index","rowIndex","find","item","id","nearestIds","cellsCount","ids","sameValueIds"],"mappings":"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","sourcesContent":["import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n   RESET_SETTINGS,\n} from \"../action_types\";\nimport {\n   createMatrix,\n   rebuildMatrix,\n   addRows,\n} from \"./matrixReducer/buildingMatrix\";\nimport defaultState from \"./matrixReducer/defaultState\";\nimport getIds from \"./matrixReducer/findNearestIds\";\n\nconst initialState = defaultState;\nconst sortData = (data) => data.flat().sort((a, b) => a.value - b.value);\n\nconst checkMatrixData = (data, settings, newSettings) => {\n   if (data.length === 0) {\n      return createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n   } else if (\n      settings.rowsCount !== newSettings.rowsCount ||\n      settings.columnsCount !== newSettings.columnsCount\n   ) {\n      return rebuildMatrix(data, settings, newSettings);\n   } else {\n      return data;\n   }\n};\n\nconst matrixReducer = (state = initialState, action) => {\n   let data, sortedData, settings;\n   switch (action.type) {\n      case SET_SETTINGS:\n         const newSettings = { ...action.settings };\n         settings = { ...state.settings };\n         data = checkMatrixData([...state.data], settings, newSettings);\n         settings = newSettings;\n         return {\n            ...state,\n            data,\n            sortedData: sortData(data),\n            settings,\n         };\n      case RESET_SETTINGS:\n         return {\n            defaultState,\n         };\n      case ADD_ROW:\n         data = addRows([...state.data], 1, state.settings.columnsCount);\n         settings = { ...state.settings, rowsCount: data.length };\n         return {\n            ...state,\n            settings,\n            data,\n            sortedData: sortData(data),\n         };\n      case REMOVE_ROW:\n         data = state.data.filter((row, index) => index !== action.rowIndex);\n         settings = { ...state.settings, rowsCount: state.data.length };\n         return {\n            ...state,\n            settings,\n            data,\n            sortedData: sortData(data),\n         };\n      case INCREMENT_CELL:\n         data = [...state.data];\n         data.find((row) =>\n            row.find((item) => (item.id === action.id ? item.value++ : null))\n         );\n         sortedData = sortData(data);\n         return {\n            ...state,\n            data,\n            sortedData,\n            nearestIds: getIds(\n               sortedData,\n               state.settings.cellsCount,\n               action.id\n            ),\n         };\n      case SET_NEAREST_IDS:\n         if (state.settings.cellsCount) {\n            return {\n               ...state,\n               nearestIds: getIds(\n                  state.sortedData,\n                  state.settings.cellsCount,\n                  action.id\n               ),\n            };\n         } else {\n            return { ...state };\n         }\n\n      case RESET_NEAREST_IDS:\n         if (!!state.nearestIds.ids.length) {\n            return { ...state, nearestIds: { sameValueIds: [], ids: [] } };\n         } else {\n            return { ...state };\n         }\n      default:\n         return defaultState;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}