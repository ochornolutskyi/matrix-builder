{"ast":null,"code":"const calculateAverageValues = matrixData => {\n  const matrixValuesOnly = matrixData.map(item => item.map(row => row.value));\n  const columnsNumber = matrixValuesOnly[0].length;\n  let averageValues = [];\n\n  for (let columnIndex = 0; columnIndex < columnsNumber; columnIndex++) {\n    let columnSum = 0;\n\n    for (let rowIndex = 0; rowIndex < matrixValuesOnly.length; rowIndex++) {\n      columnSum += matrixValuesOnly[rowIndex][columnIndex];\n    }\n\n    const average = columnSum / matrixValuesOnly.length;\n    averageValues.push(average);\n  }\n\n  return averageValues.map(avgValue => avgValue.toFixed(2));\n};\n\nexport default calculateAverageValues;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/calculateAverageValues.js"],"names":["calculateAverageValues","matrixData","matrixValuesOnly","map","item","row","value","columnsNumber","length","averageValues","columnIndex","columnSum","rowIndex","average","push","avgValue","toFixed"],"mappings":"AAAA,MAAMA,sBAAsB,GAAIC,UAAD,IAAgB;AAC5C,QAAMC,gBAAgB,GAAGD,UAAU,CAACE,GAAX,CAAgBC,IAAD,IACrCA,IAAI,CAACD,GAAL,CAAUE,GAAD,IAASA,GAAG,CAACC,KAAtB,CADsB,CAAzB;AAGA,QAAMC,aAAa,GAAGL,gBAAgB,CAAC,CAAD,CAAhB,CAAoBM,MAA1C;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGH,aAAxC,EAAuDG,WAAW,EAAlE,EAAsE;AACnE,QAAIC,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGV,gBAAgB,CAACM,MAAnD,EAA2DI,QAAQ,EAAnE,EAAuE;AACpED,MAAAA,SAAS,IAAIT,gBAAgB,CAACU,QAAD,CAAhB,CAA2BF,WAA3B,CAAb;AACF;;AACD,UAAMG,OAAO,GAAGF,SAAS,GAAGT,gBAAgB,CAACM,MAA7C;AACAC,IAAAA,aAAa,CAACK,IAAd,CAAmBD,OAAnB;AACF;;AACD,SAAOJ,aAAa,CAACN,GAAd,CAAkBY,QAAQ,IAAEA,QAAQ,CAACC,OAAT,CAAiB,CAAjB,CAA5B,CAAP;AACF,CAfD;;AAgBA,eAAehB,sBAAf","sourcesContent":["const calculateAverageValues = (matrixData) => {\n   const matrixValuesOnly = matrixData.map((item) =>\n      item.map((row) => row.value)\n   );\n   const columnsNumber = matrixValuesOnly[0].length;\n   let averageValues = [];\n   for (let columnIndex = 0; columnIndex < columnsNumber; columnIndex++) {\n      let columnSum = 0;\n      for (let rowIndex = 0; rowIndex < matrixValuesOnly.length; rowIndex++) {\n         columnSum += matrixValuesOnly[rowIndex][columnIndex];\n      }\n      const average = columnSum / matrixValuesOnly.length;\n      averageValues.push(average);\n   }\n   return averageValues.map(avgValue=>avgValue.toFixed(2));\n};\nexport default calculateAverageValues;\n"]},"metadata":{},"sourceType":"module"}