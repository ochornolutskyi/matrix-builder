{"ast":null,"code":"import _slicedToArray from\"/home/superproger/workspace/matrix-builder/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useDispatch}from\"react-redux\";import{removeRow}from\"../../../../../redux/actions\";import CrossButton from\"../../../../CrossButton\";import setCellRenderer from\"../setCellRenderer\";import IncrementCell from\"../CellRenderer/IncrementCell\";import StaticCell from\"../CellRenderer/StaticCell\";import SumCell from\"../CellRenderer/SumCell\";var TableRow=function TableRow(_ref){var rowNumber=_ref.rowNumber,data=_ref.data;var dispatch=useDispatch();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showPercentageValue=_useState2[0],setShowPercentageValue=_useState2[1];var sumRow=data.map(function(data){return data.value;}).reduce(function(sum,value){return sum+value;},0);var Renderer=setCellRenderer(showPercentageValue,IncrementCell);var rowCells=data.map(function(cellData){return/*#__PURE__*/React.createElement(Renderer,{key:cellData.id,id:cellData.id,value:cellData.value,sumRow:sumRow});});return/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(StaticCell,{key:rowNumber,value:rowNumber}),rowCells,/*#__PURE__*/React.createElement(SumCell,{key:sumRow,value:sumRow,sumMouseEnterHandler:function sumMouseEnterHandler(){return setShowPercentageValue(true);},sumMouseLeaveHandler:function sumMouseLeaveHandler(){return setShowPercentageValue(false);}}),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(CrossButton,{buttonClickHandler:function buttonClickHandler(){return dispatch(removeRow(rowNumber));}})));};export default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","removeRow","CrossButton","setCellRenderer","IncrementCell","StaticCell","SumCell","TableRow","rowNumber","data","dispatch","showPercentageValue","setShowPercentageValue","sumRow","map","value","reduce","sum","Renderer","rowCells","cellData","id"],"mappings":"wKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,SAAT,KAA0B,8BAA1B,CACA,MAAOC,CAAAA,WAAP,KAAwB,yBAAxB,CACA,MAAOC,CAAAA,eAAP,KAA4B,oBAA5B,CACA,MAAOC,CAAAA,aAAP,KAA0B,+BAA1B,CACA,MAAOC,CAAAA,UAAP,KAAuB,4BAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,yBAApB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAyB,IAAtBC,CAAAA,SAAsB,MAAtBA,SAAsB,CAAXC,IAAW,MAAXA,IAAW,CACvC,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CADuC,cAEeD,QAAQ,CAAC,KAAD,CAFvB,wCAEhCY,mBAFgC,eAEXC,sBAFW,eAGvC,GAAMC,CAAAA,MAAM,CAAGJ,IAAI,CACfK,GADW,CACP,SAACL,IAAD,QAAUA,CAAAA,IAAI,CAACM,KAAf,EADO,EAEXC,MAFW,CAEJ,SAACC,GAAD,CAAMF,KAAN,QAAgBE,CAAAA,GAAG,CAAGF,KAAtB,EAFI,CAEyB,CAFzB,CAAf,CAGA,GAAMG,CAAAA,QAAQ,CAAGf,eAAe,CAACQ,mBAAD,CAAsBP,aAAtB,CAAhC,CACA,GAAMe,CAAAA,QAAQ,CAAGV,IAAI,CAACK,GAAL,CAAS,SAACM,QAAD,qBACvB,oBAAC,QAAD,EACG,GAAG,CAAEA,QAAQ,CAACC,EADjB,CAEG,EAAE,CAAED,QAAQ,CAACC,EAFhB,CAGG,KAAK,CAAED,QAAQ,CAACL,KAHnB,CAIG,MAAM,CAAEF,MAJX,EADuB,EAAT,CAAjB,CASA,mBACG,2CACG,oBAAC,UAAD,EAAY,GAAG,CAAEL,SAAjB,CAA4B,KAAK,CAAEA,SAAnC,EADH,CAEIW,QAFJ,cAGG,oBAAC,OAAD,EACG,GAAG,CAAEN,MADR,CAEG,KAAK,CAAEA,MAFV,CAGG,oBAAoB,CAAE,sCAAMD,CAAAA,sBAAsB,CAAC,IAAD,CAA5B,EAHzB,CAIG,oBAAoB,CAAE,sCAAMA,CAAAA,sBAAsB,CAAC,KAAD,CAA5B,EAJzB,EAHH,cASG,2CACG,oBAAC,WAAD,EACG,kBAAkB,CAAE,oCAAMF,CAAAA,QAAQ,CAACT,SAAS,CAACO,SAAD,CAAV,CAAd,EADvB,EADH,CATH,CADH,CAiBF,CAjCD,CAmCA,cAAeD,CAAAA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport setCellRenderer from \"../setCellRenderer\";\nimport IncrementCell from \"../CellRenderer/IncrementCell\";\nimport StaticCell from \"../CellRenderer/StaticCell\";\nimport SumCell from \"../CellRenderer/SumCell\";\n\nconst TableRow = ({ rowNumber, data }) => {\n   const dispatch = useDispatch();\n   const [showPercentageValue, setShowPercentageValue] = useState(false);\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum, value) => sum + value, 0);\n   const Renderer = setCellRenderer(showPercentageValue, IncrementCell);\n   const rowCells = data.map((cellData) => (\n      <Renderer\n         key={cellData.id}\n         id={cellData.id}\n         value={cellData.value}\n         sumRow={sumRow}\n      />\n   ));\n\n   return (\n      <tr>\n         <StaticCell key={rowNumber} value={rowNumber} />\n         {rowCells}\n         <SumCell\n            key={sumRow}\n            value={sumRow}\n            sumMouseEnterHandler={() => setShowPercentageValue(true)}\n            sumMouseLeaveHandler={() => setShowPercentageValue(false)}\n         />\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowNumber))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}