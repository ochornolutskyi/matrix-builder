{"ast":null,"code":"import { INCREMENT_CELL, CREATE_MATRIX, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS } from \"../types\";\nconst initialState = {\n  nearestIds: [],\n  data: []\n}; //TODO: row 1 column 3 cells 2\n\nconst findNearestIds = (matrixData, cellsCount, id) => {\n  if (+cellsCount === 0) {\n    return [];\n  } else {\n    let nearestIds = [];\n    let sortedMatrix = matrixData.reduce((currentRow, nextRow) => currentRow.concat(nextRow)).sort((a, b) => a.value - b.value);\n    const iterationCount = cellsCount < sortedMatrix.length ? cellsCount : sortedMatrix.length - 1;\n    let indexCurrentId = sortedMatrix.indexOf(sortedMatrix.find(item => item.id === id)); //exclusion when set count of cells more than the available count of cells\n\n    const exclusionIds = indexCurrentId => sortedMatrix.filter((item, index) => index !== indexCurrentId).forEach(item => nearestIds.push(item.id)); //get ids when the hovered item is the lowest\n\n\n    if (indexCurrentId === 0) {\n      sortedMatrix.length - 1 === iterationCount ? exclusionIds(indexCurrentId) : sortedMatrix.splice(1, iterationCount).forEach(item => nearestIds.push(item.id));\n    } //get ids when the hovered item is the biggest\n    else if (indexCurrentId === sortedMatrix.length - 1) {\n        sortedMatrix.length - 1 === iterationCount ? exclusionIds(indexCurrentId) : sortedMatrix.splice(-iterationCount - 1, iterationCount).forEach(item => nearestIds.push(item.id));\n      } else {\n        if (sortedMatrix.length - 1 === iterationCount) {\n          exclusionIds(indexCurrentId);\n        } else {\n          for (let i = 0; i < iterationCount; i++) {\n            const sortedValues = sortedMatrix.map(data => data.value).sort((a, b) => a - b);\n            indexCurrentId = sortedValues.indexOf(indexCurrentId);\n            console.log(sortedValues); // if (indexCurrentId === 0) {\n            //    sortedMatrix\n            //       .splice(1, iterationCount - i)\n            //       .forEach((item) => nearestIds.push(item.id));\n            //    console.log(\"indes 0 for\" + sortedMatrix);\n            //    break;\n            // } else if (indexCurrentId === sortedMatrix.length - 1) {\n            //    sortedMatrix\n            //       .splice(-iterationCount - i - 1, iterationCount - i)\n            //       .forEach((item) => nearestIds.push(item.id));\n            //    console.log(\"index last for\" + sortedMatrix);\n            //    break;\n            // } else {\n            //    const prevValue = sortedValues[indexCurrentId - 1];\n            //    const nextValue = sortedValues[indexCurrentId + 1];\n            //    const currentValue = sortedValues[indexCurrentId];\n            //    const prevDiff = Math.abs(currentValue - prevValue);\n            //    const nextDiff = Math.abs(nextValue - currentValue);\n            //    const nearestValue =\n            //       prevDiff < nextDiff ? prevValue : nextValue;\n            //    const nearestId = sortedMatrix.find(\n            //       (item) => item.value === nearestValue\n            //    ).id;\n            //    nearestIds.push(nearestId);\n            //    sortedMatrix.splice(\n            //       sortedMatrix.indexOf(\n            //          sortedMatrix.find((item) => item.id === nearestId)\n            //       ),\n            //       1\n            //    );\n            // }\n          }\n        }\n      }\n\n    return nearestIds;\n  }\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  let settings, data, ids;\n\n  switch (action.type) {\n    case CREATE_MATRIX:\n      data = [...state.data];\n      settings = action.settings;\n\n      for (let i = 0; i < settings.rows; i++) {\n        data.push([]);\n      }\n\n      data.forEach((item, index) => {\n        for (let i = 0; i < settings.columns; i++) {\n          const cellObject = {\n            id: String(index + 1).concat(i + 1),\n            value: Math.round(100 + Math.random() * 899)\n          };\n          item.push(cellObject);\n        }\n      });\n      return { ...state,\n        data\n      };\n\n    case INCREMENT_CELL:\n      data = [...state.data];\n      data.find(row => row.find(item => item.id === action.id)).filter(item => item.id === action.id)[0].value++;\n      return { ...state,\n        data\n      };\n\n    case REMOVE_ROW:\n      data = [...state.data];\n      data.splice(action.index, 1);\n      return { ...state,\n        data\n      };\n\n    case ADD_ROW:\n      data = [...state.data];\n      let newRow = [];\n\n      for (let i = 0; i < action.columnsCount; i++) {\n        const cellObject = {\n          id: String(data.length + 1).concat(i + 1),\n          value: Math.round(100 + Math.random() * 899)\n        };\n        newRow.push(cellObject);\n      }\n\n      data.push(newRow);\n      return { ...state,\n        data\n      };\n\n    case SET_NEAREST_IDS:\n      data = [...state.data];\n      const cellsCount = action.cellsCount;\n      const id = action.id;\n      ids = findNearestIds(data, cellsCount, id);\n      return { ...state,\n        nearestIds: ids\n      };\n\n    case RESET_NEAREST_IDS:\n      ids = [...state.nearestIds];\n      ids = [];\n      return { ...state,\n        nearestIds: ids\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","CREATE_MATRIX","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","initialState","nearestIds","data","findNearestIds","matrixData","cellsCount","id","sortedMatrix","reduce","currentRow","nextRow","concat","sort","a","b","value","iterationCount","length","indexCurrentId","indexOf","find","item","exclusionIds","filter","index","forEach","push","splice","i","sortedValues","map","console","log","matrixReducer","state","action","settings","ids","type","rows","columns","cellObject","String","Math","round","random","row","newRow","columnsCount"],"mappings":"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","sourcesContent":["import {\n   INCREMENT_CELL,\n   CREATE_MATRIX,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n} from \"../types\";\n\nconst initialState = { nearestIds: [], data: [] };\n//TODO: row 1 column 3 cells 2\nconst findNearestIds = (matrixData, cellsCount, id) => {\n   if (+cellsCount === 0) {\n      return [];\n   } else {\n      let nearestIds = [];\n      let sortedMatrix = matrixData\n         .reduce((currentRow, nextRow) => currentRow.concat(nextRow))\n         .sort((a, b) => a.value - b.value);\n      const iterationCount =\n         cellsCount < sortedMatrix.length\n            ? cellsCount\n            : sortedMatrix.length - 1;\n      let indexCurrentId = sortedMatrix.indexOf(\n         sortedMatrix.find((item) => item.id === id)\n      );\n      //exclusion when set count of cells more than the available count of cells\n      const exclusionIds = (indexCurrentId) =>\n         sortedMatrix\n            .filter((item, index) => index !== indexCurrentId)\n            .forEach((item) => nearestIds.push(item.id));\n      //get ids when the hovered item is the lowest\n            if (indexCurrentId === 0) {\n         sortedMatrix.length - 1 === iterationCount\n            ? exclusionIds(indexCurrentId)\n            : sortedMatrix\n                 .splice(1, iterationCount)\n                 .forEach((item) => nearestIds.push(item.id));\n      }\n      //get ids when the hovered item is the biggest\n      else if (indexCurrentId === sortedMatrix.length - 1) {\n         sortedMatrix.length - 1 === iterationCount\n            ? exclusionIds(indexCurrentId)\n            : sortedMatrix\n                 .splice(-iterationCount - 1, iterationCount)\n                 .forEach((item) => nearestIds.push(item.id));\n      } else {\n         if (sortedMatrix.length - 1 === iterationCount) {\n            exclusionIds(indexCurrentId);\n         } else {\n            for (let i = 0; i < iterationCount; i++) {\n               const sortedValues = sortedMatrix\n                  .map((data) => data.value)\n                  .sort((a, b) => a - b);\n               indexCurrentId = sortedValues.indexOf(indexCurrentId);\n               console.log(sortedValues)\n               // if (indexCurrentId === 0) {\n               //    sortedMatrix\n               //       .splice(1, iterationCount - i)\n               //       .forEach((item) => nearestIds.push(item.id));\n               //    console.log(\"indes 0 for\" + sortedMatrix);\n               //    break;\n               // } else if (indexCurrentId === sortedMatrix.length - 1) {\n               //    sortedMatrix\n               //       .splice(-iterationCount - i - 1, iterationCount - i)\n               //       .forEach((item) => nearestIds.push(item.id));\n               //    console.log(\"index last for\" + sortedMatrix);\n\n               //    break;\n               // } else {\n               //    const prevValue = sortedValues[indexCurrentId - 1];\n               //    const nextValue = sortedValues[indexCurrentId + 1];\n               //    const currentValue = sortedValues[indexCurrentId];\n               //    const prevDiff = Math.abs(currentValue - prevValue);\n               //    const nextDiff = Math.abs(nextValue - currentValue);\n               //    const nearestValue =\n               //       prevDiff < nextDiff ? prevValue : nextValue;\n               //    const nearestId = sortedMatrix.find(\n               //       (item) => item.value === nearestValue\n               //    ).id;\n               //    nearestIds.push(nearestId);\n               //    sortedMatrix.splice(\n               //       sortedMatrix.indexOf(\n               //          sortedMatrix.find((item) => item.id === nearestId)\n               //       ),\n               //       1\n               //    );\n               // }\n            }\n         }\n      }\n      return nearestIds;\n   }\n};\n\nconst matrixReducer = (state = initialState, action) => {\n   let settings, data, ids;\n   switch (action.type) {\n      case CREATE_MATRIX:\n         data = [...state.data];\n         settings = action.settings;\n         for (let i = 0; i < settings.rows; i++) {\n            data.push([]);\n         }\n         data.forEach((item, index) => {\n            for (let i = 0; i < settings.columns; i++) {\n               const cellObject = {\n                  id: String(index + 1).concat(i + 1),\n                  value: Math.round(100 + Math.random() * 899),\n               };\n               item.push(cellObject);\n            }\n         });\n         return { ...state, data };\n      case INCREMENT_CELL:\n         data = [...state.data];\n         data\n            .find((row) => row.find((item) => item.id === action.id))\n            .filter((item) => item.id === action.id)[0].value++;\n         return { ...state, data };\n      case REMOVE_ROW:\n         data = [...state.data];\n         data.splice(action.index, 1);\n         return { ...state, data };\n      case ADD_ROW:\n         data = [...state.data];\n         let newRow = [];\n         for (let i = 0; i < action.columnsCount; i++) {\n            const cellObject = {\n               id: String(data.length + 1).concat(i + 1),\n               value: Math.round(100 + Math.random() * 899),\n            };\n            newRow.push(cellObject);\n         }\n         data.push(newRow);\n         return { ...state, data };\n      case SET_NEAREST_IDS:\n         data = [...state.data];\n         const cellsCount = action.cellsCount;\n         const id = action.id;\n         ids = findNearestIds(data, cellsCount, id);\n         return { ...state, nearestIds: ids };\n      case RESET_NEAREST_IDS:\n         ids = [...state.nearestIds];\n         ids = [];\n         return { ...state, nearestIds: ids };\n      default:\n         return state;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}