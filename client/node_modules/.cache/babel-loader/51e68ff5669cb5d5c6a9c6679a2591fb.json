{"ast":null,"code":"import { INCREMENT_CELL, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS, SET_SETTINGS, RESET_SETTINGS } from \"../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./building\";\nconst defaultSettings = {\n  rowsCount: 0,\n  columnsCount: 0,\n  cellsCount: 0\n};\nconst initialState = {\n  settings: defaultSettings,\n  data: [],\n  sortedData: [],\n  nearestIds: {\n    sameValueIds: [],\n    ids: []\n  }\n};\n\nconst sortData = data => {\n  if (data.length > 0) {\n    return data.flat().sort((a, b) => a.value - b.value);\n  }\n}; //find nearest values functions\n\n\nconst checkTargetValueIsLowest = (sortedData, targetId) => {\n  if (sortedData.indexOf(sortedData.find(item => item.id === targetId)) === 0) {\n    return true;\n  }\n};\n\nconst checkTargetValueIsBiggest = (sortedData, targetId) => {\n  if (sortedData.indexOf(sortedData.find(item => item.id === targetId)) === sortedData.length - 1) {\n    return true;\n  }\n};\n\nconst getNearestIdsOfLowestValue = (sortedData, cellsCount) => {\n  return sortedData.slice(1, cellsCount + 1).map(item => item.id);\n};\n\nconst getNearestIdsOfBiggestValue = (sortedData, cellsCount) => {\n  return sortedData.slice(-cellsCount - 1, -1).map(item => item.id);\n};\n\nconst getNearestId = (sortedData, targetId) => {\n  const indexOfTargetId = sortedData.indexOf(sortedData.find(item => item.id === targetId));\n  const prevItem = sortedData[indexOfTargetId - 1];\n  const nextItem = sortedData[indexOfTargetId + 1];\n  const currentItem = sortedData[indexOfTargetId];\n  const prevDiff = Math.abs(currentItem.value - prevItem.value);\n  const nextDiff = Math.abs(nextItem.value - currentItem.value);\n  const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n  return nearestItem.id;\n};\n\nconst findNearestIds = (sortedData, targetId, cellsCount, ids = [], step = 0) => {\n  if (step < cellsCount) {\n    if (checkTargetValueIsLowest(sortedData, targetId)) {\n      ids.push(getNearestIdsOfLowestValue(sortedData, cellsCount - step));\n      return ids.flat();\n    } else if (checkTargetValueIsBiggest(sortedData, targetId)) {\n      ids.push(getNearestIdsOfBiggestValue(sortedData, cellsCount - step));\n      return ids.flat();\n    } else {\n      const id = getNearestId(sortedData, targetId);\n      ids.push(id);\n      sortedData = sortedData.filter(item => item.id !== id);\n      step++;\n      return findNearestIds(sortedData, targetId, cellsCount, ids, step);\n    }\n  }\n\n  return ids;\n};\n\nconst getIds = (sortedData, cellsCount, targetId) => {\n  const targetValue = sortedData.find(item => item.id === targetId).value;\n  const sameValueIds = sortedData.filter(item => item.value === targetValue && item.id !== targetId).map(item => item.id);\n\n  if (sameValueIds.length > 0) {\n    sortedData = sortedData.filter(item => !sameValueIds.includes(item.id));\n  }\n\n  const nearestIds = findNearestIds(sortedData, targetId, cellsCount);\n  return {\n    sameValueIds,\n    ids: nearestIds\n  };\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_SETTINGS:\n      let data;\n      const newSettings = { ...action.settings\n      };\n\n      if (state.data.length === 0) {\n        data = createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n      } else if (state.settings.rowsCount !== newSettings.rowsCount || state.settings.columnsCount !== newSettings.columnsCount) {\n        data = rebuildMatrix(state.data, state.settings, newSettings);\n      }\n\n      return { ...state,\n        data,\n        sortedData: sortData(data),\n        settings: newSettings\n      };\n\n    case RESET_SETTINGS:\n      return { ...state,\n        // sortedData: sortData(state.data),\n        settings: defaultSettings\n      };\n\n    case ADD_ROW:\n      addRows(data, 1, state.settings.columnsCount);\n      return { ...state,\n        settings: { ...state.setings,\n          rowsCount: state.data.length\n        },\n        sortedData: sortData(data),\n        data\n      };\n\n    case REMOVE_ROW:\n      data.splice(action.rowIndex, 1);\n      settings.rowsCount = data.length;\n      sortedData = sortData(data);\n      return { ...state,\n        data,\n        sortedData,\n        settings\n      };\n\n    case INCREMENT_CELL:\n      data.find(row => row.find(item => item.id === action.id ? item.value++ : null));\n      sortedData = sortData(data);\n      nearestIds = { ...state.nearestIds\n      };\n      nearestIds = getIds(sortedData, settings.cellsCount, action.id);\n      return { ...state,\n        data,\n        sortedData,\n        nearestIds\n      };\n\n    case SET_NEAREST_IDS:\n      nearestIds = { ...state.nearestIds\n      };\n      sortedData = sortData(data);\n      nearestIds = getIds(sortedData, settings.cellsCount, action.id);\n      return { ...state,\n        nearestIds\n      };\n\n    case RESET_NEAREST_IDS:\n      nearestIds = { ...state.nearestIds\n      };\n      nearestIds = {\n        sameValueIds: [],\n        ids: []\n      };\n      return { ...state,\n        nearestIds: {\n          sameValueIds: [],\n          ids: []\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","SET_SETTINGS","RESET_SETTINGS","createMatrix","rebuildMatrix","addRows","defaultSettings","rowsCount","columnsCount","cellsCount","initialState","settings","data","sortedData","nearestIds","sameValueIds","ids","sortData","length","flat","sort","a","b","value","checkTargetValueIsLowest","targetId","indexOf","find","item","id","checkTargetValueIsBiggest","getNearestIdsOfLowestValue","slice","map","getNearestIdsOfBiggestValue","getNearestId","indexOfTargetId","prevItem","nextItem","currentItem","prevDiff","Math","abs","nextDiff","nearestItem","findNearestIds","step","push","filter","getIds","targetValue","includes","matrixReducer","state","action","type","newSettings","setings","splice","rowIndex","row"],"mappings":"AAAA,SACGA,cADH,EAEGC,UAFH,EAGGC,OAHH,EAIGC,eAJH,EAKGC,iBALH,EAMGC,YANH,EAOGC,cAPH,QAQO,iBARP;AASA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,OAAtC,QAAqD,YAArD;AAEA,MAAMC,eAAe,GAAG;AAAEC,EAAAA,SAAS,EAAE,CAAb;AAAgBC,EAAAA,YAAY,EAAE,CAA9B;AAAiCC,EAAAA,UAAU,EAAE;AAA7C,CAAxB;AACA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,QAAQ,EAAEL,eADQ;AAElBM,EAAAA,IAAI,EAAE,EAFY;AAGlBC,EAAAA,UAAU,EAAE,EAHM;AAIlBC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,YAAY,EAAE,EAAhB;AAAoBC,IAAAA,GAAG,EAAE;AAAzB;AAJM,CAArB;;AAOA,MAAMC,QAAQ,GAAIL,IAAD,IAAU;AACxB,MAAIA,IAAI,CAACM,MAAL,GAAc,CAAlB,EAAqB;AAClB,WAAON,IAAI,CAACO,IAAL,GAAYC,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAvC,CAAP;AACF;AACH,CAJD,C,CAMA;;;AACA,MAAMC,wBAAwB,GAAG,CAACX,UAAD,EAAaY,QAAb,KAA0B;AACxD,MACGZ,UAAU,CAACa,OAAX,CAAmBb,UAAU,CAACc,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,QAAtC,CAAnB,MAAwE,CAD3E,EAEE;AACC,WAAO,IAAP;AACF;AACH,CAND;;AAOA,MAAMK,yBAAyB,GAAG,CAACjB,UAAD,EAAaY,QAAb,KAA0B;AACzD,MACGZ,UAAU,CAACa,OAAX,CAAmBb,UAAU,CAACc,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,QAAtC,CAAnB,MACAZ,UAAU,CAACK,MAAX,GAAoB,CAFvB,EAGE;AACC,WAAO,IAAP;AACF;AACH,CAPD;;AAQA,MAAMa,0BAA0B,GAAG,CAAClB,UAAD,EAAaJ,UAAb,KAA4B;AAC5D,SAAOI,UAAU,CAACmB,KAAX,CAAiB,CAAjB,EAAoBvB,UAAU,GAAG,CAAjC,EAAoCwB,GAApC,CAAyCL,IAAD,IAAUA,IAAI,CAACC,EAAvD,CAAP;AACF,CAFD;;AAGA,MAAMK,2BAA2B,GAAG,CAACrB,UAAD,EAAaJ,UAAb,KAA4B;AAC7D,SAAOI,UAAU,CAACmB,KAAX,CAAiB,CAACvB,UAAD,GAAc,CAA/B,EAAkC,CAAC,CAAnC,EAAsCwB,GAAtC,CAA2CL,IAAD,IAAUA,IAAI,CAACC,EAAzD,CAAP;AACF,CAFD;;AAGA,MAAMM,YAAY,GAAG,CAACtB,UAAD,EAAaY,QAAb,KAA0B;AAC5C,QAAMW,eAAe,GAAGvB,UAAU,CAACa,OAAX,CACrBb,UAAU,CAACc,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,QAAtC,CADqB,CAAxB;AAGA,QAAMY,QAAQ,GAAGxB,UAAU,CAACuB,eAAe,GAAG,CAAnB,CAA3B;AACA,QAAME,QAAQ,GAAGzB,UAAU,CAACuB,eAAe,GAAG,CAAnB,CAA3B;AACA,QAAMG,WAAW,GAAG1B,UAAU,CAACuB,eAAD,CAA9B;AACA,QAAMI,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASH,WAAW,CAAChB,KAAZ,GAAoBc,QAAQ,CAACd,KAAtC,CAAjB;AACA,QAAMoB,QAAQ,GAAGF,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACf,KAAT,GAAiBgB,WAAW,CAAChB,KAAtC,CAAjB;AACA,QAAMqB,WAAW,GAAGJ,QAAQ,GAAGG,QAAX,GAAsBN,QAAtB,GAAiCC,QAArD;AACA,SAAOM,WAAW,CAACf,EAAnB;AACF,CAXD;;AAYA,MAAMgB,cAAc,GAAG,CACpBhC,UADoB,EAEpBY,QAFoB,EAGpBhB,UAHoB,EAIpBO,GAAG,GAAG,EAJc,EAKpB8B,IAAI,GAAG,CALa,KAMlB;AACF,MAAIA,IAAI,GAAGrC,UAAX,EAAuB;AACpB,QAAIe,wBAAwB,CAACX,UAAD,EAAaY,QAAb,CAA5B,EAAoD;AACjDT,MAAAA,GAAG,CAAC+B,IAAJ,CAAShB,0BAA0B,CAAClB,UAAD,EAAaJ,UAAU,GAAGqC,IAA1B,CAAnC;AACA,aAAO9B,GAAG,CAACG,IAAJ,EAAP;AACF,KAHD,MAGO,IAAIW,yBAAyB,CAACjB,UAAD,EAAaY,QAAb,CAA7B,EAAqD;AACzDT,MAAAA,GAAG,CAAC+B,IAAJ,CAASb,2BAA2B,CAACrB,UAAD,EAAaJ,UAAU,GAAGqC,IAA1B,CAApC;AACA,aAAO9B,GAAG,CAACG,IAAJ,EAAP;AACF,KAHM,MAGA;AACJ,YAAMU,EAAE,GAAGM,YAAY,CAACtB,UAAD,EAAaY,QAAb,CAAvB;AACAT,MAAAA,GAAG,CAAC+B,IAAJ,CAASlB,EAAT;AACAhB,MAAAA,UAAU,GAAGA,UAAU,CAACmC,MAAX,CAAmBpB,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAxC,CAAb;AACAiB,MAAAA,IAAI;AACJ,aAAOD,cAAc,CAAChC,UAAD,EAAaY,QAAb,EAAuBhB,UAAvB,EAAmCO,GAAnC,EAAwC8B,IAAxC,CAArB;AACF;AACH;;AACD,SAAO9B,GAAP;AACF,CAvBD;;AAwBA,MAAMiC,MAAM,GAAG,CAACpC,UAAD,EAAaJ,UAAb,EAAyBgB,QAAzB,KAAsC;AAClD,QAAMyB,WAAW,GAAGrC,UAAU,CAACc,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,QAAtC,EAAgDF,KAApE;AACA,QAAMR,YAAY,GAAGF,UAAU,CAC3BmC,MADiB,CACTpB,IAAD,IAAUA,IAAI,CAACL,KAAL,KAAe2B,WAAf,IAA8BtB,IAAI,CAACC,EAAL,KAAYJ,QAD1C,EAEjBQ,GAFiB,CAEZL,IAAD,IAAUA,IAAI,CAACC,EAFF,CAArB;;AAGA,MAAId,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6B;AAC1BL,IAAAA,UAAU,GAAGA,UAAU,CAACmC,MAAX,CAAmBpB,IAAD,IAAU,CAACb,YAAY,CAACoC,QAAb,CAAsBvB,IAAI,CAACC,EAA3B,CAA7B,CAAb;AACF;;AACD,QAAMf,UAAU,GAAG+B,cAAc,CAAChC,UAAD,EAAaY,QAAb,EAAuBhB,UAAvB,CAAjC;AACA,SAAO;AAAEM,IAAAA,YAAF;AAAgBC,IAAAA,GAAG,EAAEF;AAArB,GAAP;AACF,CAVD;;AAYA,MAAMsC,aAAa,GAAG,CAACC,KAAK,GAAG3C,YAAT,EAAuB4C,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACG,SAAKtD,YAAL;AACG,UAAIW,IAAJ;AACA,YAAM4C,WAAW,GAAG,EAAE,GAAGF,MAAM,CAAC3C;AAAZ,OAApB;;AACA,UAAI0C,KAAK,CAACzC,IAAN,CAAWM,MAAX,KAAsB,CAA1B,EAA6B;AAC1BN,QAAAA,IAAI,GAAGT,YAAY,CAChBqD,WAAW,CAACjD,SADI,EAEhBiD,WAAW,CAAChD,YAFI,CAAnB;AAIF,OALD,MAKO,IACJ6C,KAAK,CAAC1C,QAAN,CAAeJ,SAAf,KAA6BiD,WAAW,CAACjD,SAAzC,IACA8C,KAAK,CAAC1C,QAAN,CAAeH,YAAf,KAAgCgD,WAAW,CAAChD,YAFxC,EAGL;AACCI,QAAAA,IAAI,GAAGR,aAAa,CAACiD,KAAK,CAACzC,IAAP,EAAayC,KAAK,CAAC1C,QAAnB,EAA6B6C,WAA7B,CAApB;AACF;;AACD,aAAO,EACJ,GAAGH,KADC;AAEJzC,QAAAA,IAFI;AAGJC,QAAAA,UAAU,EAAEI,QAAQ,CAACL,IAAD,CAHhB;AAIJD,QAAAA,QAAQ,EAAE6C;AAJN,OAAP;;AAMH,SAAKtD,cAAL;AACG,aAAO,EACJ,GAAGmD,KADC;AAEJ;AACA1C,QAAAA,QAAQ,EAAEL;AAHN,OAAP;;AAKH,SAAKR,OAAL;AACGO,MAAAA,OAAO,CAACO,IAAD,EAAO,CAAP,EAAUyC,KAAK,CAAC1C,QAAN,CAAeH,YAAzB,CAAP;AACA,aAAO,EACJ,GAAG6C,KADC;AAEJ1C,QAAAA,QAAQ,EAAE,EAAE,GAAG0C,KAAK,CAACI,OAAX;AAAoBlD,UAAAA,SAAS,EAAE8C,KAAK,CAACzC,IAAN,CAAWM;AAA1C,SAFN;AAGJL,QAAAA,UAAU,EAAEI,QAAQ,CAACL,IAAD,CAHhB;AAIJA,QAAAA;AAJI,OAAP;;AAMH,SAAKf,UAAL;AACGe,MAAAA,IAAI,CAAC8C,MAAL,CAAYJ,MAAM,CAACK,QAAnB,EAA6B,CAA7B;AACAhD,MAAAA,QAAQ,CAACJ,SAAT,GAAqBK,IAAI,CAACM,MAA1B;AACAL,MAAAA,UAAU,GAAGI,QAAQ,CAACL,IAAD,CAArB;AACA,aAAO,EAAE,GAAGyC,KAAL;AAAYzC,QAAAA,IAAZ;AAAkBC,QAAAA,UAAlB;AAA8BF,QAAAA;AAA9B,OAAP;;AACH,SAAKf,cAAL;AACGgB,MAAAA,IAAI,CAACe,IAAL,CAAWiC,GAAD,IACPA,GAAG,CAACjC,IAAJ,CAAUC,IAAD,IAAWA,IAAI,CAACC,EAAL,KAAYyB,MAAM,CAACzB,EAAnB,GAAwBD,IAAI,CAACL,KAAL,EAAxB,GAAuC,IAA3D,CADH;AAGAV,MAAAA,UAAU,GAAGI,QAAQ,CAACL,IAAD,CAArB;AACAE,MAAAA,UAAU,GAAG,EAAE,GAAGuC,KAAK,CAACvC;AAAX,OAAb;AACAA,MAAAA,UAAU,GAAGmC,MAAM,CAACpC,UAAD,EAAaF,QAAQ,CAACF,UAAtB,EAAkC6C,MAAM,CAACzB,EAAzC,CAAnB;AACA,aAAO,EAAE,GAAGwB,KAAL;AAAYzC,QAAAA,IAAZ;AAAkBC,QAAAA,UAAlB;AAA8BC,QAAAA;AAA9B,OAAP;;AACH,SAAKf,eAAL;AACGe,MAAAA,UAAU,GAAG,EAAE,GAAGuC,KAAK,CAACvC;AAAX,OAAb;AACAD,MAAAA,UAAU,GAAGI,QAAQ,CAACL,IAAD,CAArB;AACAE,MAAAA,UAAU,GAAGmC,MAAM,CAACpC,UAAD,EAAaF,QAAQ,CAACF,UAAtB,EAAkC6C,MAAM,CAACzB,EAAzC,CAAnB;AACA,aAAO,EAAE,GAAGwB,KAAL;AAAYvC,QAAAA;AAAZ,OAAP;;AACH,SAAKd,iBAAL;AACGc,MAAAA,UAAU,GAAG,EAAE,GAAGuC,KAAK,CAACvC;AAAX,OAAb;AACAA,MAAAA,UAAU,GAAG;AAAEC,QAAAA,YAAY,EAAE,EAAhB;AAAoBC,QAAAA,GAAG,EAAE;AAAzB,OAAb;AACA,aAAO,EAAE,GAAGqC,KAAL;AAAYvC,QAAAA,UAAU,EAAE;AAAEC,UAAAA,YAAY,EAAE,EAAhB;AAAoBC,UAAAA,GAAG,EAAE;AAAzB;AAAxB,OAAP;;AACH;AACG,aAAOqC,KAAP;AA1DN;AA4DF,CA7DD;;AA+DA,eAAeD,aAAf","sourcesContent":["import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n   RESET_SETTINGS,\n} from \"../action_types\";\nimport { createMatrix, rebuildMatrix, addRows } from \"./building\";\n\nconst defaultSettings = { rowsCount: 0, columnsCount: 0, cellsCount: 0 };\nconst initialState = {\n   settings: defaultSettings,\n   data: [],\n   sortedData: [],\n   nearestIds: { sameValueIds: [], ids: [] },\n};\n\nconst sortData = (data) => {\n   if (data.length > 0) {\n      return data.flat().sort((a, b) => a.value - b.value);\n   }\n};\n\n//find nearest values functions\nconst checkTargetValueIsLowest = (sortedData, targetId) => {\n   if (\n      sortedData.indexOf(sortedData.find((item) => item.id === targetId)) === 0\n   ) {\n      return true;\n   }\n};\nconst checkTargetValueIsBiggest = (sortedData, targetId) => {\n   if (\n      sortedData.indexOf(sortedData.find((item) => item.id === targetId)) ===\n      sortedData.length - 1\n   ) {\n      return true;\n   }\n};\nconst getNearestIdsOfLowestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(1, cellsCount + 1).map((item) => item.id);\n};\nconst getNearestIdsOfBiggestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(-cellsCount - 1, -1).map((item) => item.id);\n};\nconst getNearestId = (sortedData, targetId) => {\n   const indexOfTargetId = sortedData.indexOf(\n      sortedData.find((item) => item.id === targetId)\n   );\n   const prevItem = sortedData[indexOfTargetId - 1];\n   const nextItem = sortedData[indexOfTargetId + 1];\n   const currentItem = sortedData[indexOfTargetId];\n   const prevDiff = Math.abs(currentItem.value - prevItem.value);\n   const nextDiff = Math.abs(nextItem.value - currentItem.value);\n   const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n   return nearestItem.id;\n};\nconst findNearestIds = (\n   sortedData,\n   targetId,\n   cellsCount,\n   ids = [],\n   step = 0\n) => {\n   if (step < cellsCount) {\n      if (checkTargetValueIsLowest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfLowestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else if (checkTargetValueIsBiggest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfBiggestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else {\n         const id = getNearestId(sortedData, targetId);\n         ids.push(id);\n         sortedData = sortedData.filter((item) => item.id !== id);\n         step++;\n         return findNearestIds(sortedData, targetId, cellsCount, ids, step);\n      }\n   }\n   return ids;\n};\nconst getIds = (sortedData, cellsCount, targetId) => {\n   const targetValue = sortedData.find((item) => item.id === targetId).value;\n   const sameValueIds = sortedData\n      .filter((item) => item.value === targetValue && item.id !== targetId)\n      .map((item) => item.id);\n   if (sameValueIds.length > 0) {\n      sortedData = sortedData.filter((item) => !sameValueIds.includes(item.id));\n   }\n   const nearestIds = findNearestIds(sortedData, targetId, cellsCount);\n   return { sameValueIds, ids: nearestIds };\n};\n\nconst matrixReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case SET_SETTINGS:\n         let data;\n         const newSettings = { ...action.settings };\n         if (state.data.length === 0) {\n            data = createMatrix(\n               newSettings.rowsCount,\n               newSettings.columnsCount\n            );\n         } else if (\n            state.settings.rowsCount !== newSettings.rowsCount ||\n            state.settings.columnsCount !== newSettings.columnsCount\n         ) {\n            data = rebuildMatrix(state.data, state.settings, newSettings);\n         }\n         return {\n            ...state,\n            data,\n            sortedData: sortData(data),\n            settings: newSettings,\n         };\n      case RESET_SETTINGS:\n         return {\n            ...state,\n            // sortedData: sortData(state.data),\n            settings: defaultSettings,\n         };\n      case ADD_ROW:\n         addRows(data, 1, state.settings.columnsCount);\n         return {\n            ...state,\n            settings: { ...state.setings, rowsCount: state.data.length },\n            sortedData: sortData(data),\n            data,\n         };\n      case REMOVE_ROW:\n         data.splice(action.rowIndex, 1);\n         settings.rowsCount = data.length;\n         sortedData = sortData(data);\n         return { ...state, data, sortedData, settings };\n      case INCREMENT_CELL:\n         data.find((row) =>\n            row.find((item) => (item.id === action.id ? item.value++ : null))\n         );\n         sortedData = sortData(data);\n         nearestIds = { ...state.nearestIds };\n         nearestIds = getIds(sortedData, settings.cellsCount, action.id);\n         return { ...state, data, sortedData, nearestIds };\n      case SET_NEAREST_IDS:\n         nearestIds = { ...state.nearestIds };\n         sortedData = sortData(data);\n         nearestIds = getIds(sortedData, settings.cellsCount, action.id);\n         return { ...state, nearestIds };\n      case RESET_NEAREST_IDS:\n         nearestIds = { ...state.nearestIds };\n         nearestIds = { sameValueIds: [], ids: [] };\n         return { ...state, nearestIds: { sameValueIds: [], ids: [] } };\n      default:\n         return state;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}