{"ast":null,"code":"import { INCREMENT_CELL, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS, SET_SETTINGS } from \"../types\";\nconst initialState = {\n  settings: {\n    rowsCount: 0,\n    columnsCount: 0,\n    cellsCount: 0\n  },\n  nearestIds: {\n    sameValueIds: [],\n    ids: []\n  },\n  data: [],\n  sortedData: []\n};\n\nconst sortData = data => {\n  if (data.length > 0) {\n    data.flat().sort((a, b) => a.value - b.value);\n  }\n};\n\nconst addCells = (rowNumber, columnsCount, row = [], step = 0) => {\n  while (step < columnsCount) {\n    row.push({\n      id: String(rowNumber + 1).concat(row.length + 1),\n      value: Math.round(100 + Math.random() * 899)\n    });\n    step++;\n  }\n\n  return row;\n};\n\nconst addRows = (data, rowsCount, columnsCount, step = 0) => {\n  while (step < rowsCount) {\n    const rowCells = addCells(data.length, columnsCount);\n    data.push(rowCells);\n    step++;\n  }\n\n  return data;\n};\n\nconst createMatrix = (rowsCount, columnsCount, data = []) => {\n  return addRows(data, rowsCount, columnsCount);\n};\n\nconst rebuildMatrix = (data, prevSettings, newSettings) => {\n  const rebuildColumns = () => {\n    let columnsCountDiff = 0;\n\n    if (prevSettings.columnsCount < newSettings.columnsCount) {\n      columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n      data.forEach((row, index) => addCells(index, columnsCountDiff, row));\n    } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n      columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n      data.forEach(row => row.splice(-columnsCountDiff));\n    }\n\n    return data;\n  };\n\n  const rebuildRows = () => {\n    let rowsCountDiff = 0;\n\n    if (prevSettings.rowsCount < newSettings.rowsCount) {\n      rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n      addRows(data, rowsCountDiff, newSettings.columnsCount);\n    } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n      rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n      data.splice(-rowsCountDiff);\n    }\n\n    return data;\n  };\n\n  rebuildColumns(data, prevSettings, newSettings);\n  rebuildRows(data, prevSettings, newSettings);\n  return data;\n};\n\nconst findNearestIds = (data, cellsCount, targetId) => {\n  console.log(initialtate.sortedData);\n\n  const checkTargetValueIsLowest = data => {};\n\n  if (cellsCount === 0) {\n    return [];\n  } else {\n    let nearestIds = {\n      sameValueIds: [],\n      ids: []\n    };\n    let allMatrixData = data.flat();\n    const targetValue = allMatrixData.find(item => item.id === targetId).value;\n    const sameValueIds = allMatrixData.filter(item => item.value === targetValue && item.id !== targetId).map(item => item.id);\n\n    if (sameValueIds.length > 0) {\n      nearestIds.sameValueIds = sameValueIds;\n      allMatrixData = allMatrixData.filter(item => !sameValueIds.includes(item.id));\n    }\n\n    return nearestIds;\n  }\n};\n/* const findNearestIds = (matrixData, cellsCount, id) => {\n   if (+cellsCount === 0) {\n      return [];\n   } else {\n      let nearestIds = [];\n      let sortedMatrix = matrixData\n         .reduce((currentRow, nextRow) => currentRow.concat(nextRow), [])\n         .sort((a, b) => a.value - b.value);\n      const iterationCount =\n         cellsCount < sortedMatrix.length\n            ? cellsCount\n            : sortedMatrix.length - 1;\n      let indexCurrentId = sortedMatrix.indexOf(\n         sortedMatrix.find((item) => item.id === id)\n      );\n      const exclusionIds = (indexCurrentId) =>\n         sortedMatrix\n            .filter((item, index) => index !== indexCurrentId)\n            .forEach((item) => nearestIds.push(item.id));\n                  const prevItem = sortedMatrix[indexCurrentId - 1];\n                  const nextItem = sortedMatrix[indexCurrentId + 1];\n                  const currentItem = sortedMatrix[indexCurrentId];\n                  const prevDiff = Math.abs(currentItem.value - prevItem.value);\n                  const nextDiff = Math.abs(nextItem.value - currentItem.value);\n                  const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n                  nearestIds.push(nearestItem.id);\n                  sortedMatrix.splice(\n                     sortedMatrix.indexOf(\n                        sortedMatrix.find((item) => item === nearestItem)\n                     ),\n                     1\n                  );\n               }\n            }\n         }\n      }\n      return nearestIds;\n   }\n}; */\n\n\nconst matrixReducer = (state = initialState, action) => {\n  let settings = { ...state.settings\n  },\n      data = [...state.data],\n      nearestIds = { ...state.nearestIds\n  },\n      sortedData = [...state.sortedData];\n\n  switch (action.type) {\n    case SET_SETTINGS:\n      const newSettings = { ...action.settings\n      };\n\n      if (data.length === 0) {\n        data = createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n      } else if (settings.rowsCount !== newSettings.rowsCount || settings.columnsCount !== newSettings.columnsCount) {\n        rebuildMatrix(data, settings, newSettings);\n      }\n\n      sortedData = sortData(data);\n      settings = newSettings;\n      return { ...state,\n        data,\n        sortedData,\n        settings\n      };\n\n    case ADD_ROW:\n      addRows(data, 1, settings.columnsCount);\n      settings.rowsCount = data.length;\n      sortedData = sortData(data);\n      return { ...state,\n        settings,\n        sortedData,\n        data\n      };\n\n    case REMOVE_ROW:\n      data.splice(action.rowIndex, 1);\n      settings.rowsCount = data.length;\n      sortedData = sortData(data);\n      return { ...state,\n        data,\n        sortedData,\n        settings\n      };\n\n    case INCREMENT_CELL:\n      data.find(row => row.find(item => item.id === action.id ? item.value++ : null));\n      sortedData = sortData(data); // nearestIds = findNearestIds(data, settings.cellsCount, action.id);\n\n      return { ...state,\n        data,\n        sortedData,\n        nearestIds\n      };\n\n    case SET_NEAREST_IDS:\n      nearestIds = findNearestIds(data, settings.cellsCount, action.id);\n      return { ...state,\n        nearestIds\n      };\n\n    case RESET_NEAREST_IDS:\n      data = [...state.data];\n      return { ...state,\n        nearestIds: {\n          sameValueIds: [],\n          ids: []\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","SET_SETTINGS","initialState","settings","rowsCount","columnsCount","cellsCount","nearestIds","sameValueIds","ids","data","sortedData","sortData","length","flat","sort","a","b","value","addCells","rowNumber","row","step","push","id","String","concat","Math","round","random","addRows","rowCells","createMatrix","rebuildMatrix","prevSettings","newSettings","rebuildColumns","columnsCountDiff","forEach","index","splice","rebuildRows","rowsCountDiff","findNearestIds","targetId","console","log","initialtate","checkTargetValueIsLowest","allMatrixData","targetValue","find","item","filter","map","includes","matrixReducer","state","action","type","rowIndex"],"mappings":"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","sourcesContent":["import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n} from \"../types\";\n\nconst initialState = {\n   settings: { rowsCount: 0, columnsCount: 0, cellsCount: 0 },\n   nearestIds: { sameValueIds: [], ids: [] },\n   data: [],\n   sortedData: [],\n};\nconst sortData = (data) => {\n   if (data.length > 0) {\n      data.flat().sort((a, b) => a.value - b.value);\n   }\n};\nconst addCells = (rowNumber, columnsCount, row = [], step = 0) => {\n   while (step < columnsCount) {\n      row.push({\n         id: String(rowNumber + 1).concat(row.length + 1),\n         value: Math.round(100 + Math.random() * 899),\n      });\n      step++;\n   }\n   return row;\n};\nconst addRows = (data, rowsCount, columnsCount, step = 0) => {\n   while (step < rowsCount) {\n      const rowCells = addCells(data.length, columnsCount);\n      data.push(rowCells);\n      step++;\n   }\n   return data;\n};\nconst createMatrix = (rowsCount, columnsCount, data = []) => {\n   return addRows(data, rowsCount, columnsCount);\n};\nconst rebuildMatrix = (data, prevSettings, newSettings) => {\n   const rebuildColumns = () => {\n      let columnsCountDiff = 0;\n      if (prevSettings.columnsCount < newSettings.columnsCount) {\n         columnsCountDiff =\n            newSettings.columnsCount - prevSettings.columnsCount;\n         data.forEach((row, index) => addCells(index, columnsCountDiff, row));\n      } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n         columnsCountDiff =\n            prevSettings.columnsCount - newSettings.columnsCount;\n         data.forEach((row) => row.splice(-columnsCountDiff));\n      }\n      return data;\n   };\n   const rebuildRows = () => {\n      let rowsCountDiff = 0;\n      if (prevSettings.rowsCount < newSettings.rowsCount) {\n         rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n         addRows(data, rowsCountDiff, newSettings.columnsCount);\n      } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n         rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n         data.splice(-rowsCountDiff);\n      }\n      return data;\n   };\n   rebuildColumns(data, prevSettings, newSettings);\n   rebuildRows(data, prevSettings, newSettings);\n   return data;\n};\nconst findNearestIds = (data, cellsCount, targetId) => {\n   console.log(initialtate.sortedData)\n   const checkTargetValueIsLowest = (data) => {};\n   if (cellsCount === 0) {\n      return [];\n   } else {\n      let nearestIds = { sameValueIds: [], ids: [] };\n      let allMatrixData = data.flat();\n      const targetValue = allMatrixData.find((item) => item.id === targetId)\n         .value;\n      const sameValueIds = allMatrixData\n         .filter((item) => item.value === targetValue && item.id !== targetId)\n         .map((item) => item.id);\n      if (sameValueIds.length > 0) {\n         nearestIds.sameValueIds = sameValueIds;\n         allMatrixData = allMatrixData.filter(\n            (item) => !sameValueIds.includes(item.id)\n         );\n      }\n\n      return nearestIds;\n   }\n};\n/* const findNearestIds = (matrixData, cellsCount, id) => {\n   if (+cellsCount === 0) {\n      return [];\n   } else {\n      let nearestIds = [];\n      let sortedMatrix = matrixData\n         .reduce((currentRow, nextRow) => currentRow.concat(nextRow), [])\n         .sort((a, b) => a.value - b.value);\n      const iterationCount =\n         cellsCount < sortedMatrix.length\n            ? cellsCount\n            : sortedMatrix.length - 1;\n      let indexCurrentId = sortedMatrix.indexOf(\n         sortedMatrix.find((item) => item.id === id)\n      );\n      const exclusionIds = (indexCurrentId) =>\n         sortedMatrix\n            .filter((item, index) => index !== indexCurrentId)\n            .forEach((item) => nearestIds.push(item.id));\n                  const prevItem = sortedMatrix[indexCurrentId - 1];\n                  const nextItem = sortedMatrix[indexCurrentId + 1];\n                  const currentItem = sortedMatrix[indexCurrentId];\n                  const prevDiff = Math.abs(currentItem.value - prevItem.value);\n                  const nextDiff = Math.abs(nextItem.value - currentItem.value);\n                  const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n                  nearestIds.push(nearestItem.id);\n                  sortedMatrix.splice(\n                     sortedMatrix.indexOf(\n                        sortedMatrix.find((item) => item === nearestItem)\n                     ),\n                     1\n                  );\n               }\n            }\n         }\n      }\n      return nearestIds;\n   }\n}; */\nconst matrixReducer = (state = initialState, action) => {\n   let settings = { ...state.settings },\n      data = [...state.data],\n      nearestIds = { ...state.nearestIds },\n      sortedData = [...state.sortedData];\n   switch (action.type) {\n      case SET_SETTINGS:\n         const newSettings = { ...action.settings };\n         if (data.length === 0) {\n            data = createMatrix(\n               newSettings.rowsCount,\n               newSettings.columnsCount\n            );\n         } else if (\n            settings.rowsCount !== newSettings.rowsCount ||\n            settings.columnsCount !== newSettings.columnsCount\n         ) {\n            rebuildMatrix(data, settings, newSettings);\n         }\n         sortedData = sortData(data);\n         settings = newSettings;\n         return { ...state, data, sortedData, settings };\n      case ADD_ROW:\n         addRows(data, 1, settings.columnsCount);\n         settings.rowsCount = data.length;\n         sortedData = sortData(data);\n         return { ...state, settings, sortedData, data };\n      case REMOVE_ROW:\n         data.splice(action.rowIndex, 1);\n         settings.rowsCount = data.length;\n         sortedData = sortData(data);\n         return { ...state, data, sortedData, settings };\n      case INCREMENT_CELL:\n         data.find((row) =>\n            row.find((item) => (item.id === action.id ? item.value++ : null))\n         );\n         sortedData = sortData(data);\n         // nearestIds = findNearestIds(data, settings.cellsCount, action.id);\n         return { ...state, data, sortedData, nearestIds };\n      case SET_NEAREST_IDS:\n         nearestIds = findNearestIds(data, settings.cellsCount, action.id);\n         return { ...state, nearestIds };\n      case RESET_NEAREST_IDS:\n         data = [...state.data];\n         return { ...state, nearestIds: { sameValueIds: [], ids: [] } };\n      default:\n         return state;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}