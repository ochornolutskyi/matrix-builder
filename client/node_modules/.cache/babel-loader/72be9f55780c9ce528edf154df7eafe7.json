{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\nconst inputClassName = \"input-settings\";\nconst ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows value\";\nconst COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns value\";\nconst CELLS_COUNT_ERROR_MESSAGE = \"Please, set the correct cells value\";\nconst ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows, columns and cells value\";\nconst ROWS_COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows and columns value\";\nconst ROWS_CELLS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows and cells value\";\n\nconst checkRowsCount = rowsCount => rowsCount === 0 || rowsCount < 0;\n\nconst checkColumnsCount = columnsCount => columnsCount === 0 || columnsCount < 0;\n\nconst checkCellsCount = cellsCount => cellsCount < 0;\n\nconst checkSettings = (rowsCount, columnsCount, cellsCount) => {\n  if (checkRowsCount(rowsCount) && checkColumnsCount(columnsCount) && checkCellsCount(cellsCount)) {\n    return ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE;\n  } else if (checkRowsCount(rowsCount) && checkColumnsCount(columnsCount)) {\n    return ROWS_COLUMNS_COUNT_ERROR_MESSAGE;\n  } // else if ()\n  else if (checkRowsCount(rowsCount)) {\n      return ROWS_COUNT_ERROR_MESSAGE;\n    } else if (checkColumnsCount(columnsCount)) {\n      return COLUMNS_COUNT_ERROR_MESSAGE;\n    } else if (checkCellsCount(cellsCount)) {\n      return CELLS_COUNT_ERROR_MESSAGE;\n    }\n};\n\nconst SettingsTable = () => {\n  const settings = useSelector(state => state.matrix.settings);\n  const dispatch = useDispatch();\n  const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n  const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n  const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n  const [error, setError] = useState(\"\");\n\n  const showErrorMessage = message => {\n    setError(message);\n    setTimeout(() => {\n      setError(\"\");\n    }, 3000);\n  };\n\n  const applySettingsHandler = () => {\n    const error = checkSettings(rowsCount, columnsCount, cellsCount);\n\n    if (error) {\n      showErrorMessage(error);\n    } else {\n      dispatch(setSettings({\n        rowsCount,\n        columnsCount,\n        cellsCount\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"rows-input\",\n    className: inputClassName,\n    label: \"Set the rows count\",\n    value: rowsCount,\n    onChangeInput: setRowsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"columns-input\",\n    className: inputClassName,\n    label: \"Set the columns count\",\n    value: columnsCount,\n    onChangeInput: setColumnsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"cells-input\",\n    className: inputClassName,\n    label: \"Set the count of cells to show the nearest value\",\n    value: cellsCount,\n    onChangeInput: setCellsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"red-button\",\n    buttonText: \"Apply settings\",\n    buttonClickHandler: applySettingsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 10\n    }\n  }), error && /*#__PURE__*/React.createElement(ErrorHint, {\n    errorText: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }\n  }));\n};\n\nexport default SettingsTable;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js"],"names":["React","useState","useDispatch","useSelector","setSettings","Button","ErrorHint","Input","inputClassName","ROWS_COUNT_ERROR_MESSAGE","COLUMNS_COUNT_ERROR_MESSAGE","CELLS_COUNT_ERROR_MESSAGE","ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE","ROWS_COLUMNS_COUNT_ERROR_MESSAGE","ROWS_CELLS_COUNT_ERROR_MESSAGE","checkRowsCount","rowsCount","checkColumnsCount","columnsCount","checkCellsCount","cellsCount","checkSettings","SettingsTable","settings","state","matrix","dispatch","setRowsCount","setColumnsCount","setCellsCount","error","setError","showErrorMessage","message","setTimeout","applySettingsHandler"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\n\nconst inputClassName = \"input-settings\";\nconst ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows value\";\nconst COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns value\";\nconst CELLS_COUNT_ERROR_MESSAGE = \"Please, set the correct cells value\";\nconst ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows, columns and cells value\";\nconst ROWS_COLUMNS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows and columns value\";\nconst ROWS_CELLS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows and cells value\";\nconst checkRowsCount = (rowsCount) => rowsCount === 0 || rowsCount < 0;\nconst checkColumnsCount = (columnsCount) =>\n   columnsCount === 0 || columnsCount < 0;\nconst checkCellsCount = (cellsCount) => cellsCount < 0;\nconst checkSettings = (rowsCount, columnsCount, cellsCount) => {\n   if (\n      checkRowsCount(rowsCount) &&\n      checkColumnsCount(columnsCount) &&\n      checkCellsCount(cellsCount)\n   ) {\n      return ROWS_COLUMNS_CELLS_COUNT_ERROR_MESSAGE;\n   } else if (checkRowsCount(rowsCount) && checkColumnsCount(columnsCount)) {\n      return ROWS_COLUMNS_COUNT_ERROR_MESSAGE;\n   }\n   // else if ()\n   else if (checkRowsCount(rowsCount)) {\n      return ROWS_COUNT_ERROR_MESSAGE;\n   } else if (checkColumnsCount(columnsCount)) {\n      return COLUMNS_COUNT_ERROR_MESSAGE;\n   } else if (checkCellsCount(cellsCount)) {\n      return CELLS_COUNT_ERROR_MESSAGE;\n   }\n};\n\nconst SettingsTable = () => {\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [error, setError] = useState(\"\");\n\n   const showErrorMessage = (message) => {\n      setError(message);\n      setTimeout(() => {\n         setError(\"\");\n      }, 3000);\n   };\n\n   const applySettingsHandler = () => {\n      const error = checkSettings(rowsCount, columnsCount, cellsCount);\n      if (error) {\n         showErrorMessage(error);\n      } else {\n         dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n      }\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <Input\n            id=\"rows-input\"\n            className={inputClassName}\n            label=\"Set the rows count\"\n            value={rowsCount}\n            onChangeInput={setRowsCount}\n         />\n         <Input\n            id=\"columns-input\"\n            className={inputClassName}\n            label=\"Set the columns count\"\n            value={columnsCount}\n            onChangeInput={setColumnsCount}\n         />\n         <Input\n            id=\"cells-input\"\n            className={inputClassName}\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            onChangeInput={setCellsCount}\n         />\n         <Button\n            className=\"red-button\"\n            buttonText=\"Apply settings\"\n            buttonClickHandler={applySettingsHandler}\n         />\n         {error && <ErrorHint errorText={error} />}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n"]},"metadata":{},"sourceType":"module"}