{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/RowFragment/index.js\";\nimport React, { useState } from \"react\";\nimport PercentageCell from \"../CellRenderer/PercentageCell\";\nimport StaticCell from \"../CellRenderer/StaticCell\";\nimport SumCell from \"../CellRenderer/SumCell\";\n\nconst RowFragment = ({\n  label,\n  RendererType,\n  rowData,\n  sumRow\n}) => {\n  const [showPercentageValue, setShowPercentageValue] = useState(false);\n  const Renderer = showPercentageValue ? PercentageCell : RendererType;\n  const rowCells = rowData.map((cellData, index) => {\n    const value = cellData.value || cellData;\n\n    /*#__PURE__*/\n    React.createElement(Renderer, {\n      key: cellData.id || index,\n      id: cellData.id,\n      value: value,\n      sumRow: sumRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(StaticCell, {\n    key: label,\n    value: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }\n  }), rowCells, /*#__PURE__*/React.createElement(SumCell, {\n    key: sumRow,\n    value: sumRow,\n    sumMouseEnterHandler: () => setShowPercentageValue(true),\n    sumMouseLeaveHandler: () => setShowPercentageValue(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default RowFragment;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/RowFragment/index.js"],"names":["React","useState","PercentageCell","StaticCell","SumCell","RowFragment","label","RendererType","rowData","sumRow","showPercentageValue","setShowPercentageValue","Renderer","rowCells","map","cellData","index","value","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,YAAT;AAAuBC,EAAAA,OAAvB;AAAgCC,EAAAA;AAAhC,CAAD,KAA8C;AAC/D,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDV,QAAQ,CAAC,KAAD,CAA9D;AACA,QAAMW,QAAQ,GAAGF,mBAAmB,GAAGR,cAAH,GAAoBK,YAAxD;AACA,QAAMM,QAAQ,GAAGL,OAAO,CAACM,GAAR,CAAY,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC/C,UAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAT,IAAkBF,QAAhC;;AACA;AAAA,wBAAC,QAAD;AACG,MAAA,GAAG,EAAEA,QAAQ,CAACG,EAAT,IAAeF,KADvB;AAEG,MAAA,EAAE,EAAED,QAAQ,CAACG,EAFhB;AAGG,MAAA,KAAK,EAAED,KAHV;AAIG,MAAA,MAAM,EAAER,MAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMF,GARgB,CAAjB;AAUA,sBACG,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEH,KAAjB;AAAwB,IAAA,KAAK,EAAEA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAEIO,QAFJ,eAGG,oBAAC,OAAD;AACG,IAAA,GAAG,EAAEJ,MADR;AAEG,IAAA,KAAK,EAAEA,MAFV;AAGG,IAAA,oBAAoB,EAAE,MAAME,sBAAsB,CAAC,IAAD,CAHrD;AAIG,IAAA,oBAAoB,EAAE,MAAMA,sBAAsB,CAAC,KAAD,CAJrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHH,CADH;AAYF,CAzBD;;AA2BA,eAAeN,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PercentageCell from \"../CellRenderer/PercentageCell\";\nimport StaticCell from \"../CellRenderer/StaticCell\";\nimport SumCell from \"../CellRenderer/SumCell\";\n\nconst RowFragment = ({ label, RendererType, rowData, sumRow }) => {\n   const [showPercentageValue, setShowPercentageValue] = useState(false);\n   const Renderer = showPercentageValue ? PercentageCell : RendererType;\n   const rowCells = rowData.map((cellData, index) => {\n      const value = cellData.value || cellData;\n      <Renderer\n         key={cellData.id || index}\n         id={cellData.id}\n         value={value}\n         sumRow={sumRow}\n      />;\n   });\n\n   return (\n      <React.Fragment>\n         <StaticCell key={label} value={label} />\n         {rowCells}\n         <SumCell\n            key={sumRow}\n            value={sumRow}\n            sumMouseEnterHandler={() => setShowPercentageValue(true)}\n            sumMouseLeaveHandler={() => setShowPercentageValue(false)}\n         />\n      </React.Fragment>\n   );\n};\n\nexport default RowFragment;\n"]},"metadata":{},"sourceType":"module"}