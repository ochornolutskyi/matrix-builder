{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Table/TableBody/AverageRow/index.js\";\nimport React, { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport NumerableCell from \"../TableRow/TableCell/NumerableCell\";\n\nconst AverageRow = () => {\n  const data = useSelector(state => state.matrix.data.map(item => item.filter(data => data.value).map(row => row.value)));\n  const averageValues = useMemo(() => {\n    //current row values and next row values return the sum of values by equal index\n    return data.reduce((current, next) => current.map((value, index) => value + next[index])).map(value => value / data.length);\n  }, [data]);\n  const averageCells = averageValues.map((value, index) => /*#__PURE__*/React.createElement(NumerableCell, {\n    key: index,\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, averageCells);\n};\n\nexport default AverageRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Table/TableBody/AverageRow/index.js"],"names":["React","useMemo","useSelector","NumerableCell","AverageRow","data","state","matrix","map","item","filter","value","row","averageValues","reduce","current","next","index","length","averageCells"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACtB,QAAMC,IAAI,GAAGH,WAAW,CAAEI,KAAD,IACtBA,KAAK,CAACC,MAAN,CAAaF,IAAb,CAAkBG,GAAlB,CAAuBC,IAAD,IACnBA,IAAI,CAACC,MAAL,CAAaL,IAAD,IAAUA,IAAI,CAACM,KAA3B,EAAkCH,GAAlC,CAAuCI,GAAD,IAASA,GAAG,CAACD,KAAnD,CADH,CADqB,CAAxB;AAKA,QAAME,aAAa,GAAGZ,OAAO,CAAC,MAAM;AACjC;AACA,WAAOI,IAAI,CACPS,MADG,CACI,CAACC,OAAD,EAAUC,IAAV,KACLD,OAAO,CAACP,GAAR,CAAY,CAACG,KAAD,EAAQM,KAAR,KAAkBN,KAAK,GAAGK,IAAI,CAACC,KAAD,CAA1C,CAFC,EAIHT,GAJG,CAIEG,KAAD,IAAWA,KAAK,GAAGN,IAAI,CAACa,MAJzB,CAAP;AAKF,GAP4B,EAO1B,CAACb,IAAD,CAP0B,CAA7B;AASA,QAAMc,YAAY,GAAGN,aAAa,CAACL,GAAd,CAAkB,CAACG,KAAD,EAAQM,KAAR,kBACpC,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEA,KAApB;AAA2B,IAAA,KAAK,EAAEN,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADkB,CAArB;AAIA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKQ,YAAL,CAAP;AACF,CApBD;;AAsBA,eAAef,UAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport NumerableCell from \"../TableRow/TableCell/NumerableCell\";\n\nconst AverageRow = () => {\n   const data = useSelector((state) =>\n      state.matrix.data.map((item) =>\n         item.filter((data) => data.value).map((row) => row.value)\n      )\n   );\n   const averageValues = useMemo(() => {\n      //current row values and next row values return the sum of values by equal index\n      return data\n         .reduce((current, next) =>\n            current.map((value, index) => value + next[index])\n         )\n         .map((value) => value / data.length);\n   }, [data]);\n\n   const averageCells = averageValues.map((value, index) => (\n      <NumerableCell key={index} value={value} />\n   ));\n\n   return <tr>{averageCells}</tr>;\n};\n\nexport default AverageRow;\n"]},"metadata":{},"sourceType":"module"}