{"ast":null,"code":"const calculateAverageValues = matrixData => {\n  const rowsValues = matrixData.map(item => item.map(row => row.value));\n  let averageValues = [];\n\n  for (let i = 0; i < values[i].length; i++) {\n    const columnValues = rowsValues.map(row => row[i]).reduce((sum, value) => sum + value, 0);\n    console.log(i, values.map(row => row[i]));\n    const average = columnValues / values.length;\n    averageValues.push(average);\n  }\n\n  return averageValues;\n};\n\nexport default calculateAverageValues;\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/calculateAverageValues.js"],"names":["calculateAverageValues","matrixData","rowsValues","map","item","row","value","averageValues","i","values","length","columnValues","reduce","sum","console","log","average","push"],"mappings":"AAAA,MAAMA,sBAAsB,GAAIC,UAAD,IAAgB;AAC5C,QAAMC,UAAU,GAAGD,UAAU,CAACE,GAAX,CAAgBC,IAAD,IAAUA,IAAI,CAACD,GAAL,CAAUE,GAAD,IAASA,GAAG,CAACC,KAAtB,CAAzB,CAAnB;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAAM,CAACD,CAAD,CAAN,CAAUE,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACxC,UAAMG,YAAY,GAAGT,UAAU,CAC3BC,GADiB,CACZE,GAAD,IAASA,GAAG,CAACG,CAAD,CADC,EAEjBI,MAFiB,CAEV,CAACC,GAAD,EAAMP,KAAN,KAAgBO,GAAG,GAAGP,KAFZ,EAEmB,CAFnB,CAArB;AAGAQ,IAAAA,OAAO,CAACC,GAAR,CACGP,CADH,EAEGC,MAAM,CAACN,GAAP,CAAYE,GAAD,IAASA,GAAG,CAACG,CAAD,CAAvB,CAFH;AAIA,UAAMQ,OAAO,GAAGL,YAAY,GAAGF,MAAM,CAACC,MAAtC;AACAH,IAAAA,aAAa,CAACU,IAAd,CAAmBD,OAAnB;AACF;;AACD,SAAOT,aAAP;AACF,CAfD;;AAgBA,eAAeP,sBAAf;AAEA","sourcesContent":["const calculateAverageValues = (matrixData) => {\n   const rowsValues = matrixData.map((item) => item.map((row) => row.value));\n   let averageValues = [];\n   for (let i = 0; i < values[i].length; i++) {\n      const columnValues = rowsValues\n         .map((row) => row[i])\n         .reduce((sum, value) => sum + value, 0);\n      console.log(\n         i,\n         values.map((row) => row[i])\n      );\n      const average = columnValues / values.length;\n      averageValues.push(average);\n   }\n   return averageValues;\n};\nexport default calculateAverageValues;\n\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */\n"]},"metadata":{},"sourceType":"module"}