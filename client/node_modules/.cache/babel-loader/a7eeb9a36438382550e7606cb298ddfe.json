{"ast":null,"code":"var calculateAverageValues=function calculateAverageValues(matrixData){var matrixValuesOnly=matrixData.map(function(item){return item.map(function(row){return row.value;});});var columnsNumber=matrixValuesOnly[0].length;var averageValues=[];for(var columnIndex=0;columnIndex<columnsNumber;columnIndex++){var columnSum=0;for(var rowIndex=0;rowIndex<matrixValuesOnly.length;rowIndex++){columnSum+=matrixValuesOnly[rowIndex][columnIndex];}var average=columnSum/matrixValuesOnly.length;averageValues.push(average);}return averageValues;};export default calculateAverageValues;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/calculateAverageValues.js"],"names":["calculateAverageValues","matrixData","matrixValuesOnly","map","item","row","value","columnsNumber","length","averageValues","columnIndex","columnSum","rowIndex","average","push"],"mappings":"AAAA,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,UAAD,CAAgB,CAC5C,GAAMC,CAAAA,gBAAgB,CAAGD,UAAU,CAACE,GAAX,CAAe,SAACC,IAAD,QACrCA,CAAAA,IAAI,CAACD,GAAL,CAAS,SAACE,GAAD,QAASA,CAAAA,GAAG,CAACC,KAAb,EAAT,CADqC,EAAf,CAAzB,CAGA,GAAMC,CAAAA,aAAa,CAAGL,gBAAgB,CAAC,CAAD,CAAhB,CAAoBM,MAA1C,CACA,GAAIC,CAAAA,aAAa,CAAG,EAApB,CACA,IAAK,GAAIC,CAAAA,WAAW,CAAG,CAAvB,CAA0BA,WAAW,CAAGH,aAAxC,CAAuDG,WAAW,EAAlE,CAAsE,CACnE,GAAIC,CAAAA,SAAS,CAAG,CAAhB,CACA,IAAK,GAAIC,CAAAA,QAAQ,CAAG,CAApB,CAAuBA,QAAQ,CAAGV,gBAAgB,CAACM,MAAnD,CAA2DI,QAAQ,EAAnE,CAAuE,CACpED,SAAS,EAAIT,gBAAgB,CAACU,QAAD,CAAhB,CAA2BF,WAA3B,CAAb,CACF,CACD,GAAMG,CAAAA,OAAO,CAAGF,SAAS,CAAGT,gBAAgB,CAACM,MAA7C,CACAC,aAAa,CAACK,IAAd,CAAmBD,OAAnB,EACF,CACD,MAAOJ,CAAAA,aAAP,CACF,CAfD,CAgBA,cAAeT,CAAAA,sBAAf","sourcesContent":["const calculateAverageValues = (matrixData) => {\n   const matrixValuesOnly = matrixData.map((item) =>\n      item.map((row) => row.value)\n   );\n   const columnsNumber = matrixValuesOnly[0].length;\n   let averageValues = [];\n   for (let columnIndex = 0; columnIndex < columnsNumber; columnIndex++) {\n      let columnSum = 0;\n      for (let rowIndex = 0; rowIndex < matrixValuesOnly.length; rowIndex++) {\n         columnSum += matrixValuesOnly[rowIndex][columnIndex];\n      }\n      const average = columnSum / matrixValuesOnly.length;\n      averageValues.push(average);\n   }\n   return averageValues;\n};\nexport default calculateAverageValues;\n"]},"metadata":{},"sourceType":"module"}