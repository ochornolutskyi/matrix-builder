{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\nimport Separate from \"../Separate\";\n\nconst SettingsTable = () => {\n  const settings = useSelector(state => state.matrix.settings);\n  const dispatch = useDispatch();\n  const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n  const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n  const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n  const [isError, setIsError] = useState(false);\n  const [errorText, setErrorText] = useState(\"\");\n  const inputClassName = \"input-settings\";\n  const ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows count\";\n  const COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns count\";\n  const ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows and columns count\";\n\n  const showErrorMessage = message => {\n    setIsError(true);\n    setErrorText(message);\n    setTimeout(() => {\n      setIsError(false);\n    }, 2000);\n  };\n\n  const checkSettings = (rowsCount, columnsCount) => {\n    if ((rowsCount === 0 || rowsCount < 0) && (columnsCount === 0 || columnsCount < 0)) {\n      return ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE;\n    } else if (rowsCount === 0 || rowsCount < 0) {\n      return ROWS_COUNT_ERROR_MESSAGE;\n    } else if (columnsCount === 0 || columnsCount < 0) {\n      return COLUMNS_COUNT_ERROR_MESSAGE;\n    }\n  };\n\n  const applySettingsHandler = () => {\n    const error = checkSettings(rowsCount, columnsCount);\n\n    if (error) {\n      showErrorMessage(error);\n    } else {\n      dispatch(setSettings({\n        rowsCount,\n        columnsCount,\n        cellsCount\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the rows count\",\n    value: rowsCount,\n    onChangeInput: setRowsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the columns count\",\n    value: columnsCount,\n    onChangeInput: setColumnsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the count of cells to show the nearest value\",\n    value: cellsCount,\n    onChangeInput: setCellsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"red-button\",\n    buttonText: \"Apply settings\",\n    buttonClickHandler: applySettingsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Separate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 10\n    }\n  }), isError ? /*#__PURE__*/React.createElement(ErrorHint, {\n    errorText: errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }) : null);\n};\n\nexport default SettingsTable;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js"],"names":["React","useState","useDispatch","useSelector","setSettings","Button","ErrorHint","Input","Separate","SettingsTable","settings","state","matrix","dispatch","rowsCount","setRowsCount","columnsCount","setColumnsCount","cellsCount","setCellsCount","isError","setIsError","errorText","setErrorText","inputClassName","ROWS_COUNT_ERROR_MESSAGE","COLUMNS_COUNT_ERROR_MESSAGE","ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE","showErrorMessage","message","setTimeout","checkSettings","applySettingsHandler","error"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\nimport Separate from \"../Separate\";\n\nconst SettingsTable = () => {\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [isError, setIsError] = useState(false);\n   const [errorText, setErrorText] = useState(\"\");\n   const inputClassName = \"input-settings\";\n   const ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows count\";\n   const COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns count\";\n   const ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE =\n      \"Please, set the correct rows and columns count\";\n\n   const showErrorMessage = (message) => {\n      setIsError(true);\n      setErrorText(message);\n      setTimeout(() => {\n         setIsError(false);\n      }, 2000);\n   };\n   const checkSettings = (rowsCount, columnsCount) => {\n      if (\n         (rowsCount === 0 || rowsCount < 0) &&\n         (columnsCount === 0 || columnsCount < 0)\n      ) {\n         return ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE;\n      } else if (rowsCount === 0 || rowsCount < 0) {\n         return ROWS_COUNT_ERROR_MESSAGE;\n      } else if (columnsCount === 0 || columnsCount < 0) {\n         return COLUMNS_COUNT_ERROR_MESSAGE;\n      }\n   };\n\n   const applySettingsHandler = () => {\n      const error = checkSettings(rowsCount, columnsCount);\n      if (error) {\n         showErrorMessage(error);\n      } else {\n         dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n      }\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <Input\n            className={inputClassName}\n            label=\"Set the rows count\"\n            value={rowsCount}\n            onChangeInput={setRowsCount}\n         />\n         <Input\n            className={inputClassName}\n            label=\"Set the columns count\"\n            value={columnsCount}\n            onChangeInput={setColumnsCount}\n         />\n         <Input\n            className={inputClassName}\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            onChangeInput={setCellsCount}\n         />\n         <Button\n            className=\"red-button\"\n            buttonText=\"Apply settings\"\n            buttonClickHandler={applySettingsHandler}\n         />\n         <Separate />\n         {isError ? <ErrorHint errorText={errorText} /> : null}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n"]},"metadata":{},"sourceType":"module"}