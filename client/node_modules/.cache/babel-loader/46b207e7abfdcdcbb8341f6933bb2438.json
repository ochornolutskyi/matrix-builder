{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\nimport IncrementCell from \"./TableCell/CellRenderer/IncrementCell\";\nimport PercentageCell from \"./TableCell/CellRenderer/PercentageCell\";\nimport StaticCell from \"./TableCell/CellRenderer/StaticCell\";\n\nconst TableRow = ({\n  rowCount,\n  data\n}) => {\n  const dispatch = useDispatch();\n  const [sumIsHover, setSumIsHover] = useState(false);\n  const rowLabel = /*#__PURE__*/React.createElement(StaticCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  });\n\n  const rowCells = () => {\n    const renderer = sumIsHover ? /*#__PURE__*/React.createElement(PercentageCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(IncrementCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 58\n      }\n    });\n    return data.map(cellData => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow);\n      return /*#__PURE__*/React.createElement(\"renderer\", {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum // Renderer={renderer}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","cellRenderers","removeRow","CrossButton","TableCell","IncrementCell","PercentageCell","StaticCell","TableRow","rowCount","data","dispatch","sumIsHover","setSumIsHover","rowLabel","static","rowCells","renderer","map","cellData","percentOfSum","Math","round","value","sumRow","id","reduce","sum","sumRowCell","cells"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,OAAOC,cAAP,MAA2B,yCAA3B;AACA,OAAOC,UAAP,MAAuB,qCAAvB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAwB;AACtC,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMe,QAAQ,gBACX,oBAAC,UAAD;AACG,IAAA,GAAG,EAAEL,QADR;AAEG,IAAA,KAAK,EAAEA,QAFV;AAGG,IAAA,QAAQ,EAAER,aAAa,CAACc,MAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;;AAOA,QAAMC,QAAQ,GAAG,MAAM;AACpB,UAAMC,QAAQ,GAAGL,UAAU,gBAAG,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,gBAAwB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnD;AACA,WAAOF,IAAI,CAACQ,GAAL,CAAUC,QAAD,IAAc;AAC3B,YAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAYH,QAAQ,CAACI,KAAT,GAAiB,GAAlB,GAAyBC,MAApC,CAArB;AACA,0BACG;AACG,QAAA,GAAG,EAAEL,QAAQ,CAACM,EADjB;AAEG,QAAA,EAAE,EAAEN,QAAQ,CAACM,EAFhB;AAGG,QAAA,KAAK,EAAEN,QAAQ,CAACI,KAHnB;AAIG,QAAA,OAAO,EAAEH,YAJZ,CAKG;AALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH;AASF,KAXM,CAAP;AAYF,GAdD;;AAeA,QAAMI,MAAM,GAAGd,IAAI,CACfQ,GADW,CACNR,IAAD,IAAUA,IAAI,CAACa,KADR,EAEXG,MAFW,CAEJ,CAACC,GAAG,GAAG,CAAP,EAAUJ,KAAV,KAAoBI,GAAG,GAAGJ,KAFtB,CAAf;AAGA,QAAMK,UAAU,gBACb,oBAAC,SAAD;AACG,IAAA,GAAG,EAAEJ,MADR;AAEG,IAAA,KAAK,EAAEA,MAFV;AAGG,IAAA,QAAQ,EAAEvB,aAAa,CAAC0B,GAH3B;AAIG,IAAA,oBAAoB,EAAE,MAAMd,aAAa,CAAC,IAAD,CAJ5C;AAKG,IAAA,oBAAoB,EAAE,MAAMA,aAAa,CAAC,KAAD,CAL5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AASA,QAAMgB,KAAK,GAAG,CAACf,QAAD,EAAW,GAAGE,QAAQ,EAAtB,EAA0BY,UAA1B,CAAd;AAEA,sBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,KADJ,eAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,WAAD;AACG,IAAA,kBAAkB,EAAE,MAAMlB,QAAQ,CAACT,SAAS,CAACO,QAAD,CAAV,CADrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAFH,CADH;AAUF,CAlDD;;AAoDA,eAAeD,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\nimport IncrementCell from \"./TableCell/CellRenderer/IncrementCell\";\nimport PercentageCell from \"./TableCell/CellRenderer/PercentageCell\";\nimport StaticCell from \"./TableCell/CellRenderer/StaticCell\";\n\nconst TableRow = ({ rowCount, data }) => {\n   const dispatch = useDispatch();\n   const [sumIsHover, setSumIsHover] = useState(false);\n\n   const rowLabel = (\n      <StaticCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const rowCells = () => {\n      const renderer = sumIsHover ? <PercentageCell /> : <IncrementCell />;\n      return data.map((cellData) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         return (\n            <renderer\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               // Renderer={renderer}\n            />\n         );\n      });\n   };\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumMouseEnterHandler={() => setSumIsHover(true)}\n         sumMouseLeaveHandler={() => setSumIsHover(false)}\n      />\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}