{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/StartPage/StartPage.js\";\nimport React, { useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMatrixColumns, setMatrixRows } from \"../../redux/actions\";\nimport InputCounts from \"./InputCounts\";\nimport \"./StartPage.scss\";\n\nconst StartPage = () => {\n  const matrixSettings = useSelector(state => state.matrix.settings);\n  const dispatch = useDispatch();\n  const matrixRows = useMemo(() => {\n    let matrixData = [];\n\n    for (let i = 0; i < matrixSettings.rows; i++) {\n      matrixData.push([]);\n    }\n\n    console.log(matrixData);\n  }, [matrixSettings.rows]);\n  const createMatrixCells = useMemo(() => {\n    if (matrixRows.length > 0) {\n      matrixRows.forEach((item, index) => {\n        for (let i = 0; i < matrixSettings.columns; i++) {\n          const cellObject = {\n            id: String(index + 1).concat(i + 1),\n            value: Math.round(100 + Math.random() * 899)\n          };\n          item.push(cellObject);\n        }\n      });\n    }\n  }, [matrixRows, matrixSettings.columns]);\n  /*  const createMatrix = (matrixSettings) => {\n     createMatrixRows(matrixSettings);\n  }; */\n\n  /*  const createMatrix = (rowsCount, columnsCount) => {\n     let matrix = [];\n     if (rowsCount === 0 || columnsCount === 0) {\n        console.log(\"counts can't be 0\");\n     } else {\n        const createRows = () => {\n           for (let i = 0; i < rowsCount; i++) {\n              matrix.push([]);\n           }\n        };\n        const createColumns = () => {\n           matrix.forEach((item, index) => {\n              for (let i = 0; i < columnsCount; i++) {\n                 const cellObject = {\n                    id: String(index + 1).concat(i + 1),\n                    value: Math.round(100 + Math.random() * 899),\n                 };\n                 item.push(cellObject);\n              }\n           });\n        };\n        createRows();\n        createColumns();\n     }\n     props.createMatrix(matrix);\n  }; */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"start-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 10\n    }\n  }, \"Welcome to Matrix Builder\"), /*#__PURE__*/React.createElement(InputCounts, {\n    id: \"rows\",\n    label: \"Set the rows count\",\n    handleChange: event => dispatch(setMatrixRows(event.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(InputCounts, {\n    id: \"columns\",\n    label: \"Set the columns count\",\n    handleChange: event => dispatch(setMatrixColumns(event.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(InputCounts, {\n    id: \"cells\",\n    label: \"Set the count of cells to show the nearest value\" // handleChange={handleChangeCells}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default StartPage;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/StartPage/StartPage.js"],"names":["React","useMemo","useDispatch","useSelector","setMatrixColumns","setMatrixRows","InputCounts","StartPage","matrixSettings","state","matrix","settings","dispatch","matrixRows","matrixData","i","rows","push","console","log","createMatrixCells","length","forEach","item","index","columns","cellObject","id","String","concat","value","Math","round","random","event","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,qBAAhD;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,kBAAP;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACrB,QAAMC,cAAc,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaC,QAAzB,CAAlC;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAMW,UAAU,GAAGZ,OAAO,CAAC,MAAM;AAC9B,QAAIa,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,cAAc,CAACQ,IAAnC,EAAyCD,CAAC,EAA1C,EAA8C;AAC3CD,MAAAA,UAAU,CAACG,IAAX,CAAgB,EAAhB;AACF;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACF,GANyB,EAMvB,CAACN,cAAc,CAACQ,IAAhB,CANuB,CAA1B;AAQA,QAAMI,iBAAiB,GAAGnB,OAAO,CAAC,MAAM;AACrC,QAAIY,UAAU,CAACQ,MAAX,GAAoB,CAAxB,EAA2B;AACxBR,MAAAA,UAAU,CAACS,OAAX,CAAmB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,aAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,cAAc,CAACiB,OAAnC,EAA4CV,CAAC,EAA7C,EAAiD;AAC9C,gBAAMW,UAAU,GAAG;AAChBC,YAAAA,EAAE,EAAEC,MAAM,CAACJ,KAAK,GAAG,CAAT,CAAN,CAAkBK,MAAlB,CAAyBd,CAAC,GAAG,CAA7B,CADY;AAEhBe,YAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAW,MAAMD,IAAI,CAACE,MAAL,KAAgB,GAAjC;AAFS,WAAnB;AAIAV,UAAAA,IAAI,CAACN,IAAL,CAAUS,UAAV;AACF;AACH,OARD;AASF;AACH,GAZgC,EAY9B,CAACb,UAAD,EAAaL,cAAc,CAACiB,OAA5B,CAZ8B,CAAjC;AAcA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,sBACG;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADH,eAEG,oBAAC,WAAD;AACG,IAAA,EAAE,EAAC,MADN;AAEG,IAAA,KAAK,EAAC,oBAFT;AAGG,IAAA,YAAY,EAAGS,KAAD,IACXtB,QAAQ,CAACP,aAAa,CAAC6B,KAAK,CAACC,MAAN,CAAaL,KAAd,CAAd,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,eASG,oBAAC,WAAD;AACG,IAAA,EAAE,EAAC,SADN;AAEG,IAAA,KAAK,EAAC,uBAFT;AAGG,IAAA,YAAY,EAAGI,KAAD,IACXtB,QAAQ,CAACR,gBAAgB,CAAC8B,KAAK,CAACC,MAAN,CAAaL,KAAd,CAAjB,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATH,eAgBG,oBAAC,WAAD;AACG,IAAA,EAAE,EAAC,OADN;AAEG,IAAA,KAAK,EAAC,kDAFT,CAGG;AAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBH,CADH;AA2BF,CApFD;;AAsFA,eAAevB,SAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setMatrixColumns, setMatrixRows } from \"../../redux/actions\";\nimport InputCounts from \"./InputCounts\";\nimport \"./StartPage.scss\";\n\nconst StartPage = () => {\n   const matrixSettings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n\n   const matrixRows = useMemo(() => {\n      let matrixData = [];\n      for (let i = 0; i < matrixSettings.rows; i++) {\n         matrixData.push([]);\n      }\n      console.log(matrixData);\n   }, [matrixSettings.rows]);\n\n   const createMatrixCells = useMemo(() => {\n      if (matrixRows.length > 0) {\n         matrixRows.forEach((item, index) => {\n            for (let i = 0; i < matrixSettings.columns; i++) {\n               const cellObject = {\n                  id: String(index + 1).concat(i + 1),\n                  value: Math.round(100 + Math.random() * 899),\n               };\n               item.push(cellObject);\n            }\n         });\n      }\n   }, [matrixRows, matrixSettings.columns]);\n\n   /*  const createMatrix = (matrixSettings) => {\n      createMatrixRows(matrixSettings);\n   }; */\n\n   /*  const createMatrix = (rowsCount, columnsCount) => {\n      let matrix = [];\n      if (rowsCount === 0 || columnsCount === 0) {\n         console.log(\"counts can't be 0\");\n      } else {\n         const createRows = () => {\n            for (let i = 0; i < rowsCount; i++) {\n               matrix.push([]);\n            }\n         };\n         const createColumns = () => {\n            matrix.forEach((item, index) => {\n               for (let i = 0; i < columnsCount; i++) {\n                  const cellObject = {\n                     id: String(index + 1).concat(i + 1),\n                     value: Math.round(100 + Math.random() * 899),\n                  };\n                  item.push(cellObject);\n               }\n            });\n         };\n         createRows();\n         createColumns();\n      }\n      props.createMatrix(matrix);\n   }; */\n\n   return (\n      <div className=\"start-page\">\n         <h1>Welcome to Matrix Builder</h1>\n         <InputCounts\n            id=\"rows\"\n            label=\"Set the rows count\"\n            handleChange={(event) =>\n               dispatch(setMatrixRows(event.target.value))\n            }\n         />\n         <InputCounts\n            id=\"columns\"\n            label=\"Set the columns count\"\n            handleChange={(event) =>\n               dispatch(setMatrixColumns(event.target.value))\n            }\n         />\n         <InputCounts\n            id=\"cells\"\n            label=\"Set the count of cells to show the nearest value\"\n            // handleChange={handleChangeCells}\n         />\n         {/* <button onClick={() => createMatrix(matrixSettings)}>\n            Apply settings of matrix\n         </button> */}\n      </div>\n   );\n};\n\nexport default StartPage;\n"]},"metadata":{},"sourceType":"module"}