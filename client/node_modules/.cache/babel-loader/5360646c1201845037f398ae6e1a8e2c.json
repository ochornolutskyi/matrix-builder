{"ast":null,"code":"const checkTargetValueIsLowest = (sortedData, targetId) => sortedData[0].id === targetId;\n\nconst checkTargetValueIsBiggest = (sortedData, targetId) => sortedData[sortedData.length - 1].id === targetId && console.log('sss');\n\nconst getNearestIdsOfLowestValue = (sortedData, cellsCount) => {\n  return sortedData.slice(1, cellsCount + 1).map(item => item.id);\n};\n\nconst getNearestIdsOfBiggestValue = (sortedData, cellsCount) => {\n  return sortedData.slice(-cellsCount - 1, -1).map(item => item.id);\n};\n\nconst getNearestId = (sortedData, targetId) => {\n  const indexOfTargetId = sortedData.indexOf(sortedData.find(item => item.id === targetId));\n  const prevItem = sortedData[indexOfTargetId - 1];\n  const nextItem = sortedData[indexOfTargetId + 1];\n  const currentItem = sortedData[indexOfTargetId];\n  const prevDiff = Math.abs(currentItem.value - prevItem.value);\n  const nextDiff = Math.abs(nextItem.value - currentItem.value);\n  const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n  return nearestItem.id;\n};\n\nconst findNearestIds = (sortedData, targetId, cellsCount, ids = [], step = 0) => {\n  if (step < cellsCount) {\n    if (checkTargetValueIsLowest(sortedData, targetId)) {\n      ids.push(getNearestIdsOfLowestValue(sortedData, cellsCount - step));\n      return ids.flat();\n    } else if (checkTargetValueIsBiggest(sortedData, targetId)) {\n      ids.push(getNearestIdsOfBiggestValue(sortedData, cellsCount - step));\n      return ids.flat();\n    } else {\n      const id = getNearestId(sortedData, targetId);\n      ids.push(id);\n      sortedData = sortedData.filter(item => item.id !== id);\n      step++;\n      return findNearestIds(sortedData, targetId, cellsCount, ids, step);\n    }\n  }\n\n  return ids;\n};\n\nconst getIds = (sortedData, cellsCount, targetId) => {\n  const targetValue = sortedData.find(item => item.id === targetId).value;\n  const sameValueIds = sortedData.filter(item => item.value === targetValue && item.id !== targetId).map(item => item.id);\n\n  if (sameValueIds.length > 0) {\n    sortedData = sortedData.filter(item => !sameValueIds.includes(item.id));\n  }\n\n  const nearestIds = findNearestIds(sortedData, targetId, cellsCount);\n  return {\n    sameValueIds,\n    ids: nearestIds\n  };\n};\n\nexport default getIds;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer/findNearestIds.js"],"names":["checkTargetValueIsLowest","sortedData","targetId","id","checkTargetValueIsBiggest","length","console","log","getNearestIdsOfLowestValue","cellsCount","slice","map","item","getNearestIdsOfBiggestValue","getNearestId","indexOfTargetId","indexOf","find","prevItem","nextItem","currentItem","prevDiff","Math","abs","value","nextDiff","nearestItem","findNearestIds","ids","step","push","flat","filter","getIds","targetValue","sameValueIds","includes","nearestIds"],"mappings":"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","sourcesContent":["const checkTargetValueIsLowest = (sortedData, targetId) =>\n   sortedData[0].id === targetId;\nconst checkTargetValueIsBiggest = (sortedData, targetId) =>\n   sortedData[sortedData.length - 1].id === targetId && console.log('sss');\nconst getNearestIdsOfLowestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(1, cellsCount + 1).map((item) => item.id);\n};\nconst getNearestIdsOfBiggestValue = (sortedData, cellsCount) => {\n   return sortedData.slice(-cellsCount - 1, -1).map((item) => item.id);\n};\nconst getNearestId = (sortedData, targetId) => {\n   const indexOfTargetId = sortedData.indexOf(\n      sortedData.find((item) => item.id === targetId)\n   );\n   const prevItem = sortedData[indexOfTargetId - 1];\n   const nextItem = sortedData[indexOfTargetId + 1];\n   const currentItem = sortedData[indexOfTargetId];\n   const prevDiff = Math.abs(currentItem.value - prevItem.value);\n   const nextDiff = Math.abs(nextItem.value - currentItem.value);\n   const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n   return nearestItem.id;\n};\nconst findNearestIds = (\n   sortedData,\n   targetId,\n   cellsCount,\n   ids = [],\n   step = 0\n) => {\n   if (step < cellsCount) {\n      if (checkTargetValueIsLowest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfLowestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else if (checkTargetValueIsBiggest(sortedData, targetId)) {\n         ids.push(getNearestIdsOfBiggestValue(sortedData, cellsCount - step));\n         return ids.flat();\n      } else {\n         const id = getNearestId(sortedData, targetId);\n         ids.push(id);\n         sortedData = sortedData.filter((item) => item.id !== id);\n         step++;\n         return findNearestIds(sortedData, targetId, cellsCount, ids, step);\n      }\n   }\n   return ids;\n};\nconst getIds = (sortedData, cellsCount, targetId) => {\n   const targetValue = sortedData.find((item) => item.id === targetId).value;\n   const sameValueIds = sortedData\n      .filter((item) => item.value === targetValue && item.id !== targetId)\n      .map((item) => item.id);\n   if (sameValueIds.length > 0) {\n      sortedData = sortedData.filter((item) => !sameValueIds.includes(item.id));\n   }\n   const nearestIds = findNearestIds(sortedData, targetId, cellsCount);\n   return { sameValueIds, ids: nearestIds };\n};\n\nexport default getIds;\n"]},"metadata":{},"sourceType":"module"}