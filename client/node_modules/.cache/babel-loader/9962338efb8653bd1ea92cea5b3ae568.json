{"ast":null,"code":"import { INCREMENT_CELL, REMOVE_ROW, ADD_ROW, SET_NEAREST_IDS, RESET_NEAREST_IDS, SET_SETTINGS } from \"../types\";\nconst initialState = {\n  settings: {\n    rowsCount: 0,\n    columnsCount: 0,\n    cellsCount: 0\n  },\n  data: [],\n  sortedData: [],\n  nearestIds: {\n    sameValueIds: [],\n    ids: []\n  }\n};\n\nconst sortData = data => {\n  if (data.length > 0) {\n    return data.flat().sort((a, b) => a.value - b.value);\n  }\n}; //Building matrix functions\n\n\nconst addCells = (columnsCount, row = [], step = 0) => {\n  while (step < columnsCount) {\n    row.push({\n      id: Date.now().concat(Math.round(100 + Math.random() * 899)),\n      value: Math.round(100 + Math.random() * 899)\n    });\n    step++;\n  }\n\n  return row;\n};\n\nconst addRows = (data, rowsCount, columnsCount, step = 0) => {\n  while (step < rowsCount) {\n    const rowCells = addCells(columnsCount);\n    data.push(rowCells);\n    step++;\n  }\n\n  return data;\n};\n\nconst createMatrix = (rowsCount, columnsCount, data = []) => {\n  return addRows(data, rowsCount, columnsCount);\n};\n\nconst rebuildMatrix = (data, prevSettings, newSettings) => {\n  const rebuildColumns = () => {\n    let columnsCountDiff = 0;\n\n    if (prevSettings.columnsCount < newSettings.columnsCount) {\n      columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n      data.forEach((row, index) => addCells(index, columnsCountDiff, row));\n    } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n      columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n      data.forEach(row => row.splice(-columnsCountDiff));\n    }\n\n    return data;\n  };\n\n  const rebuildRows = () => {\n    let rowsCountDiff = 0;\n\n    if (prevSettings.rowsCount < newSettings.rowsCount) {\n      rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n      addRows(data, rowsCountDiff, newSettings.columnsCount);\n    } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n      rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n      data.splice(-rowsCountDiff);\n    }\n\n    return data;\n  };\n\n  rebuildColumns(data, prevSettings, newSettings);\n  rebuildRows(data, prevSettings, newSettings);\n  return data;\n}; //\n//find nearest values functions\n\n\nconst checkTargetValueIsLowest = (data, targetId) => {\n  if (data.indexOf(data.find(item => item.id === targetId)) === 0) {\n    return true;\n  }\n};\n\nconst checkTargetValueIsBiggest = (data, targetId) => {\n  if (data.indexOf(data.find(item => item.id === targetId)) === data.length - 1) {\n    return true;\n  }\n};\n\nconst getNearestIdsOfLowestValue = (data, cellsCount) => {\n  return data.splice(1, cellsCount).map(item => item.id);\n};\n\nconst getNearestIdsOfBiggestValue = (data, cellsCount) => {\n  return data.splice(-cellsCount - 1, cellsCount).map(item => item.id);\n};\n\nconst getNearestId = (data, targetId) => {\n  const indexOfTargetId = data.indexOf(data.find(item => item.id === targetId));\n  const prevItem = data[indexOfTargetId - 1];\n  const nextItem = data[indexOfTargetId + 1];\n  const currentItem = data[indexOfTargetId];\n  const prevDiff = Math.abs(currentItem.value - prevItem.value);\n  const nextDiff = Math.abs(nextItem.value - currentItem.value);\n  const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n  return nearestItem.id;\n};\n\nconst findNearestIds = (data, targetId, cellsCount, ids = [], step = 0) => {\n  while (step < cellsCount) {\n    if (checkTargetValueIsLowest(data, targetId)) {\n      ids.push(getNearestIdsOfLowestValue(data, cellsCount - step));\n      return ids.flat();\n    } else if (checkTargetValueIsBiggest(data, targetId)) {\n      ids.push(getNearestIdsOfBiggestValue(data, cellsCount - step));\n      return ids.flat();\n    } else {\n      const id = getNearestId(data, targetId);\n      ids.push(id);\n      data = data.filter(item => item.id !== id);\n      console.log(data.length, ids); // data.splice(data.indexOf(data.find((item) => item.id === id)), 1);\n\n      step++;\n      return findNearestIds(data, targetId, cellsCount, ids, step);\n    }\n  }\n\n  return ids;\n};\n\nconst getIds = (data, cellsCount, targetId) => {\n  // let data = [...sortedData];\n  const targetValue = data.find(item => item.id === targetId).value;\n  const sameValueIds = data.filter(item => item.value === targetValue && item.id !== targetId).map(item => item.id);\n\n  if (sameValueIds.length > 0) {\n    data = data.filter(item => !sameValueIds.includes(item.id));\n  }\n\n  const nearestIds = findNearestIds(data, targetId, cellsCount);\n  return {\n    sameValueIds,\n    ids: nearestIds\n  };\n};\n\nconst matrixReducer = (state = initialState, action) => {\n  let settings = { ...state.settings\n  },\n      data = [...state.data],\n      nearestIds = { ...state.nearestIds\n  },\n      sortedData = [...state.sortedData];\n\n  switch (action.type) {\n    case SET_SETTINGS:\n      const newSettings = { ...action.settings\n      };\n\n      if (data.length === 0) {\n        data = createMatrix(newSettings.rowsCount, newSettings.columnsCount);\n      } else if (settings.rowsCount !== newSettings.rowsCount || settings.columnsCount !== newSettings.columnsCount) {\n        rebuildMatrix(data, settings, newSettings);\n      }\n\n      sortedData = sortData(data);\n      settings = newSettings;\n      return { ...state,\n        data,\n        sortedData,\n        settings\n      };\n\n    case ADD_ROW:\n      addRows(1, settings.columnsCount);\n      settings.rowsCount = data.length;\n      sortedData = sortData(data);\n      return { ...state,\n        settings,\n        sortedData,\n        data\n      };\n\n    case REMOVE_ROW:\n      data.splice(action.rowIndex, 1);\n      settings.rowsCount = data.length;\n      sortedData = sortData(data);\n      return { ...state,\n        data,\n        sortedData,\n        settings\n      };\n\n    case INCREMENT_CELL:\n      data.find(row => row.find(item => item.id === action.id ? item.value++ : null));\n      sortedData = sortData(data);\n      nearestIds = getIds(sortedData, settings.cellsCount, action.id);\n      return { ...state,\n        data,\n        sortedData,\n        nearestIds\n      };\n\n    case SET_NEAREST_IDS:\n      nearestIds = getIds(sortedData, settings.cellsCount, action.id);\n      return { ...state,\n        nearestIds\n      };\n\n    case RESET_NEAREST_IDS:\n      data = [...state.data];\n      nearestIds = {\n        sameValueIds: [],\n        ids: []\n      };\n      return { ...state,\n        nearestIds: {\n          sameValueIds: [],\n          ids: []\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default matrixReducer;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer.js"],"names":["INCREMENT_CELL","REMOVE_ROW","ADD_ROW","SET_NEAREST_IDS","RESET_NEAREST_IDS","SET_SETTINGS","initialState","settings","rowsCount","columnsCount","cellsCount","data","sortedData","nearestIds","sameValueIds","ids","sortData","length","flat","sort","a","b","value","addCells","row","step","push","id","Date","now","concat","Math","round","random","addRows","rowCells","createMatrix","rebuildMatrix","prevSettings","newSettings","rebuildColumns","columnsCountDiff","forEach","index","splice","rebuildRows","rowsCountDiff","checkTargetValueIsLowest","targetId","indexOf","find","item","checkTargetValueIsBiggest","getNearestIdsOfLowestValue","map","getNearestIdsOfBiggestValue","getNearestId","indexOfTargetId","prevItem","nextItem","currentItem","prevDiff","abs","nextDiff","nearestItem","findNearestIds","filter","console","log","getIds","targetValue","includes","matrixReducer","state","action","type","rowIndex"],"mappings":"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","sourcesContent":["import {\n   INCREMENT_CELL,\n   REMOVE_ROW,\n   ADD_ROW,\n   SET_NEAREST_IDS,\n   RESET_NEAREST_IDS,\n   SET_SETTINGS,\n} from \"../types\";\n\nconst initialState = {\n   settings: { rowsCount: 0, columnsCount: 0, cellsCount: 0 },\n   data: [],\n   sortedData: [],\n   nearestIds: { sameValueIds: [], ids: [] },\n};\nconst sortData = (data) => {\n   if (data.length > 0) {\n      return data.flat().sort((a, b) => a.value - b.value);\n   }\n};\n//Building matrix functions\nconst addCells = (columnsCount, row = [], step = 0) => {\n   while (step < columnsCount) {\n      row.push({\n         id: Date.now().concat(Math.round(100 + Math.random() * 899)),\n         value: Math.round(100 + Math.random() * 899),\n      });\n      step++;\n   }\n   return row;\n};\nconst addRows = (data, rowsCount, columnsCount, step = 0) => {\n   while (step < rowsCount) {\n      const rowCells = addCells(columnsCount);\n      data.push(rowCells);\n      step++;\n   }\n   return data;\n};\nconst createMatrix = (rowsCount, columnsCount, data = []) => {\n   return addRows(data, rowsCount, columnsCount);\n};\nconst rebuildMatrix = (data, prevSettings, newSettings) => {\n   const rebuildColumns = () => {\n      let columnsCountDiff = 0;\n      if (prevSettings.columnsCount < newSettings.columnsCount) {\n         columnsCountDiff =\n            newSettings.columnsCount - prevSettings.columnsCount;\n         data.forEach((row, index) => addCells(index, columnsCountDiff, row));\n      } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n         columnsCountDiff =\n            prevSettings.columnsCount - newSettings.columnsCount;\n         data.forEach((row) => row.splice(-columnsCountDiff));\n      }\n      return data;\n   };\n   const rebuildRows = () => {\n      let rowsCountDiff = 0;\n      if (prevSettings.rowsCount < newSettings.rowsCount) {\n         rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n         addRows(data, rowsCountDiff, newSettings.columnsCount);\n      } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n         rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n         data.splice(-rowsCountDiff);\n      }\n      return data;\n   };\n   rebuildColumns(data, prevSettings, newSettings);\n   rebuildRows(data, prevSettings, newSettings);\n   return data;\n};\n//\n//find nearest values functions\nconst checkTargetValueIsLowest = (data, targetId) => {\n   if (data.indexOf(data.find((item) => item.id === targetId)) === 0) {\n      return true;\n   }\n};\nconst checkTargetValueIsBiggest = (data, targetId) => {\n   if (\n      data.indexOf(data.find((item) => item.id === targetId)) ===\n      data.length - 1\n   ) {\n      return true;\n   }\n};\nconst getNearestIdsOfLowestValue = (data, cellsCount) => {\n   return data.splice(1, cellsCount).map((item) => item.id);\n};\nconst getNearestIdsOfBiggestValue = (data, cellsCount) => {\n   return data.splice(-cellsCount - 1, cellsCount).map((item) => item.id);\n};\nconst getNearestId = (data, targetId) => {\n   const indexOfTargetId = data.indexOf(\n      data.find((item) => item.id === targetId)\n   );\n   const prevItem = data[indexOfTargetId - 1];\n   const nextItem = data[indexOfTargetId + 1];\n   const currentItem = data[indexOfTargetId];\n   const prevDiff = Math.abs(currentItem.value - prevItem.value);\n   const nextDiff = Math.abs(nextItem.value - currentItem.value);\n   const nearestItem = prevDiff < nextDiff ? prevItem : nextItem;\n   return nearestItem.id;\n};\nconst findNearestIds = (data, targetId, cellsCount, ids = [], step = 0) => {\n   while (step < cellsCount) {\n      if (checkTargetValueIsLowest(data, targetId)) {\n         ids.push(getNearestIdsOfLowestValue(data, cellsCount - step));\n         return ids.flat();\n      } else if (checkTargetValueIsBiggest(data, targetId)) {\n         ids.push(getNearestIdsOfBiggestValue(data, cellsCount - step));\n         return ids.flat();\n      } else {\n         const id = getNearestId(data, targetId);\n         ids.push(id);\n         data = data.filter((item) => item.id !== id);\n         console.log(data.length, ids);\n         // data.splice(data.indexOf(data.find((item) => item.id === id)), 1);\n         step++;\n         return findNearestIds(data, targetId, cellsCount, ids, step);\n      }\n   }\n   return ids;\n};\nconst getIds = (data, cellsCount, targetId) => {\n   // let data = [...sortedData];\n   const targetValue = data.find((item) => item.id === targetId).value;\n   const sameValueIds = data\n      .filter((item) => item.value === targetValue && item.id !== targetId)\n      .map((item) => item.id);\n   if (sameValueIds.length > 0) {\n      data = data.filter((item) => !sameValueIds.includes(item.id));\n   }\n   const nearestIds = findNearestIds(data, targetId, cellsCount);\n   return { sameValueIds, ids: nearestIds };\n};\n\nconst matrixReducer = (state = initialState, action) => {\n   let settings = { ...state.settings },\n      data = [...state.data],\n      nearestIds = { ...state.nearestIds },\n      sortedData = [...state.sortedData];\n   switch (action.type) {\n      case SET_SETTINGS:\n         const newSettings = { ...action.settings };\n         if (data.length === 0) {\n            data = createMatrix(\n               newSettings.rowsCount,\n               newSettings.columnsCount\n            );\n         } else if (\n            settings.rowsCount !== newSettings.rowsCount ||\n            settings.columnsCount !== newSettings.columnsCount\n         ) {\n            rebuildMatrix(data, settings, newSettings);\n         }\n         sortedData = sortData(data);\n         settings = newSettings;\n         return { ...state, data, sortedData, settings };\n      case ADD_ROW:\n         addRows(1, settings.columnsCount);\n         settings.rowsCount = data.length;\n         sortedData = sortData(data);\n         return { ...state, settings, sortedData, data };\n      case REMOVE_ROW:\n         data.splice(action.rowIndex, 1);\n         settings.rowsCount = data.length;\n         sortedData = sortData(data);\n         return { ...state, data, sortedData, settings };\n      case INCREMENT_CELL:\n         data.find((row) =>\n            row.find((item) => (item.id === action.id ? item.value++ : null))\n         );\n         sortedData = sortData(data);\n         nearestIds = getIds(sortedData, settings.cellsCount, action.id);\n         return { ...state, data, sortedData, nearestIds };\n      case SET_NEAREST_IDS:\n         nearestIds = getIds(sortedData, settings.cellsCount, action.id);\n         return { ...state, nearestIds };\n      case RESET_NEAREST_IDS:\n         data = [...state.data];\n         nearestIds = { sameValueIds: [], ids: [] };\n         return { ...state, nearestIds: { sameValueIds: [], ids: [] } };\n      default:\n         return state;\n   }\n};\n\nexport default matrixReducer;\n"]},"metadata":{},"sourceType":"module"}