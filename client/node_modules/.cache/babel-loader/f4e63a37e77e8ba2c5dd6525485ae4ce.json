{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetSettings, setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\n\nconst SettingsTable = () => {\n  const matrixData = useSelector(state => state.matrix.data);\n  const settings = useSelector(state => state.matrix.settings);\n  const dispatch = useDispatch();\n  const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n  const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n  const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n  const [isError, setIsError] = useState(false);\n  const [errorText, setErrorText] = useState('');\n  const inputClassName = \"input-settings\";\n  const ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows count\";\n  const COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns count\";\n  const ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows and columns count\";\n  useEffect(() => {\n    if (matrixData.length === 0) {\n      dispatch(resetSettings());\n    }\n  }, [matrixData.length]);\n\n  const showErrorMessage = message => {\n    setIsShowErrorHint(true);\n    setErrorText;\n    setTimeout(() => {\n      setIsShowErrorHint(false);\n    }, 2000);\n  };\n\n  const applySettingsHandler = () => {\n    if (isShowErrorHint) {\n      return;\n    } else {\n      if (rowsCount > 0 && columnsCount > 0) {\n        dispatch(setSettings({\n          rowsCount,\n          columnsCount,\n          cellsCount\n        }));\n      }\n\n      if ((rowsCount === 0 || rowsCount < 0) && (columnsCount === 0 || columnsCount < 0)) {} else if (rowsCount === 0 || rowsCount < 0) {\n        setIsShowErrorHint(true);\n        setErrorText();\n        setTimeout(() => {\n          setIsShowErrorHint(false);\n        }, 2000);\n      } else if (columnsCount === 0 || columnsCount < 0) {\n        setIsShowErrorHint(true);\n        setErrorText();\n        setTimeout(() => {\n          setIsShowErrorHint(false);\n        }, 2000);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the rows count\",\n    value: rowsCount,\n    onChangeInput: setRowsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the columns count\",\n    value: columnsCount,\n    onChangeInput: setColumnsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    className: inputClassName,\n    label: \"Set the count of cells to show the nearest value\",\n    value: cellsCount,\n    onChangeInput: setCellsCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"red-button\",\n    buttonText: \"Apply settings\",\n    buttonClickHandler: applySettingsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }\n  }), isError ? /*#__PURE__*/React.createElement(ErrorHint, {\n    errorText: errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }) : null);\n};\n\nexport default SettingsTable;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","resetSettings","setSettings","Button","ErrorHint","Input","SettingsTable","matrixData","state","matrix","data","settings","dispatch","rowsCount","setRowsCount","columnsCount","setColumnsCount","cellsCount","setCellsCount","isError","setIsError","errorText","setErrorText","inputClassName","ROWS_COUNT_ERROR_MESSAGE","COLUMNS_COUNT_ERROR_MESSAGE","ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE","length","showErrorMessage","message","setIsShowErrorHint","setTimeout","applySettingsHandler","isShowErrorHint"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetSettings, setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\n\nconst SettingsTable = () => {\n   const matrixData = useSelector((state) => state.matrix.data);\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [isError, setIsError] = useState(false);\n   const [errorText, setErrorText] = useState('')\n   const inputClassName = \"input-settings\";\n   const ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows count\";\n   const COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns count\";\n   const ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE =\n      \"Please, set the correct rows and columns count\";\n\n   useEffect(() => {\n      if (matrixData.length === 0) {\n         dispatch(resetSettings());\n      }\n   }, [matrixData.length]);\n\n   const showErrorMessage = (message) => {\n      setIsShowErrorHint(true);\n      setErrorText\n      setTimeout(() => {\n         setIsShowErrorHint(false);\n      }, 2000);\n   };\n\n   const applySettingsHandler = () => {\n      if (isShowErrorHint) {\n         return;\n      } else {\n         if (rowsCount > 0 && columnsCount > 0) {\n            dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n         }\n         if (\n            (rowsCount === 0 || rowsCount < 0) &&\n            (columnsCount === 0 || columnsCount < 0)\n         ) {\n         } else if (rowsCount === 0 || rowsCount < 0) {\n            setIsShowErrorHint(true);\n            setErrorText();\n            setTimeout(() => {\n               setIsShowErrorHint(false);\n            }, 2000);\n         } else if (columnsCount === 0 || columnsCount < 0) {\n            setIsShowErrorHint(true);\n            setErrorText();\n            setTimeout(() => {\n               setIsShowErrorHint(false);\n            }, 2000);\n         }\n      }\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <Input\n            className={inputClassName}\n            label=\"Set the rows count\"\n            value={rowsCount}\n            onChangeInput={setRowsCount}\n         />\n         <Input\n            className={inputClassName}\n            label=\"Set the columns count\"\n            value={columnsCount}\n            onChangeInput={setColumnsCount}\n         />\n         <Input\n            className={inputClassName}\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            onChangeInput={setCellsCount}\n         />\n         <Button\n            className=\"red-button\"\n            buttonText=\"Apply settings\"\n            buttonClickHandler={applySettingsHandler}\n         />\n         {isError ? <ErrorHint errorText={errorText} /> : null}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n"]},"metadata":{},"sourceType":"module"}