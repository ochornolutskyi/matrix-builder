{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({\n  rowCount,\n  data,\n  cellsSetting\n}) => {\n  const nearestIds = useSelector(state => state.matrix.nearestIds);\n  const dispatch = useDispatch();\n  const [sumIsHover, setSumIsHover] = useState(false);\n  const rowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  });\n\n  const rowCells = () => {\n    const renderer = sumIsHover ? cellRenderers.percentage : cellRenderers.increment;\n    return data.map(cellData => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow);\n      const isNearest = nearestIds.find(id => id === cellData.id) ? true : false;\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum,\n        cellHoverHandler: () => dispatch(setNearestValues(cellsSetting, cellData.value)),\n        isNearest: isNearest,\n        Renderer: renderer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }\n      });\n    });\n  };\n\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumMouseEnterHandler: () => setSumIsHover(true),\n    sumMouseLeaveHandler: () => setSumIsHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells(), sumRowCell];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","useSelector","cellRenderers","removeRow","setNearestValues","CrossButton","TableCell","TableRow","rowCount","data","cellsSetting","nearestIds","state","matrix","dispatch","sumIsHover","setSumIsHover","rowLabel","static","rowCells","renderer","percentage","increment","map","cellData","percentOfSum","Math","round","value","sumRow","isNearest","find","id","reduce","sum","sumRowCell","cells"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow, setNearestValues } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ rowCount, data, cellsSetting }) => {\n   const nearestIds = useSelector((state) => state.matrix.nearestIds);\n   const dispatch = useDispatch();\n   const [sumIsHover, setSumIsHover] = useState(false);\n\n   const rowLabel = (\n      <TableCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const rowCells = () => {\n      const renderer = sumIsHover\n         ? cellRenderers.percentage\n         : cellRenderers.increment;\n\n      return data.map((cellData) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         const isNearest = nearestIds.find((id) => id === cellData.id)\n            ? true\n            : false;\n\n         return (\n            <TableCell\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               cellHoverHandler={() =>\n                  dispatch(setNearestValues(cellsSetting, cellData.value))\n               }\n               isNearest={isNearest}\n               Renderer={renderer}\n            />\n         );\n      });\n   };\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumMouseEnterHandler={() => setSumIsHover(true)}\n         sumMouseLeaveHandler={() => setSumIsHover(false)}\n      />\n   );\n   const cells = [rowLabel, ...rowCells(), sumRowCell];\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}