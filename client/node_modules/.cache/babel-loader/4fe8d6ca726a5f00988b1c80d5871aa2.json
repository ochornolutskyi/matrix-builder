{"ast":null,"code":"const calculateAverageValues = matrixData => {\n  const rowsValues = matrixData.map(item => item.map(row => row.value));\n  let averageValues = [];\n\n  for (let i = 0; i < rowsValues.length - 1; i++) {\n    let columnSum = 0;\n\n    for (let j = 0; j < rowsValues[i].length; j++) {\n      columnSum += rowsValues[i][j] + rowsValues[i + 1][j];\n    }\n\n    const average = columnSum / matrixData.length;\n    averageValues.push(average);\n  }\n\n  return averageValues;\n};\n\nexport default calculateAverageValues;\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/calculateAverageValues.js"],"names":["calculateAverageValues","matrixData","rowsValues","map","item","row","value","averageValues","i","length","columnSum","j","average","push"],"mappings":"AAAA,MAAMA,sBAAsB,GAAIC,UAAD,IAAgB;AAC5C,QAAMC,UAAU,GAAGD,UAAU,CAACE,GAAX,CAAgBC,IAAD,IAAUA,IAAI,CAACD,GAAL,CAAUE,GAAD,IAASA,GAAG,CAACC,KAAtB,CAAzB,CAAnB;AACA,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAAU,CAACO,MAAX,GAAoB,CAAxC,EAA2CD,CAAC,EAA5C,EAAgD;AAC7C,QAAIE,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAAU,CAACM,CAAD,CAAV,CAAcC,MAAlC,EAA0CE,CAAC,EAA3C,EAA+C;AAC5CD,MAAAA,SAAS,IAAIR,UAAU,CAACM,CAAD,CAAV,CAAcG,CAAd,IAAmBT,UAAU,CAACM,CAAC,GAAG,CAAL,CAAV,CAAkBG,CAAlB,CAAhC;AACF;;AACD,UAAMC,OAAO,GAAGF,SAAS,GAAGT,UAAU,CAACQ,MAAvC;AACAF,IAAAA,aAAa,CAACM,IAAd,CAAmBD,OAAnB;AACF;;AACD,SAAOL,aAAP;AACF,CAZD;;AAaA,eAAeP,sBAAf;AAEA","sourcesContent":["const calculateAverageValues = (matrixData) => {\n   const rowsValues = matrixData.map((item) => item.map((row) => row.value));\n   let averageValues = [];\n   for (let i = 0; i < rowsValues.length - 1; i++) {\n      let columnSum = 0;\n      for (let j = 0; j < rowsValues[i].length; j++) {\n         columnSum += rowsValues[i][j] + rowsValues[i + 1][j];\n      }\n      const average = columnSum / matrixData.length;\n      averageValues.push(average);\n   }\n   return averageValues;\n};\nexport default calculateAverageValues;\n\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */\n"]},"metadata":{},"sourceType":"module"}