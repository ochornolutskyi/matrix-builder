{"ast":null,"code":"var addCells=function addCells(columnsCount){var row=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var step=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;while(step<columnsCount){row.push({id:\"\".concat(Date.now()).concat(Math.round(1+Math.random()*9999)).concat(step),value:Math.round(100+Math.random()*899)});step++;}return row;};export var addRows=function addRows(data,rowsCount,columnsCount){var step=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;while(step<rowsCount){var rowCells=addCells(columnsCount);data.push(rowCells);step++;}return data;};export var createMatrix=function createMatrix(rowsCount,columnsCount){var data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];return addRows(data,rowsCount,columnsCount);};var rebuildColumns=function rebuildColumns(data,prevSettings,newSettings){var columnsCountDiff=0;if(prevSettings.columnsCount<newSettings.columnsCount){columnsCountDiff=newSettings.columnsCount-prevSettings.columnsCount;data.forEach(function(row,index){return addCells(columnsCountDiff,row);});}else if(prevSettings.columnsCount>newSettings.columnsCount){columnsCountDiff=prevSettings.columnsCount-newSettings.columnsCount;data.forEach(function(row){return row.splice(-columnsCountDiff);});}return data;};var rebuildRows=function rebuildRows(data,prevSettings,newSettings){var rowsCountDiff=0;if(prevSettings.rowsCount<newSettings.rowsCount){rowsCountDiff=newSettings.rowsCount-prevSettings.rowsCount;addRows(data,rowsCountDiff,newSettings.columnsCount);}else if(prevSettings.rowsCount>newSettings.rowsCount){rowsCountDiff=prevSettings.rowsCount-newSettings.rowsCount;data.splice(-rowsCountDiff);}return data;};export var rebuildMatrix=function rebuildMatrix(data,prevSettings,newSettings){rebuildColumns(data,prevSettings,newSettings);rebuildRows(data,prevSettings,newSettings);return data;};","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer/buildingMatrix.js"],"names":["addCells","columnsCount","row","step","push","id","Date","now","Math","round","random","value","addRows","data","rowsCount","rowCells","createMatrix","rebuildColumns","prevSettings","newSettings","columnsCountDiff","forEach","index","splice","rebuildRows","rowsCountDiff","rebuildMatrix"],"mappings":"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","sourcesContent":["const addCells = (columnsCount, row = [], step = 0) => {\n   while (step < columnsCount) {\n      row.push({\n         id: `${Date.now()}${Math.round(1 + Math.random() * 9999)}${step}`,\n         value: Math.round(100 + Math.random() * 899),\n      });\n      step++;\n   }\n   return row;\n};\nexport const addRows = (data, rowsCount, columnsCount, step = 0) => {\n   while (step < rowsCount) {\n      const rowCells = addCells(columnsCount);\n      data.push(rowCells);\n      step++;\n   }\n   return data;\n};\nexport const createMatrix = (rowsCount, columnsCount, data = []) => {\n   return addRows(data, rowsCount, columnsCount);\n};\nconst rebuildColumns = (data, prevSettings, newSettings) => {\n   let columnsCountDiff = 0;\n   if (prevSettings.columnsCount < newSettings.columnsCount) {\n      columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n      data.forEach((row, index) => addCells(columnsCountDiff, row));\n   } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n      columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n      data.forEach((row) => row.splice(-columnsCountDiff));\n   }\n   return data;\n};\nconst rebuildRows = (data, prevSettings, newSettings) => {\n   let rowsCountDiff = 0;\n   if (prevSettings.rowsCount < newSettings.rowsCount) {\n      rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n      addRows(data, rowsCountDiff, newSettings.columnsCount);\n   } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n      rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n      data.splice(-rowsCountDiff);\n   }\n   return data;\n};\nexport const rebuildMatrix = (data, prevSettings, newSettings) => {\n   rebuildColumns(data, prevSettings, newSettings);\n   rebuildRows(data, prevSettings, newSettings);\n   return data;\n};\n"]},"metadata":{},"sourceType":"module"}