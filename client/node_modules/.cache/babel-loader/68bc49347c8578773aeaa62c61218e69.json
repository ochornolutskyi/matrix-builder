{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport Button from \"../Button\";\nimport InputCounts from \"./InputCounts\";\nimport ErrorHint from \"../ErrorHint\";\n\nconst SettingsTable = () => {\n  const settings = useSelector(state => state.matrix.settings);\n  const dispatch = useDispatch();\n  const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n  const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n  const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n  const [isShowErrorHint, setIsShowErrorHint] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  useEffect(() => {\n    setRowsCount(settings.rowsCount);\n    /*   setColumnsCount(settings.columnsCount);\n    setCellsCount(settings.cellsCount); */\n  }, [settings]);\n\n  const applySettingsHandler = () => {\n    if (rowsCount > 0 || columnsCount > 0) {\n      dispatch(setSettings({\n        rowsCount,\n        columnsCount,\n        cellsCount\n      }));\n    } else if (rowsCount === 0 || rowsCount < 0) {\n      setIsShowErrorHint(true);\n      setErrorText(\"Please, set the correct rows count\");\n      setTimeout(() => {\n        setIsShowErrorHint(false);\n      }, 2000);\n    } // else if(columnsCount===0 || )\n\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputCounts, {\n    id: \"rows\",\n    label: \"Set the rows count\",\n    value: rowsCount,\n    handleChange: event => setRowsCount(+event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(InputCounts, {\n    id: \"columns\",\n    label: \"Set the columns count\",\n    value: columnsCount,\n    handleChange: event => setColumnsCount(+event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(InputCounts, {\n    id: \"cells\",\n    label: \"Set the count of cells to show the nearest value\",\n    value: cellsCount,\n    handleChange: event => setCellsCount(+event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    buttonText: \"Apply settings of matrix\",\n    buttonClickHandler: applySettingsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 10\n    }\n  }), isShowErrorHint ? /*#__PURE__*/React.createElement(ErrorHint, {\n    errorText: errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }) : null);\n};\n\nexport default SettingsTable;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","setSettings","Button","InputCounts","ErrorHint","SettingsTable","settings","state","matrix","dispatch","rowsCount","setRowsCount","columnsCount","setColumnsCount","cellsCount","setCellsCount","isShowErrorHint","setIsShowErrorHint","errorText","setErrorText","applySettingsHandler","setTimeout","event","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AACzB,QAAMC,QAAQ,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaF,QAAzB,CAA5B;AACA,QAAMG,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACQ,QAAQ,CAACI,SAAV,CAA1C;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAACQ,QAAQ,CAACM,YAAV,CAAhD;AACA,QAAM,CAACE,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAACQ,QAAQ,CAACQ,UAAV,CAA5C;AACA,QAAM,CAACE,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,IAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACbc,IAAAA,YAAY,CAACL,QAAQ,CAACI,SAAV,CAAZ;AACA;;AAEF,GAJQ,EAIN,CAACJ,QAAD,CAJM,CAAT;;AAMA,QAAMc,oBAAoB,GAAG,MAAM;AAChC,QAAIV,SAAS,GAAG,CAAZ,IAAiBE,YAAY,GAAG,CAApC,EAAuC;AACpCH,MAAAA,QAAQ,CAACR,WAAW,CAAC;AAAES,QAAAA,SAAF;AAAaE,QAAAA,YAAb;AAA2BE,QAAAA;AAA3B,OAAD,CAAZ,CAAR;AACF,KAFD,MAEO,IAAIJ,SAAS,KAAK,CAAd,IAAmBA,SAAS,GAAG,CAAnC,EAAsC;AAC1CO,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAE,MAAAA,YAAY,CAAC,oCAAD,CAAZ;AACAE,MAAAA,UAAU,CAAC,MAAM;AACdJ,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACF,OAFS,EAEP,IAFO,CAAV;AAGF,KAT+B,CAUhC;;AACF,GAXD;;AAaA,sBACG;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,WAAD;AACG,IAAA,EAAE,EAAC,MADN;AAEG,IAAA,KAAK,EAAC,oBAFT;AAGG,IAAA,KAAK,EAAEP,SAHV;AAIG,IAAA,YAAY,EAAGY,KAAD,IAAWX,YAAY,CAAC,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAf,CAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAOG,oBAAC,WAAD;AACG,IAAA,EAAE,EAAC,SADN;AAEG,IAAA,KAAK,EAAC,uBAFT;AAGG,IAAA,KAAK,EAAEZ,YAHV;AAIG,IAAA,YAAY,EAAGU,KAAD,IAAWT,eAAe,CAAC,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAf,CAJ3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPH,eAaG,oBAAC,WAAD;AACG,IAAA,EAAE,EAAC,OADN;AAEG,IAAA,KAAK,EAAC,kDAFT;AAGG,IAAA,KAAK,EAAEV,UAHV;AAIG,IAAA,YAAY,EAAGQ,KAAD,IAAWP,aAAa,CAAC,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAf,CAJzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbH,eAmBG,oBAAC,MAAD;AACG,IAAA,UAAU,EAAC,0BADd;AAEG,IAAA,kBAAkB,EAAEJ,oBAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBH,EAuBIJ,eAAe,gBAAG,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAyC,IAvB5D,CADH;AA2BF,CAvDD;;AAyDA,eAAeb,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport Button from \"../Button\";\nimport InputCounts from \"./InputCounts\";\nimport ErrorHint from \"../ErrorHint\";\n\nconst SettingsTable = () => {\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [isShowErrorHint, setIsShowErrorHint] = useState(false);\n   const [errorText, setErrorText] = useState(null);\n\n   useEffect(() => {\n      setRowsCount(settings.rowsCount);\n      /*   setColumnsCount(settings.columnsCount);\n      setCellsCount(settings.cellsCount); */\n   }, [settings]);\n\n   const applySettingsHandler = () => {\n      if (rowsCount > 0 || columnsCount > 0) {\n         dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n      } else if (rowsCount === 0 || rowsCount < 0) {\n         setIsShowErrorHint(true);\n         setErrorText(\"Please, set the correct rows count\");\n         setTimeout(() => {\n            setIsShowErrorHint(false);\n         }, 2000);\n      }\n      // else if(columnsCount===0 || )\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <InputCounts\n            id=\"rows\"\n            label=\"Set the rows count\"\n            value={rowsCount}\n            handleChange={(event) => setRowsCount(+event.target.value)}\n         />\n         <InputCounts\n            id=\"columns\"\n            label=\"Set the columns count\"\n            value={columnsCount}\n            handleChange={(event) => setColumnsCount(+event.target.value)}\n         />\n         <InputCounts\n            id=\"cells\"\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            handleChange={(event) => setCellsCount(+event.target.value)}\n         />\n         <Button\n            buttonText=\"Apply settings of matrix\"\n            buttonClickHandler={applySettingsHandler}\n         />\n         {isShowErrorHint ? <ErrorHint errorText={errorText} /> : null}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n"]},"metadata":{},"sourceType":"module"}