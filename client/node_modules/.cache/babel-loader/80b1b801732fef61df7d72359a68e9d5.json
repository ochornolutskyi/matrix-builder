{"ast":null,"code":"import _slicedToArray from\"/home/superproger/workspace/matrix-builder/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{setSettings}from\"../../redux/actions\";import\"./SettingsTable.scss\";import Button from\"../Button\";import ErrorHint from\"../ErrorHint\";import Input from\"./Input\";var inputClassName=\"input-settings\";var ROWS_COUNT_ERROR_MESSAGE=\"Please, set the correct rows count\";var COLUMNS_COUNT_ERROR_MESSAGE=\"Please, set the correct columns count\";var ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE=\"Please, set the correct rows and columns count\";var checkSettings=function checkSettings(rowsCount,columnsCount){if((rowsCount===0||rowsCount<0)&&(columnsCount===0||columnsCount<0)){return ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE;}else if(rowsCount===0||rowsCount<0){return ROWS_COUNT_ERROR_MESSAGE;}else if(columnsCount===0||columnsCount<0){return COLUMNS_COUNT_ERROR_MESSAGE;}};var SettingsTable=function SettingsTable(){var settings=useSelector(function(state){return state.matrix.settings;});var dispatch=useDispatch();var _useState=useState(settings.rowsCount),_useState2=_slicedToArray(_useState,2),rowsCount=_useState2[0],setRowsCount=_useState2[1];var _useState3=useState(settings.columnsCount),_useState4=_slicedToArray(_useState3,2),columnsCount=_useState4[0],setColumnsCount=_useState4[1];var _useState5=useState(settings.cellsCount),_useState6=_slicedToArray(_useState5,2),cellsCount=_useState6[0],setCellsCount=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isError=_useState8[0],setIsError=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),errorText=_useState10[0],setErrorText=_useState10[1];var showErrorMessage=function showErrorMessage(message){setIsError(true);setErrorText(message);setTimeout(function(){setIsError(false);},2000);};var applySettingsHandler=function applySettingsHandler(){var error=checkSettings(rowsCount,columnsCount);if(error){showErrorMessage(error);}else{dispatch(setSettings({rowsCount:rowsCount,columnsCount:columnsCount,cellsCount:cellsCount}));}};return/*#__PURE__*/React.createElement(\"div\",{className:\"settings-wrapper\"},/*#__PURE__*/React.createElement(Input,{id:\"rows-input\",className:inputClassName,label:\"Set the rows count\",value:rowsCount,onChangeInput:setRowsCount}),/*#__PURE__*/React.createElement(Input,{id:\"columns-input\",className:inputClassName,label:\"Set the columns count\",value:columnsCount,onChangeInput:setColumnsCount}),/*#__PURE__*/React.createElement(Input,{id:\"cells-input\",className:inputClassName,label:\"Set the count of cells to show the nearest value\",value:cellsCount,onChangeInput:setCellsCount}),/*#__PURE__*/React.createElement(Button,{className:\"red-button\",buttonText:\"Apply settings\",buttonClickHandler:applySettingsHandler}),isError&&/*#__PURE__*/React.createElement(ErrorHint,{errorText:errorText}));};export default SettingsTable;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js"],"names":["React","useState","useDispatch","useSelector","setSettings","Button","ErrorHint","Input","inputClassName","ROWS_COUNT_ERROR_MESSAGE","COLUMNS_COUNT_ERROR_MESSAGE","ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE","checkSettings","rowsCount","columnsCount","SettingsTable","settings","state","matrix","dispatch","setRowsCount","setColumnsCount","cellsCount","setCellsCount","isError","setIsError","errorText","setErrorText","showErrorMessage","message","setTimeout","applySettingsHandler","error"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport \"./SettingsTable.scss\";\nimport Button from \"../Button\";\nimport ErrorHint from \"../ErrorHint\";\nimport Input from \"./Input\";\n\nconst inputClassName = \"input-settings\";\nconst ROWS_COUNT_ERROR_MESSAGE = \"Please, set the correct rows count\";\nconst COLUMNS_COUNT_ERROR_MESSAGE = \"Please, set the correct columns count\";\nconst ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE =\n   \"Please, set the correct rows and columns count\";\nconst checkSettings = (rowsCount, columnsCount) => {\n   if (\n      (rowsCount === 0 || rowsCount < 0) &&\n      (columnsCount === 0 || columnsCount < 0)\n   ) {\n      return ROWS_AND_COLUMNS_COUNT_ERROR_MESSAGE;\n   } else if (rowsCount === 0 || rowsCount < 0) {\n      return ROWS_COUNT_ERROR_MESSAGE;\n   } else if (columnsCount === 0 || columnsCount < 0) {\n      return COLUMNS_COUNT_ERROR_MESSAGE;\n   }\n};\n\nconst SettingsTable = () => {\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [isError, setIsError] = useState(false);\n   const [errorText, setErrorText] = useState(\"\");\n\n   const showErrorMessage = (message) => {\n      setIsError(true);\n      setErrorText(message);\n      setTimeout(() => {\n         setIsError(false);\n      }, 2000);\n   };\n\n   const applySettingsHandler = () => {\n      const error = checkSettings(rowsCount, columnsCount);\n      if (error) {\n         showErrorMessage(error);\n      } else {\n         dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n      }\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <Input\n            id=\"rows-input\"\n            className={inputClassName}\n            label=\"Set the rows count\"\n            value={rowsCount}\n            onChangeInput={setRowsCount}\n         />\n         <Input\n            id=\"columns-input\"\n            className={inputClassName}\n            label=\"Set the columns count\"\n            value={columnsCount}\n            onChangeInput={setColumnsCount}\n         />\n         <Input\n            id=\"cells-input\"\n            className={inputClassName}\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            onChangeInput={setCellsCount}\n         />\n         <Button\n            className=\"red-button\"\n            buttonText=\"Apply settings\"\n            buttonClickHandler={applySettingsHandler}\n         />\n         {isError && <ErrorHint errorText={errorText} />}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n"]},"metadata":{},"sourceType":"module"}