{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/index.js\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport TableCell from \"../TableRow/TableCell\";\n\nconst AverageRow = () => {\n  const data = useSelector(state => state.matrix.data);\n  const values = data.map(item => item.filter(data => data.value).map(row => row.value)).flat();\n  console.log(values); //current row values and next row values return the sum of values by equal index\n\n  /*  const averageValues = values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */\n\n  const averageValues = values.reduce((currentRow, nextRow) => currentRow.map((value, index) => value + nextRow[index])).map(value => value / data.length);\n  const avgRowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: \"avg\",\n    value: \"Avg\",\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  });\n  const avgRowCells = averageValues.map((value, index) => /*#__PURE__*/React.createElement(TableCell, {\n    key: index,\n    value: value.toFixed(2),\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }));\n  const cells = [avgRowLabel, ...avgRowCells];\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, cells);\n};\n\nexport default AverageRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/index.js"],"names":["React","useSelector","cellRenderers","TableCell","AverageRow","data","state","matrix","values","map","item","filter","value","row","flat","console","log","averageValues","reduce","currentRow","nextRow","index","length","avgRowLabel","static","avgRowCells","toFixed","cells"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACtB,QAAMC,IAAI,GAAGJ,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaF,IAAzB,CAAxB;AACA,QAAMG,MAAM,GAAGH,IAAI,CACfI,GADW,CACNC,IAAD,IAAUA,IAAI,CAACC,MAAL,CAAaN,IAAD,IAAUA,IAAI,CAACO,KAA3B,EAAkCH,GAAlC,CAAuCI,GAAD,IAASA,GAAG,CAACD,KAAnD,CADH,EAEXE,IAFW,EAAf;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ,EALsB,CAMtB;;AACD;;;;;;AAKC,QAAMS,aAAa,GAAGT,MAAM,CACxBU,MADkB,CACX,CAACC,UAAD,EAAaC,OAAb,KACLD,UAAU,CAACV,GAAX,CAAe,CAACG,KAAD,EAAQS,KAAR,KAAkBT,KAAK,GAAGQ,OAAO,CAACC,KAAD,CAAhD,CAFgB,EAIlBZ,GAJkB,CAIbG,KAAD,IAAWA,KAAK,GAAGP,IAAI,CAACiB,MAJV,CAAtB;AAMA,QAAMC,WAAW,gBACd,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAC,KAAf;AAAqB,IAAA,KAAK,EAAC,KAA3B;AAAiC,IAAA,QAAQ,EAAErB,aAAa,CAACsB,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AAGA,QAAMC,WAAW,GAAGR,aAAa,CAACR,GAAd,CAAkB,CAACG,KAAD,EAAQS,KAAR,kBACnC,oBAAC,SAAD;AACG,IAAA,GAAG,EAAEA,KADR;AAEG,IAAA,KAAK,EAAET,KAAK,CAACc,OAAN,CAAc,CAAd,CAFV;AAGG,IAAA,QAAQ,EAAExB,aAAa,CAACsB,MAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiB,CAApB;AAOA,QAAMG,KAAK,GAAG,CAACJ,WAAD,EAAc,GAAGE,WAAjB,CAAd;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,KAAL,CAAP;AACF,CA/BD;;AAiCA,eAAevB,UAAf","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport TableCell from \"../TableRow/TableCell\";\n\nconst AverageRow = () => {\n   const data = useSelector((state) => state.matrix.data);\n   const values = data\n      .map((item) => item.filter((data) => data.value).map((row) => row.value))\n      .flat();\n   console.log(values);\n   //current row values and next row values return the sum of values by equal index\n  /*  const averageValues = values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */\n   const averageValues = values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length);\n\n   const avgRowLabel = (\n      <TableCell key=\"avg\" value=\"Avg\" Renderer={cellRenderers.static} />\n   );\n   const avgRowCells = averageValues.map((value, index) => (\n      <TableCell\n         key={index}\n         value={value.toFixed(2)}\n         Renderer={cellRenderers.static}\n      />\n   ));\n   const cells = [avgRowLabel, ...avgRowCells];\n\n   return <tr>{cells}</tr>;\n};\n\nexport default AverageRow;\n"]},"metadata":{},"sourceType":"module"}