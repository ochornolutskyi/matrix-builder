{"ast":null,"code":"const addCells = (columnsCount, row = [], step = 0) => {\n  while (step < columnsCount) {\n    row.push({\n      id: `${Date.now()}${Math.round(1 + Math.random() * 9999)}${step}`,\n      value: Math.round(100 + Math.random() * 899)\n    });\n    step++;\n  }\n\n  return row;\n};\n\nexport const addRows = (data, rowsCount, columnsCount, step = 0) => {\n  while (step < rowsCount) {\n    const rowCells = addCells(columnsCount);\n    [...data].push(rowCells);\n    step++;\n  }\n\n  return data;\n};\nexport const createMatrix = (rowsCount, columnsCount, data = []) => {\n  return addRows(data, rowsCount, columnsCount);\n};\n\nconst rebuildColumns = (data, prevSettings, newSettings) => {\n  let columnsCountDiff = 0;\n\n  if (prevSettings.columnsCount < newSettings.columnsCount) {\n    columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n    data.forEach((row, index) => addCells(columnsCountDiff, row));\n  } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n    columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n    data.forEach(row => row.splice(-columnsCountDiff));\n  }\n\n  return data;\n};\n\nconst rebuildRows = (data, prevSettings, newSettings) => {\n  let rowsCountDiff = 0;\n\n  if (prevSettings.rowsCount < newSettings.rowsCount) {\n    rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n    addRows(data, rowsCountDiff, newSettings.columnsCount);\n  } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n    rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n    data.splice(-rowsCountDiff);\n  }\n\n  return data;\n};\n\nexport const rebuildMatrix = (data, prevSettings, newSettings) => {\n  let matrixData = [...data];\n  rebuildColumns(matrixData, prevSettings, newSettings);\n  rebuildRows(matrixData, prevSettings, newSettings);\n  return data;\n};","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/redux/reducers/matrixReducer/building.js"],"names":["addCells","columnsCount","row","step","push","id","Date","now","Math","round","random","value","addRows","data","rowsCount","rowCells","createMatrix","rebuildColumns","prevSettings","newSettings","columnsCountDiff","forEach","index","splice","rebuildRows","rowsCountDiff","rebuildMatrix","matrixData"],"mappings":"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","sourcesContent":["const addCells = (columnsCount, row = [], step = 0) => {\n   while (step < columnsCount) {\n      row.push({\n         id: `${Date.now()}${Math.round(1 + Math.random() * 9999)}${step}`,\n         value: Math.round(100 + Math.random() * 899),\n      });\n      step++;\n   }\n   return row;\n};\nexport const addRows = (data, rowsCount, columnsCount, step = 0) => {\n   \n   while (step < rowsCount) {\n      const rowCells = addCells(columnsCount);\n     [... data].push(rowCells)\n      step++;\n   }\n   return data;\n};\nexport const createMatrix = (rowsCount, columnsCount, data = []) => {\n   return addRows(data, rowsCount, columnsCount);\n};\nconst rebuildColumns = (data, prevSettings, newSettings) => {\n   let columnsCountDiff = 0;\n   if (prevSettings.columnsCount < newSettings.columnsCount) {\n      columnsCountDiff = newSettings.columnsCount - prevSettings.columnsCount;\n      data.forEach((row, index) => addCells(columnsCountDiff, row));\n   } else if (prevSettings.columnsCount > newSettings.columnsCount) {\n      columnsCountDiff = prevSettings.columnsCount - newSettings.columnsCount;\n      data.forEach((row) => row.splice(-columnsCountDiff));\n   }\n   return data;\n};\nconst rebuildRows = (data, prevSettings, newSettings) => {\n   let rowsCountDiff = 0;\n   if (prevSettings.rowsCount < newSettings.rowsCount) {\n      rowsCountDiff = newSettings.rowsCount - prevSettings.rowsCount;\n      addRows(data, rowsCountDiff, newSettings.columnsCount);\n   } else if (prevSettings.rowsCount > newSettings.rowsCount) {\n      rowsCountDiff = prevSettings.rowsCount - newSettings.rowsCount;\n      data.splice(-rowsCountDiff);\n   }\n   return data;\n};\nexport const rebuildMatrix = (data, prevSettings, newSettings) => {\n   let matrixData = [...data];\n   rebuildColumns(matrixData, prevSettings, newSettings);\n   rebuildRows(matrixData, prevSettings, newSettings);\n   return data;\n};\n"]},"metadata":{},"sourceType":"module"}