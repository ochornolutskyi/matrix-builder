{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport Button from \"../Button\";\nimport InputCounts from \"./InputCounts\";\nimport ErrorHint from \"../ErrorHint\";\nimport { CELL_INPUT, COLUMN_INPUT, ROW_INPUT } from \"../../SETTINGS_INPUT_IDS\";\n\nconst SettingsTable = () => {\n  const matrixData = useSelector(state => state.matrix.data);\n  const settings = useSelector(state => state.matrix.settings);\n  const dispatch = useDispatch();\n  const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n  const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n  const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n  const [isShowErrorHint, setIsShowErrorHint] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  useEffect(() => {\n    setRowsCount(settings.rowsCount);\n    setColumnsCount(settings.columnsCount);\n    setCellsCount(settings.cellsCount);\n  }, [settings]);\n\n  const applySettingsHandler = () => {\n    if (isShowErrorHint) {\n      return;\n    } else {\n      if (rowsCount > 0 && columnsCount > 0) {\n        dispatch(setSettings({\n          rowsCount,\n          columnsCount,\n          cellsCount\n        }));\n      }\n\n      if ((rowsCount === 0 || rowsCount < 0) && (columnsCount === 0 || columnsCount < 0)) {\n        setIsShowErrorHint(true);\n        setErrorText(\"Please, set the correct rows and columns count\");\n        setTimeout(() => {\n          setIsShowErrorHint(false);\n        }, 2000);\n      } else if (rowsCount === 0 || rowsCount < 0) {\n        setIsShowErrorHint(true);\n        setErrorText(\"Please, set the correct rows count\");\n        setTimeout(() => {\n          setIsShowErrorHint(false);\n        }, 2000);\n      } else if (columnsCount === 0 || columnsCount < 0) {\n        setIsShowErrorHint(true);\n        setErrorText(\"Please, set the correct columns count\");\n        setTimeout(() => {\n          setIsShowErrorHint(false);\n        }, 2000);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputCounts, {\n    id: ROW_INPUT,\n    label: \"Set the rows count\",\n    value: rowsCount,\n    handleChange: event => setRowsCount(+event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(InputCounts, {\n    id: COLUMN_INPUT,\n    label: \"Set the columns count\",\n    value: columnsCount,\n    handleChange: event => setColumnsCount(+event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(InputCounts, {\n    id: CELL_INPUT,\n    label: \"Set the count of cells to show the nearest value\",\n    value: cellsCount,\n    handleChange: event => setCellsCount(+event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    buttonText: \"Apply settings of matrix\",\n    buttonClickHandler: applySettingsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }\n  }), isShowErrorHint ? /*#__PURE__*/React.createElement(ErrorHint, {\n    errorText: errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  }) : null);\n};\n\nexport default SettingsTable;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/SettingsTable/index.js"],"names":["React","useEffect","useState","useDispatch","useSelector","setSettings","Button","InputCounts","ErrorHint","CELL_INPUT","COLUMN_INPUT","ROW_INPUT","SettingsTable","matrixData","state","matrix","data","settings","dispatch","rowsCount","setRowsCount","columnsCount","setColumnsCount","cellsCount","setCellsCount","isShowErrorHint","setIsShowErrorHint","errorText","setErrorText","applySettingsHandler","setTimeout","event","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSettings } from \"../../redux/actions\";\nimport Button from \"../Button\";\nimport InputCounts from \"./InputCounts\";\nimport ErrorHint from \"../ErrorHint\";\nimport { CELL_INPUT, COLUMN_INPUT, ROW_INPUT } from \"../../SETTINGS_INPUT_IDS\";\n\nconst SettingsTable = () => {\n   const matrixData =   useSelector(state => state.matrix.data)\n   const settings = useSelector((state) => state.matrix.settings);\n   const dispatch = useDispatch();\n   const [rowsCount, setRowsCount] = useState(settings.rowsCount);\n   const [columnsCount, setColumnsCount] = useState(settings.columnsCount);\n   const [cellsCount, setCellsCount] = useState(settings.cellsCount);\n   const [isShowErrorHint, setIsShowErrorHint] = useState(false);\n   const [errorText, setErrorText] = useState(null);\n\n   useEffect(() => {\n      setRowsCount(settings.rowsCount);\n      setColumnsCount(settings.columnsCount);\n      setCellsCount(settings.cellsCount);\n   }, [settings]);\n\n   const applySettingsHandler = () => {\n      if (isShowErrorHint) {\n         return;\n      } else {\n         if (rowsCount > 0 && columnsCount > 0) {\n            dispatch(setSettings({ rowsCount, columnsCount, cellsCount }));\n         }\n         if (\n            (rowsCount === 0 || rowsCount < 0) &&\n            (columnsCount === 0 || columnsCount < 0)\n         ) {\n            setIsShowErrorHint(true);\n            setErrorText(\"Please, set the correct rows and columns count\");\n            setTimeout(() => {\n               setIsShowErrorHint(false);\n            }, 2000);\n         } else if (rowsCount === 0 || rowsCount < 0) {\n            setIsShowErrorHint(true);\n            setErrorText(\"Please, set the correct rows count\");\n            setTimeout(() => {\n               setIsShowErrorHint(false);\n            }, 2000);\n         } else if (columnsCount === 0 || columnsCount < 0) {\n            setIsShowErrorHint(true);\n            setErrorText(\"Please, set the correct columns count\");\n            setTimeout(() => {\n               setIsShowErrorHint(false);\n            }, 2000);\n         }\n      }\n   };\n\n   return (\n      <div className=\"settings-wrapper\">\n         <InputCounts\n            id={ROW_INPUT}\n            label=\"Set the rows count\"\n            value={rowsCount}\n            handleChange={(event) => setRowsCount(+event.target.value)}\n         />\n         <InputCounts\n            id={COLUMN_INPUT}\n            label=\"Set the columns count\"\n            value={columnsCount}\n            handleChange={(event) => setColumnsCount(+event.target.value)}\n         />\n         <InputCounts\n            id={CELL_INPUT}\n            label=\"Set the count of cells to show the nearest value\"\n            value={cellsCount}\n            handleChange={(event) => setCellsCount(+event.target.value)}\n         />\n         <Button\n            buttonText=\"Apply settings of matrix\"\n            buttonClickHandler={applySettingsHandler}\n         />\n         {isShowErrorHint ? <ErrorHint errorText={errorText} /> : null}\n      </div>\n   );\n};\n\nexport default SettingsTable;\n"]},"metadata":{},"sourceType":"module"}