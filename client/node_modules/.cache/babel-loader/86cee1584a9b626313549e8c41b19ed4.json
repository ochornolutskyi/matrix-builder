{"ast":null,"code":"const calculateAverageValues = values => {\n  let averageValues = [];\n\n  for (let i = 0; i < values.length - 1; i++) {\n    let columnSum = 0;\n    console.log(values[i]);\n\n    for (let j = 0; j < values[i].length; j++) {\n      console.log(values[i][j]); // columnSum += values[i][j] + values[i][j + 1];\n    }\n\n    averageValues.push(columnSum);\n  }\n\n  return averageValues;\n};\n\nexport default calculateAverageValues;\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/AverageRow/calculateAverageValues.js"],"names":["calculateAverageValues","values","averageValues","i","length","columnSum","console","log","j","push"],"mappings":"AAAA,MAAMA,sBAAsB,GAAIC,MAAD,IAAY;AACxC,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAAP,GAAc,CAAlC,EAAqCD,CAAC,EAAtC,EAA0C;AACvC,QAAIE,SAAS,GAAG,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACE,CAAD,CAAlB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAAM,CAACE,CAAD,CAAN,CAAUC,MAA9B,EAAsCI,CAAC,EAAvC,EAA2C;AACxCF,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACE,CAAD,CAAN,CAAUK,CAAV,CAAZ,EADwC,CAExC;AACF;;AACDN,IAAAA,aAAa,CAACO,IAAd,CAAmBJ,SAAnB;AACF;;AACD,SAAOH,aAAP;AACF,CAZD;;AAaA,eAAeF,sBAAf;AAEA","sourcesContent":["const calculateAverageValues = (values) => {\n   let averageValues = [];\n   for (let i = 0; i < values.length-1; i++) {\n      let columnSum = 0;\n      console.log(values[i])\n      for (let j = 0; j < values[i].length; j++) {\n         console.log(values[i][j])\n         // columnSum += values[i][j] + values[i][j + 1];\n      }\n      averageValues.push(columnSum);\n   }\n   return averageValues\n};\nexport default calculateAverageValues;\n\n/*   values\n      .reduce((currentRow, nextRow) =>\n         currentRow.map((value, index) => value + nextRow[index])\n      )\n      .map((value) => value / data.length); */\n"]},"metadata":{},"sourceType":"module"}