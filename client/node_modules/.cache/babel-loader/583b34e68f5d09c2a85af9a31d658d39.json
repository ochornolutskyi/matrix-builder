{"ast":null,"code":"var _jsxFileName = \"/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({\n  rowCount,\n  data,\n  cellsSetting\n}) => {\n  const [sumIsHover, setSumIsHover] = useState(false);\n  const sumRow = data.map(data => data.value).reduce((sum = 0, value) => sum + value);\n  const rowLabel = /*#__PURE__*/React.createElement(TableCell, {\n    key: rowCount,\n    value: rowCount,\n    Renderer: cellRenderers.static,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  });\n  const rowCells = useMemo(() => {\n    const renderer = sumIsHover ? cellRenderers.percentage : cellRenderers.increment;\n    return data.map((cellData, index) => {\n      const percentOfSum = Math.round(cellData.value * 100 / sumRow);\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: cellData.id,\n        id: cellData.id,\n        value: cellData.value,\n        percent: percentOfSum,\n        Renderer: renderer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }\n      });\n    });\n  }, [sumIsHover]);\n\n  const sumHoverHandler = () => {};\n\n  const sumRowCell = /*#__PURE__*/React.createElement(TableCell, {\n    key: sumRow,\n    value: sumRow,\n    Renderer: cellRenderers.sum,\n    sumHoverHandler: sumHoverHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  });\n  const cells = [rowLabel, ...rowCells, sumRowCell];\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, cells, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CrossButton, {\n    buttonClickHandler: () => dispatch(removeRow(rowCount)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default TableRow;","map":{"version":3,"sources":["/home/superproger/workspace/matrix-builder/client/src/components/Main/Table/TableBody/TableRow/index.js"],"names":["React","useState","useDispatch","useSelector","cellRenderers","removeRow","CrossButton","TableCell","TableRow","rowCount","data","cellsSetting","sumIsHover","setSumIsHover","sumRow","map","value","reduce","sum","rowLabel","static","rowCells","useMemo","renderer","percentage","increment","cellData","index","percentOfSum","Math","round","id","sumHoverHandler","sumRowCell","cells","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAAsC;AACpD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMa,MAAM,GAAGJ,IAAI,CACfK,GADW,CACNL,IAAD,IAAUA,IAAI,CAACM,KADR,EAEXC,MAFW,CAEJ,CAACC,GAAG,GAAG,CAAP,EAAUF,KAAV,KAAoBE,GAAG,GAAGF,KAFtB,CAAf;AAGA,QAAMG,QAAQ,gBACX,oBAAC,SAAD;AACG,IAAA,GAAG,EAAEV,QADR;AAEG,IAAA,KAAK,EAAEA,QAFV;AAGG,IAAA,QAAQ,EAAEL,aAAa,CAACgB,MAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AAOA,QAAMC,QAAQ,GAAGC,OAAO,CAAC,MAAM;AAC5B,UAAMC,QAAQ,GAAGX,UAAU,GACtBR,aAAa,CAACoB,UADQ,GAEtBpB,aAAa,CAACqB,SAFnB;AAIA,WAAOf,IAAI,CAACK,GAAL,CAAS,CAACW,QAAD,EAAWC,KAAX,KAAqB;AAClC,YAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAYJ,QAAQ,CAACV,KAAT,GAAiB,GAAlB,GAAyBF,MAApC,CAArB;AACA,0BACG,oBAAC,SAAD;AACG,QAAA,GAAG,EAAEY,QAAQ,CAACK,EADjB;AAEG,QAAA,EAAE,EAAEL,QAAQ,CAACK,EAFhB;AAGG,QAAA,KAAK,EAAEL,QAAQ,CAACV,KAHnB;AAIG,QAAA,OAAO,EAAEY,YAJZ;AAKG,QAAA,QAAQ,EAAEL,QALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH;AASF,KAXM,CAAP;AAYF,GAjBuB,EAiBrB,CAACX,UAAD,CAjBqB,CAAxB;;AAkBA,QAAMoB,eAAe,GAAG,MAAM,CAAE,CAAhC;;AACA,QAAMC,UAAU,gBACb,oBAAC,SAAD;AACG,IAAA,GAAG,EAAEnB,MADR;AAEG,IAAA,KAAK,EAAEA,MAFV;AAGG,IAAA,QAAQ,EAAEV,aAAa,CAACc,GAH3B;AAIG,IAAA,eAAe,EAAEc,eAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AAQA,QAAME,KAAK,GAAG,CAACf,QAAD,EAAW,GAAGE,QAAd,EAAwBY,UAAxB,CAAd;AACA,QAAME,QAAQ,GAAGjC,WAAW,EAA5B;AAEA,sBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIgC,KADJ,eAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,WAAD;AACG,IAAA,kBAAkB,EAAE,MAAMC,QAAQ,CAAC9B,SAAS,CAACI,QAAD,CAAV,CADrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAFH,CADH;AAUF,CApDD;;AAsDA,eAAeD,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { cellRenderers } from \"../../../../../CellRenderers\";\nimport { removeRow } from \"../../../../../redux/actions\";\nimport CrossButton from \"../../../../CrossButton\";\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ rowCount, data, cellsSetting }) => {\n   const [sumIsHover, setSumIsHover] = useState(false);\n   const sumRow = data\n      .map((data) => data.value)\n      .reduce((sum = 0, value) => sum + value);\n   const rowLabel = (\n      <TableCell\n         key={rowCount}\n         value={rowCount}\n         Renderer={cellRenderers.static}\n      />\n   );\n   const rowCells = useMemo(() => {\n      const renderer = sumIsHover\n         ? cellRenderers.percentage\n         : cellRenderers.increment;\n\n      return data.map((cellData, index) => {\n         const percentOfSum = Math.round((cellData.value * 100) / sumRow);\n         return (\n            <TableCell\n               key={cellData.id}\n               id={cellData.id}\n               value={cellData.value}\n               percent={percentOfSum}\n               Renderer={renderer}\n            />\n         );\n      });\n   }, [sumIsHover]);\n   const sumHoverHandler = () => {};\n   const sumRowCell = (\n      <TableCell\n         key={sumRow}\n         value={sumRow}\n         Renderer={cellRenderers.sum}\n         sumHoverHandler={sumHoverHandler}\n      />\n   );\n   const cells = [rowLabel, ...rowCells, sumRowCell];\n   const dispatch = useDispatch();\n\n   return (\n      <tr>\n         {cells}\n         <td>\n            <CrossButton\n               buttonClickHandler={() => dispatch(removeRow(rowCount))}\n            />\n         </td>\n      </tr>\n   );\n};\n\nexport default TableRow;\n"]},"metadata":{},"sourceType":"module"}